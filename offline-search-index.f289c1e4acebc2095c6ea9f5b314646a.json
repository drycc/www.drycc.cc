[{"body":"The Drycc Workflow command-line interface (CLI), or client, allows you to interact with Drycc Workflow.\nInstallation Install the latest drycc client for Linux or Mac OS X with: $ curl -sfL https://www.drycc.cc/install-cli.sh | bash -\nThe installer puts drycc in your current directory, but you should move it somewhere in your $PATH:\n$ ln -fs $PWD/drycc /usr/local/bin/drycc Getting Help The Drycc client comes with comprehensive documentation for every command. Use drycc help to explore the commands available to you:\n$ drycc help The Drycc command-line client issues API calls to a Drycc controller. Usage: drycc \u003ccommand\u003e [\u003cargs\u003e...] Auth commands:: login login to a controller logout logout from the current controller Subcommands, use `drycc help [subcommand]` to learn more:: ... To get help on subcommands, use drycc help [subcommand]:\n$ drycc help apps Valid commands for apps: apps:create create a new application apps:list list accessible applications apps:info view info about an application apps:open open the application in a browser apps:logs view aggregated application logs apps:run run a command in an ephemeral app container apps:destroy destroy an application apps:transfer transfer app ownership to another user Use `drycc help [command]` to learn more Support for Multiple Profiles The CLI reads from the default client profile, which is located on your workstation at $HOME/.drycc/client.json.\nEasily switch between multiple Drycc Workflow installations or users by setting the $DRYCC_PROFILE environment variable or by using the -c flag.\nThere are two ways to set the $DRYCC_PROFILE option.\nPath to a json configuration file. Profile name. If you set profile to just a name, it will be saved alongside the default profile, in $HOME/.drycc/\u003cname\u003e.json. Examples:\n$ DRYCC_PROFILE=production drycc login drycc.production.com ... Opening browser to http://drycc.example.com/v2/login/drycc/?key=4ccc81ee2dce4349ad5261ceffe72c71 Waiting for login... .o.Logged in as drycc Configuration saved to /home/testuser/.drycc/production.json $ DRYCC_PROFILE=~/config.json drycc login drycc.example.com ... Opening browser to http://drycc.example.com/v2/login/drycc/?key=4ccc81ee2dce4349ad5261ceffe72c71 Waiting for login... .o.Logged in as drycc Configuration saved to /home/testuser/config.json The configuration flag works identically to and overrides $DRYCC_PROFILE:\n$ drycc whoami -c ~/config.json You are drycc at drycc.example.com Proxy Support If your workstation uses a proxy to reach the network where the cluster lies, set the http_proxy or https_proxy environment variable to enable proxy support:\n$ export http_proxy=\"http://proxyip:port\" $ export https_proxy=\"http://proxyip:port\" !!! note Configuring a proxy is generally not necessary for local Minikube clusters.\nCLI Plugins Plugins allow developers to extend the functionality of the Drycc Client, adding new commands or features.\nIf an unknown command is specified, the client will attempt to execute the command as a dash-separated command. In this case, drycc resource:command will execute drycc-resource with the argument list command. In full form:\n$ # these two are identical $ drycc accounts list $ drycc-accounts list Any flags after the command will also be sent to the plugin as an argument:\n$ # these two are identical $ drycc accounts list --debug $ drycc-accounts list --debug But flags preceding the command will not:\n$ # these two are identical $ drycc --debug accounts list $ drycc-accounts list ","categories":"","description":"How to download, install, and start using the Drycc CLI. The Drycc CLI used to be part of the Drycc Toolbelt.","excerpt":"How to download, install, and start using the Drycc CLI. The Drycc CLI …","ref":"/docs/users/cli/","tags":"","title":"Drycc Workflow  CLI"},{"body":"Twelve-Factor Applications The Twelve-Factor App is a methodology for building modern applications that can be scaled across a distributed system.\nTwelve-factor is a valuable synthesis of years of experience with software-as-a-service apps in the wild, particularly on the Heroku platform.\nWorkflow is designed to run applications that adhere to the Twelve-Factor App methodology and best practices.\nKubernetes Kubernetes is an open-source cluster manager developed by Google and donated to the Cloud Native Compute Foundation. Kubernetes manages all the activity on your cluster, including: desired state convergence, stable service addresses, health monitoring, service discovery, and DNS resolution.\nWorkflow builds upon Kubernetes abstractions like Services, Deployments and Pods to provide a developer-friendly experience. Building containers directly from application source code, aggregating logs, and managing deployment configurations and app releases are just some of the features Workflow adds.\nDrycc Workflow is a set of Kubernetes-native components, installable via Helm. Systems engineers who are familiar with Kubernetes will feel right at home running Workflow.\nSee the components overview for more detail.\nContainer [Container][] is an open source project to build, ship and run any application as a lightweight, portable, self-sufficient container.\nIf you have not yet converted your application to containers, Workflow provides a simple and straightforward “source to Container image” capability. Supporting multiple language runtimes via community buildpacks, building your application in a container can be as easy as git push drycc master.\nApplications which use either a Dockerfile or reference external Container images are launched unmodified.\nApplications Workflow is designed around the concept of an application, or app.\nApplications come in one of three forms:\na collection of source files stored in a git repository a Dockerfile and associated source files stored in a git repository a reference to an existing image at a Container repository Applications are identified by a unique name for easy reference. If you do not specify a name when creating your application, Workflow generates one for you. Workflow also manages related information, including domain names, SSL certificates, and developer-provided configuration.\nBuild, Release, Run Build Stage The builder component processes incoming git push drycc master requests and manages your application packaging.\nIf your application is using a buildpack, builder will launch an ephemeral job to extract and execute the packaging instructions. The resulting application artifact is stored by the platform for execution during the run stage.\nIf instead builder finds a Dockerfile, it follows those instructions to create a Container image. The resulting artifact is stored in a Drycc-managed registry which will be referenced during the run stage.\nIf another system already builds and packages your application, that container artifact can be used directly. When referencing an external Container image, the builder component doesn’t attempt to repackage your app.\nRelease Stage During the release stage, a build is combined with application configuration to create a new, numbered release. New releases are created any time a new build is created or application configuration is changed. Tracking releases as a “write-only ledger” this way makes it easy to rollback to any previous release.\nRun Stage The run stage deploys the new release to the underlying Kubernetes cluster by changing the Deployment object which references the new release. By managing the desired replica count, Workflow orchestrates a zero-downtime, rolling update of your application. Once successfully updated, Workflow removes the last reference to the old release. Note that during the deploy, your application will be running in a mixed mode.\nBacking Services Workflow treats all persistent services such as databases, caches, storage, messaging systems, and other backing services as resources managed separately from your application. This philosophy aligns with Twelve-Factor best practices.\nApplications attach to backing services using environment variables. Because apps are decoupled from backing services, they are free to scale up independently, to use services provided by other apps, or to switch to external or third-party vendor services.\nSee Also Workflow Architecture Workflow Components ","categories":"","description":"Drycc Workflow is a lightweight application platform that deploys and scales Twelve-Factor apps as containers across a Kubernetes cluster.","excerpt":"Drycc Workflow is a lightweight application platform that deploys and …","ref":"/docs/understanding-workflow/concepts/","tags":"","title":"Concepts"},{"body":"When using the app ssl feature for non-production applications or when installing SSL for the platform, you can avoid the costs associated with the SSL certificate by using a self-signed SSL certificate. Though the certificate implements full encryption, visitors to your site will see a browser warning indicating that the certificate should not be trusted.\nPrerequisites The openssl library is required to generate your own certificate. Run the following command in your local environment to see if you already have openssl installed.\n$ which openssl /usr/bin/openssl If the which command does not return a path then you will need to install openssl yourself:\nIf you have… Install with… Mac OS X Homebrew: brew install openssl Windows complete package .exe installed Ubuntu Linux apt-get install openssl Generate Private Key and Certificate Signing Request A private key and certificate signing request are required to create an SSL certificate. These can be generated with a few simple commands. When the openssl req command asks for a “challenge password”, just press return, leaving the password empty.\n$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048 ... $ openssl rsa -passin pass:x -in server.pass.key -out server.key writing RSA key $ rm server.pass.key $ openssl req -new -key server.key -out server.csr ... Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:California ... A challenge password []: ... Generate SSL Certificate The self-signed SSL certificate is generated from the server.key private key and server.csr files.\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt The server.crt file is your site certificate suitable for use with Drycc’s SSL endpoint along with the server.key private key.\n","categories":"","description":"A self-signed TLS/SSL certificate is not signed by a publicly trusted certificate authority (CA) but instead by the developer or company that is responsible for the website.","excerpt":"A self-signed TLS/SSL certificate is not signed by a publicly trusted …","ref":"/docs/reference-guide/creating-a-self-signed-ssl-certificate/","tags":"","title":"Creating a Self-Signed SSL Certificate"},{"body":"An Application is deployed to Drycc using git push or the drycc client.\nSupported Applications Drycc Workflow can deploy any application or service that can run inside a container. In order to be scaled horizontally, applications must follow the Twelve-Factor App methodology and store any application state in external backing services.\nFor example, if your application persists state to the local filesystem – common with content management systems like Wordpress and Drupal – it cannot be scaled horizontally using drycc scale.\nFortunately, most modern applications feature a stateless application tier that can scale horizontally inside Drycc.\nLogin to the Controller !!! important if you haven’t yet, now is a good time to install the client and register.\nBefore deploying an application, users must first authenticate against the Drycc Controller using the URL supplied by their Drycc administrator.\n$ drycc login http://drycc.example.com Opening browser to http://drycc.example.com/v2/login/drycc/?key=4ccc81ee2dce4349ad5261ceffe72c71 Waiting for login... .o.Logged in as admin Configuration file written to /root/.drycc/client.json Or you can login with username and password\n$ drycc login http://drycc.example.com --username=demo --password=demo Configuration file written to /root/.drycc/client.json Select a Build Process Drycc Workflow supports three different ways of building applications:\nBuildpacks Cloud Native Buildpacks are useful if you want to follow cnb’s docs for building applications.\nLearn how to deploy applications using Buildpacks.\nDockerfiles Dockerfiles are a powerful way to define a portable execution environment built on a base OS of your choosing.\nLearn how to deploy applications using Dockerfiles.\nContainer Image Deploying a Container image onto Drycc allows you to take a Container image from either a public or a private registry and copy it over bit-for-bit, ensuring that you are running the same image in development or in your CI pipeline as you are in production.\nLearn how to deploy applications using Container images.\nTuning Application Settings It is possible to configure a few of the globally tunable settings on per application basis using config:set.\nSetting Description DRYCC_DISABLE_CACHE if set, this will disable the [imagebuilder cache][] (default: not set) DRYCC_DEPLOY_BATCHES the number of pods to bring up and take down sequentially during a scale (default: number of available nodes) DRYCC_DEPLOY_TIMEOUT deploy timeout in seconds per deploy batch (default: 120) IMAGE_PULL_POLICY the kubernetes [image pull policy][pull-policy] for application images (default: “IfNotPresent”) (allowed values: “Always”, “IfNotPresent”) KUBERNETES_DEPLOYMENTS_REVISION_HISTORY_LIMIT how many revisions Kubernetes keeps around of a given Deployment (default: all revisions) KUBERNETES_POD_TERMINATION_GRACE_PERIOD_SECONDS how many seconds kubernetes waits for a pod to finish work after a SIGTERM before sending SIGKILL (default: 30) Deploy Timeout Deploy timeout in seconds - There are 2 deploy methods, Deployments (see below) and RC (versions prior to 2.4) and this setting affects those a bit differently.\nDeployments Deployments behave a little bit differently from the RC based deployment strategy.\nKubernetes takes care of the entire deploy, doing rolling updates in the background. As a result, there is only an overall deployment timeout instead of a configurable per-batch timeout.\nThe base timeout is multiplied with DRYCC_DEPLOY_BATCHES to create an overall timeout. This would be 240 (timeout) * 4 (batches) = 960 second overall timeout.\nRC deploy This deploy timeout defines how long to wait for each batch to complete in DRYCC_DEPLOY_BATCHES.\nAdditions to the base timeout The base timeout is extended as well with healthchecks using initialDelaySeconds on liveness and readiness where the bigger of those two is applied. Additionally the timeout system accounts for slow image pulls by adding an additional 10 minutes when it has seen an image pull take over 1 minute. This allows the timeout values to be reasonable without having to account for image pull slowness in the base deploy timeout.\nDeployments Workflow uses Deployments for deploys. In prior versions ReplicationControllers were used with the ability to turn on Deployments via DRYCC_KUBERNETES_DEPLOYMENTS=1.\nThe advantage of Deployments is that rolling-updates will happen server-side in Kubernetes instead of in Drycc Workflow Controller, along with a few other Pod management related functionality. This allows a deploy to continue even when the CLI connection is interrupted.\nBehind the scenes your application deploy will be built up of a Deployment object per process type, each having multiple ReplicaSets (one per release) which in turn manage the Pods running your application.\nDrycc Workflow will behave the same way with DRYCC_KUBERNETES_DEPLOYMENTS enabled or disabled (only applicable to versions prior to 2.4). The changes are behind the scenes. Where you will see differences while using the CLI is drycc ps:list will output Pod names differently.\n","categories":"","description":"Learn how to deploy the application to drycc.","excerpt":"Learn how to deploy the application to drycc.","ref":"/docs/applications/deploying-apps/","tags":"","title":"Deploying an Application"},{"body":"Get started with Drycc Workflow in three easy steps.\nInstall CLI tools for Helm and Drycc Workflow Boot a Kubernetes and install Drycc Workflow Deploy your first application This guide will help you set up a cluster suitable for evaluation, development and testing. When you are ready for staging and production, view our production checklist.\nStep 1: Install Workflow For the quickstart we will install Drycc Workflow.\nStep 2: Install CLI tools For the quickstart we will install Drycc Workflow CLI.\nStep 3: Deploy your first app Last but not least, login and deploy your first application.\n","categories":"","description":"This guide helps you set up the Drycc workflow.","excerpt":"This guide helps you set up the Drycc workflow.","ref":"/docs/quickstart/overview/","tags":"","title":"Quick Start"},{"body":"File Bugs \u0026 Enhancements Find a bug? Want to see a new feature? Have a request for the maintainers? Open a Github issue in the applicable repository and we’ll get the conversation started.\nOur official support channel is the Drycc #community Slack channel.\nDon’t know what the applicable repository for an issue is? Open up in issue in workflow or chat with a maintainer in the Drycc #community Slack channel and we’ll make sure it gets to the right place.\nAdditionally, take a look at the troubleshooting documentation for common issues.\nBefore opening a new issue, it’s helpful to search and see if anyone else has already reported the problem. You can search through a list of issues for all Drycc projects here.\nWrite Documentation We are always looking to improve and expand our documentation. Most docs reside in the drycc/workflow repository. Simply fork the project, update docs and send us a pull request.\nContribute Code We are always looking for help improving the core platform, other workloads, tooling, and test coverage. Interested in contributing code? Let’s chat in the Drycc #community Slack channel. Make sure to check out issues tagged easy fix or help wanted.\nWhen you’re ready to begin writing code, review Design Documents and get your Development Environment set up.\nBy contributing to any Drycc project you agree to its Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.\nTriage Issues If you don’t have time to code, consider helping with triage. The community will thank you for saving them time by spending some of yours. See Triaging Issues for more info.\nShare your Experience Interact with the community on our user mailing list or live in our Drycc #community Slack channel, where you can chat with other Drycc Workflow users any time of day.\n","categories":"","description":"Interested in contributing to a Drycc project?  There are lots of ways to help.","excerpt":"Interested in contributing to a Drycc project?  There are lots of ways …","ref":"/docs/contribution-guidelines/overview/","tags":"","title":"Contributor Overview"},{"body":"The Role of Maintainers Maintainers lead the Drycc projects. Their duties include proposing the Roadmap, reviewing and integrating contributions and maintaining the vision of the project.\nOpen Roadmap The Drycc Roadmap is a community document. While Maintainers propose the Roadmap, it gets discussed and refined in Release Planning Meetings.\nContributing to the Roadmap Proposals and issues can be opened by anyone. Every member of the community is welcome to participate in the discussion by providing feedback and/or offering counter-proposals.\nRelease Milestones The Roadmap gets delivered progressively via the Release Schedule. Releases are defined during Release Planning Meetings and managed using GitHub Milestones which track specific deliverables and work-in-progress.\nRelease Planning Meetings Major decisions affecting the Roadmap are discussed during Release Planning Meetings on the first Thursday of each month, aligned with the Release Schedule.\nRelease Planning Meetings are open to the public with access coordinated via the Drycc #community Slack channel. Notes from past meetings are below, along with links to a recording of the entire meeting on YouTube.\nCredits Thanks to Amy Lindburg and our friends at Podman for their inspiration.\n","categories":"","description":"Drycc features a lightweight process that emphasizes openness and ensures every community member can be an integral part of planning for the future.","excerpt":"Drycc features a lightweight process that emphasizes openness and …","ref":"/docs/roadmap/planning-process/","tags":"","title":"Planning Process"},{"body":"","categories":"","description":"Step-by-step guides for deploying your first app and mastering the basics of Drycc.\n","excerpt":"Step-by-step guides for deploying your first app and mastering the …","ref":"/docs/quickstart/","tags":"","title":"Quick Start"},{"body":"Kubernetes Versions Drycc Workflow requires Kubernetes v1.16.15 or later.\nComponents Requirements Drycc uses gateway as a routing implementation, so you have to choose an gateway. We recommend using istio or kong.\nWorkflow supports the use of ACME to manage automatic certificates, cert-manager is also one of the necessary components, if you use cert-manager EAB, you need to set the clusterResourceNamespace to the namespace of drycc.\nWorkflow supports stateful apps. You can create and use them through the ‘drycc volumes’ command. If you want to use this feature, you must have a StorageClass that supports ReadWriteMany.\nWorkflow also supports the OSB API through the ‘drycc resources’ command. If you want to use this function, you need to install service-catalog.\nStorage Requirements A variety of Drycc Workflow components rely on an object storage system to do their work, including storing application slugs, Container images and database logs.\nDrycc Workflow ships with drycc storage by default, which provides in-cluster.\nWorkflow supports Amazon Simple Storage Service (S3), Google Cloud Storage (GCS), OpenShift Swift, and Azure Blob Storage. See configuring object storage for setup instructions.\nResource Requirements When deploying Drycc Workflow, it’s important to provision machines with adequate resources. Drycc is a highly-available distributed system, which means that Drycc components and your deployed applications will move around the cluster onto healthy hosts as hosts leave the cluster for various reasons (failures, reboots, autoscalers, etc.). Because of this, you should have ample spare resources on any machine in your cluster to withstand the additional load of running services for failed machines.\nDrycc Workflow components use about 2.5GB of memory across the cluster, and require approximately 30GB of hard disk space. Because it may need to handle additional load if another one fails, each machine has minimum requirements of:\nAt least 4GB of RAM (more is better) At least 40GB of hard disk space Note that these estimates are for Drycc Workflow and Kubernetes only. Be sure to leave enough spare capacity for your application footprint as well.\nRunning smaller machines will likely result in increased system load and has been known to result in component failures and instability.\n","categories":"","description":"To run Drycc Workflow on a Kubernetes cluster, there are a few requirements to keep in mind.","excerpt":"To run Drycc Workflow on a Kubernetes cluster, there are a few …","ref":"/docs/installing-workflow/system-requirements/","tags":"","title":"Requirements"},{"body":"A Component Fails to Start For information on troubleshooting a failing component, see Troubleshooting with Kubectl.\nAn Application Fails to Start For information on troubleshooting application deployment issues, see Troubleshooting Applications.\nPermission denied (publickey) The most common problem for this issue is the user forgetting to run drycc keys:add or add their private key to their SSH agent. To do so, run ssh-add ~/.ssh/id_rsa and try running git push drycc master again.\nIf you happen get a Could not open a connection to your authentication agent error after trying to run ssh-add command above, you may need to load the SSH agent environment variables issuing the eval \"$(ssh-agent)\" command before.\nOther Issues Running into something not detailed here? Please open an issue or hop into #community on Slack for help!\n","categories":"","description":"Common issues that users have run into when provisioning Workflow are detailed below.","excerpt":"Common issues that users have run into when provisioning Workflow are …","ref":"/docs/troubleshooting/workflow/","tags":"","title":"Troubleshooting Workflow"},{"body":"After you add the Drycc Chart Repository, you can customize the chart using helm inspect values drycc/workflow \u003e values.yaml before using helm install to complete the installation.\nThere are a few ways to customize the respective component:\nIf the value is exposed in the values.yaml file as derived above, one may modify the section of the component to tune these settings. The modified value(s) will then take effect at chart installation or release upgrade time via either of the two respective commands:\n$ helm install drycc oci://registry.drycc.cc/charts/workflow \\ -n drycc \\ --namespace drycc \\ -f values.yaml $ helm upgrade drycc oci://registry.drycc.cc/charts/workflow \\ -n drycc \\ --namespace drycc \\ -f values.yaml If the value hasn’t yet been exposed in the values.yaml file, one may edit the component deployment with the tuned setting. Here we edit the drycc-controller deployment:\n$ kubectl --namespace drycc edit deployment drycc-controller Add/edit the setting via the appropriate environment variable and value under the env section and save. The updated deployment will recreate the component pod with the new/modified setting.\nLastly, one may also fetch and edit the chart as served by version control/the chart repository itself:\n$ helm fetch oci://registry.drycc.cc/charts/workflow --untar $ $EDITOR workflow/charts/controller/templates/controller-deployment.yaml Then run helm install ./workflow --namespace drycc --name drycc to apply the changes, or helm upgrade drycc ./workflow if the cluster is already running.\nSetting Resource limits You can set resource limits to Workflow components by modifying the values.yaml file fetched earlier. This file has a section for each Workflow component. To set a limit to any Workflow component just add resources in the section and set them to the appropriate values.\nBelow is an example of how the builder section of values.yaml might look with CPU and memory limits set:\nbuilder: imageOrg: \"drycc\" imagePullPolicy: \"Always\" imageTag: \"canary\" resources: limits: cpu: 1000m memory: 2048Mi requests: cpu: 500m memory: 1024Mi Customizing the Builder The following environment variables are tunable for the Builder component:\nSetting Description DEBUG Enable debug log output (default: false) BUILDER_POD_NODE_SELECTOR A node selector setting for builder job. As it may sometimes consume a lot of node resources, one may want a given builder job to run in a specific node only, so it won’t affect critical nodes. for example pool:testing,disk:magnetic Customizing the Controller The following environment variables are tunable for the Controller component:\nSetting Description REGISTRATION_MODE set registration to “enabled”, “disabled”, or “admin_only” (default: “admin_only”) GUNICORN_WORKERS number of gunicorn workers spawned to process requests (default: CPU cores * 4 + 1) RESERVED_NAMES a comma-separated list of names which applications cannot reserve for routing (default: “drycc, drycc-builder”) DRYCC_DEPLOY_HOOK_URLS a comma-separated list of URLs to send deploy hooks to. DRYCC_DEPLOY_HOOK_SECRET_KEY a private key used to compute the HMAC signature for deploy hooks. DRYCC_DEPLOY_REJECT_IF_PROCFILE_MISSING rejects a deploy if the previous build had a Procfile but the current deploy is missing it. A 409 is thrown in the API. Prevents accidental process types removal. (default: “false”, allowed values: “true”, “false”) DRYCC_DEPLOY_PROCFILE_MISSING_REMOVE when turned on (default) any missing process type in a Procfile compared to the previous deploy is removed. When set to false will allow an empty Procfile to go through without removing missing process types, note that new images, configs and so on will get updated on all proc types. (default: “true”, allowed values: “true”, “false”) DRYCC_DEFAULT_CONFIG_TAGS set tags for all applications by default, for example: ‘{“role”: “worker”}’. (default: ‘’) KUBERNETES_NAMESPACE_DEFAULT_QUOTA_SPEC set resource quota to application namespace by setting ResourceQuota spec, for example: {\"spec\":{\"hard\":{\"pods\":\"10\"}}}, restrict app owner to spawn more then 10 pods (default: “”, no quota will be applied to namespace) LDAP authentication settings Configuration options for LDAP authentication are detailed here.\nThe following environment variables are available for enabling LDAP authentication of user accounts in the Passport component:\nSetting Description LDAP_ENDPOINT The URI of the LDAP server. If not specified, LDAP authentication is not enabled (default: “”, example: ldap://hostname). LDAP_BIND_DN The distinguished name to use when binding to the LDAP server (default: “”) LDAP_BIND_PASSWORD The password to use with LDAP_BIND_DN (default: “”) LDAP_USER_BASEDN The distinguished name of the search base for user names (default: “”) LDAP_USER_FILTER The name of the login field in the users search base (default: “username”) LDAP_GROUP_BASEDN The distinguished name of the search base for user’s groups names (default: “”) LDAP_GROUP_FILTER The filter for user’s groups (default: “”, example: objectClass=person) Global and per application settings Setting Description DRYCC_DEPLOY_BATCHES the number of pods to bring up and take down sequentially during a scale (default: number of available nodes) DRYCC_DEPLOY_TIMEOUT deploy timeout in seconds per deploy batch (default: 120) IMAGE_PULL_POLICY the kubernetes image pull policy for application images (default: “IfNotPresent”) (allowed values: “Always”, “IfNotPresent”) KUBERNETES_DEPLOYMENTS_REVISION_HISTORY_LIMIT how many revisions Kubernetes keeps around of a given Deployment (default: all revisions) KUBERNETES_POD_TERMINATION_GRACE_PERIOD_SECONDS how many seconds kubernetes waits for a pod to finish work after a SIGTERM before sending SIGKILL (default: 30) See the Deploying Apps guide for more detailed information on those.\nCustomizing the Database The following environment variables are tunable for the Database component:\nSetting Description BACKUP_FREQUENCY how often the database should perform a base backup (default: “12h”) BACKUPS_TO_RETAIN number of base backups the backing store should retain (default: 5) Customizing Fluentbit The following values can be changed in the values.yaml file or by using the --values flag with the Helm CLI.\nKey Description config.service The service section defines the global properties of the service. config.inputs An input section defines a source (related to an input plugin). config.filters A filter section defines a filter (related to a filter plugin) config.outputs The outputs section specify a destination that certain records should follow after a Tag match. For more information about the various variables that can be set please see the fluentbit.\nCustomizing the Monitor Grafana We have exposed some of the more useful configuration values directly in the chart. This allows them to be set using either the values.yaml file or by using the --set flag with the Helm CLI. You can see these options below:\nSetting Default Value Description user “admin” The first user created in the database (this user has admin privileges) password “admin” Password for the first user. allow_sign_up “true” Allows users to sign up for an account. For a list of other options you can set by using environment variables please see the configuration file in Github.\nVictoriametrics You can find a list of values that can be set using environment variables here.\nCustomizing the Registry The Registry component can be tuned by following the drycc/distribution config doc.\nCustomizing the Router The majority of router settings are tunable through annotations, which allows the router to be re-configured with zero downtime post-installation. You can find the list of annotations to tune here.\nThe following environment variables are tunable for the [Router][] component:\nSetting Description POD_NAMESPACE The pod namespace the router resides in. This is set by the Kubernetes downward API. Customizing Workflow Manager The following environment variables are tunable for [Workflow Manager][]:\nSetting Description CHECK_VERSIONS Enables the external version check at https://versions.drycc.info/ (default: “true”) POLL_INTERVAL_SEC The interval when Workflow Manager performs a version check, in seconds (default: 43200, or 12 hours) VERSIONS_API_URL The versions API URL (default: “https://versions-staging.drycc.info”) DOCTOR_API_URL The doctor API URL (default: “https://doctor-staging.drycc.info”) API_VERSION The version number Workflow Manager sends to the versions API (default: “v2”) ","categories":"","description":"Helm Charts are a set of Kubernetes manifests that reflect best practices for deploying an application or service on Kubernetes.","excerpt":"Helm Charts are a set of Kubernetes manifests that reflect best …","ref":"/docs/managing-workflow/tuning-component-settings/","tags":"","title":"Tuning Component Settings"},{"body":"All components are published as a set of container images which can be deployed to any compliant Kubernetes cluster.\nOverview Operators use Helm to configure and install the Workflow components which interface directly with the underlying Kubernetes cluster. Service discovery, container availability and networking are all delegated to Kubernetes, while Workflow provides a clean and simple developer experience.\nPlatform Services Drycc Workflow provides additional functionality to your Kubernetes cluster, including:\nSource to Image Builder which compiles your Application code via Buildpacks or Dockerfiles Simple REST API which powers the CLI and any external integrations Application release and rollback Authentication and Authorization to Application resources Kubernetes-Native All platform components and applications deployed via Workflow expect to be running on an existing Kubernetes cluster. This means that you can happily run your Kubernetes-native workloads next to applications that are managed through Drycc Workflow.\nApplication Layout and Edge Routing By default Workflow creates per-application Namespaces and Services so you can easily connect your applications to other on-cluster services through standard Kubernetes mechanisms.\nThe router component is responsible for routing HTTP/s traffic to your Applications as well as proxying git push and platform API traffic.\nBy default, the router component is deployed as a Kubernetes service with type LoadBalancer; which, depending on your configuration, will provision a cloud-native load balancer automatically.\nThe router automatically discovers routable Applications, SSL/TLS certificates and application-specific configurations through the use of Kubernetes annotations. Any changes to router configuration or certificates are applied within seconds.\nTopologies Drycc Workflow no longer dictates a specific topology or server count for your deployment. The platform components will happily run on single-server configurations as well as multi-server production clusters.\n","categories":"","description":"Drycc Workflow is built using a service oriented architecture.","excerpt":"Drycc Workflow is built using a service oriented architecture.","ref":"/docs/understanding-workflow/architecture/","tags":"","title":"Architecture"},{"body":"Drycc supports deploying applications via Cloud Native Buildpacks. Cloud Native Buildpacks are useful if you want to follow cnb’s docs for building applications.\nAdd SSH Key For Buildpack based application deploys via git push, Drycc Workflow identifies users via SSH keys. SSH keys are pushed to the platform and must be unique to each user.\nSee this document for instructions on how to generate an SSH key.\nRun drycc keys add to upload your SSH key to Drycc Workflow.\n$ drycc keys add ~/.ssh/id_drycc.pub Uploading id_drycc.pub to drycc... done Read more about adding/removing SSH Keys here.\nPrepare an Application If you do not have an existing application, you can clone an example application that demonstrates the Heroku Buildpack workflow.\n$ git clone https://github.com/drycc/example-go.git $ cd example-go Create an Application Use drycc create to create an application on the Controller.\n$ drycc create Creating application... done, created skiing-keypunch Git remote drycc added Push to Deploy Use git push drycc master to deploy your application.\n$ git push drycc master Counting objects: 75, done. Delta compression using up to 8 threads. Compressing objects: 100% (48/48), done. Writing objects: 100% (75/75), 18.28 KiB | 0 bytes/s, done. Total 75 (delta 30), reused 58 (delta 22) remote: ---\u003e Starting build... but first, coffee! ---\u003e Waiting podman running. ---\u003e Process podman started. ---\u003e Waiting caddy running. ---\u003e Process caddy started. ---\u003e Building pack ---\u003e Using builder registry.drycc.cc/drycc/buildpacks:bookworm Builder 'registry.drycc.cc/drycc/buildpacks:bookworm' is trusted Pulling image 'registry.drycc.cc/drycc/buildpacks:bookworm' Resolving \"drycc/buildpacks\" using unqualified-search registries (/etc/containers/registries.conf) Trying to pull registry.drycc.cc/drycc/buildpacks:bookworm... Getting image source signatures ... ---\u003e Skip generate base layer ---\u003e Python Buildpack ---\u003e Downloading and extracting Python 3.10.0 ---\u003e Installing requirements with pip Collecting Django==3.2.8 Downloading Django-3.2.8-py3-none-any.whl (7.9 MB) Collecting gunicorn==20.1.0 Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB) Collecting sqlparse\u003e=0.2.2 Downloading sqlparse-0.4.2-py3-none-any.whl (42 kB) Collecting pytz Downloading pytz-2021.3-py2.py3-none-any.whl (503 kB) Collecting asgiref\u003c4,\u003e=3.3.2 Downloading asgiref-3.4.1-py3-none-any.whl (25 kB) Requirement already satisfied: setuptools\u003e=3.0 in /layers/drycc_python/python/lib/python3.10/site-packages (from gunicorn==20.1.0-\u003e-r requirements.txt (line 2)) (57.5.0) Installing collected packages: sqlparse, pytz, asgiref, gunicorn, Django Successfully installed Django-3.2.8 asgiref-3.4.1 gunicorn-20.1.0 pytz-2021.3 sqlparse-0.4.2 ---\u003e Generate Launcher ... Build complete. Launching App... ... Done, skiing-keypunch:v2 deployed to Workflow Use 'drycc open' to view this application in your browser To learn more, use 'drycc help' or visit https://www.drycc.cc To ssh://git@drycc.staging-2.drycc.cc:2222/skiing-keypunch.git * [new branch] master -\u003e master $ curl -s http://skiing-keypunch.example.com Powered by Drycc Release v2 on skiing-keypunch-v2-web-02zb9 Because a Buildpacks-style application is detected, the web process type is automatically scaled to 1 on first deploy.\nUse drycc scale web=3 to increase web processes to 3, for example. Scaling a process type directly changes the number of pods running that process.\nIncluded Buildpacks For convenience, a number of buildpacks come bundled with Drycc:\nGo Buildpack Java Buildpack Nodejs Buildpack PHP Buildpack Python Buildpack Ruby Buildpack Rust Buildpack Drycc will cycle through the bin/detect script of each buildpack to match the code you are pushing.\n!!! note If you’re testing against the [Scala Buildpack][], the Builder requires at least 512MB of free memory to execute the Scala Build Tool.\nUsing a Custom Buildpack To use a custom buildpack, you need create a .pack_builder file in your root path app.\n$ tee \u003e .pack-builder \u003c\u003c EOF \u003e registry.drycc.cc/drycc/buildpacks:bookworm \u003e EOF On your next git push, the custom buildpack will be used.\nUsing Private Repositories To pull code from private repositories, set the SSH_KEY environment variable to a private key which has access. Use either the path of a private key file or the raw key material:\n$ drycc config set SSH_KEY=/home/user/.ssh/id_rsa $ drycc config set SSH_KEY=\"\"\"-----BEGIN RSA PRIVATE KEY----- (...) -----END RSA PRIVATE KEY-----\"\"\" For example, to use a custom buildpack hosted at a private GitHub URL, ensure that an SSH public key exists in your GitHub settings. Then set SSH_KEY to the corresponding SSH private key and set .pack_builder to the builder image:\n$ tee \u003e .pack-builder \u003c\u003c EOF \u003e registry.drycc.cc/drycc/buildpacks:bookworm \u003e EOF $ git add .buildpack $ git commit -m \"chore(buildpack): modify the pack_builder\" $ git push drycc master Builder selector Which way to build a project conforms to the following principles:\nIf Dockerfile exists in the project, the stack uses container If Procfile exists in the project, the stack uses buildpack If both exist, container is used by default You can also set the DRYCC_STACK to container or buildpack determine which stack to use. ","categories":"","description":"An overview of buildpacks, which are responsible for transforming deployed code into a slug, which can then be executed on a container.","excerpt":"An overview of buildpacks, which are responsible for transforming …","ref":"/docs/applications/using-buildpacks/","tags":"","title":"Using Buildpacks"},{"body":"For example, assuming example.com were a cluster’s domain:\nThe controller should be accessible at drycc.example.com Applications should be accessible (by default) at \u003capplication name\u003e.example.com Given that this is the case, the primary objective in configuring DNS is that traffic for all subdomains of a cluster’s domain be directed to the cluster node(s) hosting the platform’s router component, which is capable of directing traffic within the cluster to the correct endpoints.\nWith a Load Balancer Generally, it is recommended that a [load balancer][] be used to direct inbound traffic to one or more routers. In such a case, configuring DNS is as simple as defining a wildcard record in DNS that points to the load balancer.\nFor example, assuming a domain of example.com:\nAn A record enumerating each of your load balancer(s) IPs (i.e. DNS round-robining) A CNAME record referencing an existing fully-qualified domain name for the load balancer Per AWS’ own documentation, this is the recommended strategy when using AWS Elastic Load Balancers, as ELB IPs may change over time. DNS for any applications using a “custom domain” (a fully-qualified domain name that is not a subdomain of the cluster’s own domain) can be configured by creating a CNAME record that references the wildcard record described above.\nAlthough it is dependent upon your distribution of Kubernetes and your underlying infrastructure, in many cases, the IP(s) or existing fully-qualified domain name of a load balancer can be determined directly using the kubectl tool:\n$ kubectl --namespace=istio-nginx describe service | grep \"LoadBalancer\" LoadBalancer Ingress:\ta493e4e58ea0511e5bb390686bc85da3-1558404688.us-west-2.elb.amazonaws.com The LoadBalancer Ingress field typically describes an existing domain name or public IP(s). Note that if Kubernetes is able to automatically provision a load balancer for you, it does so asynchronously. If the command shown above is issued very soon after Workflow installation, the load balancer may not exist yet.\nWithout a Load Balancer On some platforms (Minikube, for instance), a load balancer is not an easy or practical thing to provision. In these cases, one can directly identify the public IP of a Kubernetes node that is hosting a router pod and use that information to configure the local /etc/hosts file.\nBecause wildcard entries do not work in a local /etc/hosts file, using this strategy may result in frequent editing of that file to add fully-qualified subdomains of a cluster for each application added to that cluster. Because of this a more viable option may be to utilize the xip.io service.\nIn general, for any IP, a.b.c.d, the fully-qualified domain name any-subdomain.a.b.c.d.xip.io will resolve to the IP a.b.c.d. This can be enormously useful.\nTo begin, find the node(s) hosting router instances using kubectl:\n$ kubectl --namespace=istio-ingress describe pod | grep Node: Node: ip-10-0-0-199.us-west-2.compute.internal/10.0.0.199 Node: ip-10-0-0-198.us-west-2.compute.internal/10.0.0.198 The command will display information for every router pod. For each, a node name and IP are displayed in the Node field. If the IPs appearing in these fields are public, any of these may be used to configure your local /etc/hosts file or may be used with xip.io. If the IPs shown are not public, further investigation may be needed.\nYou can list the IP addresses of a node using kubectl:\n$ kubectl describe node ip-10-0-0-199.us-west-2.compute.internal # ... Addresses:\t10.0.0.199,10.0.0.199,54.218.85.175 # ... Here, the Addresses field lists all the node’s IPs. If any of them are public, again, they may be used to configure your local /etc/hosts file or may be used with xip.io.\nTutorial: Configuring DNS with Google Cloud DNS In this section, we’ll describe how to configure Google Cloud DNS for routing your domain name to your Drycc cluster.\nWe’ll assume the following in this section:\nYour Ingress service has a load balancer in front of it. The load balancer need not be cloud based, it just needs to provide a stable IP address or a stable domain name You have the mystuff.com domain name registered with a registrar Replace your domain name with mystuff.com in the instructions to follow Your registrar lets you alter the nameservers for your domain name (most registrars do) Here are the steps for configuring cloud DNS to route to your drycc cluster:\nGet the load balancer IP or domain name If you are on Google Container Engine, you can run kubectl get svc -n istio-ingress and look for the LoadBalancer Ingress column to get the IP address Create a new Cloud DNS Zone (on the console: Networking =\u003e Cloud DNS, then click on Create Zone) Name your zone, and set the DNS name to mystuff.com. (note the . at the end Click on the Create button Click on the Add Record Set button on the resulting page If your load balancer provides a stable IP address, enter the following fields in the resulting form: DNS Name: * Resource Record Type: A TTL: the DNS TTL of your choosing. If you’re testing or you anticipate that you’ll tear down and rebuild many drycc clusters over time, we recommend a low TTL IPv4 Address: The IP that you got in the very first step Click the Create button If your load balancer provides the stable domain name lbdomain.com, enter the following fields in the resulting form: DNS Name: * Resource Record Type: CNAME TTL: the DNS TTL of your choosing. If you’re testing or you anticipate that you’ll tear down and rebuild many drycc clusters over time, we recommend a low TTL Canonical name: lbdomain.com. (note the . a the end) Click on the Create button In your domain registrar, set the nameservers for your mystuff.com domain to the ones under the data column in the NS record on the same page. They’ll often be something like the below (note the trailing . characters). ns-cloud-b1.googledomains.com. ns-cloud-b2.googledomains.com. ns-cloud-b3.googledomains.com. ns-cloud-b4.googledomains.com. Note: If you ever have to re-create your drycc cluster, simply go back to step 6.4 or 7.4 (depending on your load balancer) and change the IP address or domain name to the new value. You may have to wait for the TTL you set to expire.\nTesting To test that traffic reaches its intended destination, a request can be sent to the Drycc controller like so (do not forget the trailing slash!):\ncurl http://drycc.example.com/v2/ Or:\ncurl http://drycc.54.218.85.175.xip.io/v2/ Since such requests require authentication, a response such as the following should be considered an indicator of success:\n{\"detail\":\"Authentication credentials were not provided.\"} ","categories":"","description":"The Drycc Workflow controller and all applications deployed via Workflow are intended (by default) to be accessible as subdomains of the Workflow cluster's domain.","excerpt":"The Drycc Workflow controller and all applications deployed via …","ref":"/docs/managing-workflow/configuring-dns/","tags":"","title":"Configure DNS"},{"body":"Before submitting a pull request which will significantly alter the behavior of any Drycc component, such as a new feature or major refactoring, contributors should first open an issue representing a design document.\nGoals Design documents help ensure project contributors:\nInvolve stakeholders as early as possible in a feature’s development Ensure code changes accomplish the original motivations and design goals Establish clear acceptance criteria for a feature or change Enforce test-driven design methodology and automated test coverage Contents Design document issues should be named Design Doc: \u003cchange description\u003e and contain the following sections:\nGoal This section should briefly describe the proposed change and the motivations behind it. Tests will be written to ensure this design goal is met by the change.\nThis section should also reference a separate GitHub issue tracking the feature or change, which will typically be assigned to a release milestone.\nCode Changes This section should detail the code changes necessary to accomplish the change, as well as the proposed implementation. This should be as detailed as necessary to help reviewers understand the change.\nTests All changes should be covered by automated tests, either unit or integration tests (ideally both). This section should detail how tests will be written to validate that the change accomplishes the design goals and doesn’t introduce any regressions.\nIf a change cannot be sufficiently covered by automated testing, the design should be reconsidered. If there is no test coverage whatsoever for an affected section of code, a separate issue should be filed to integrate automated testing with that section of the codebase.\nThe tests described here also form the acceptance criteria for the change, so that when it’s completed maintainers can merge the pull request after confirming the tests pass CI.\nApproval A design document follows the same merge approval review process as final pull requests do, and maintainers will take extra care to ensure that any stakeholders for the change are included in the discussion and review of the design document.\nOnce the design is accepted, the author can complete the change and submit a pull request for review. The pull request should close both the design document for the change as well as any issues that either track the issue or are closed as a result of the change.\nSee Submitting a Pull Request for more information on pull request and commit message formatting.\n","categories":"","description":"Before submitting a pull request which will significantly alter the behavior of any Drycc component.","excerpt":"Before submitting a pull request which will significantly alter the …","ref":"/docs/contribution-guidelines/design-documents/","tags":"","title":"Design Documents"},{"body":"If you have a pure host, it can be a cloud server, bare metal server, virtual machine, or even your laptop. Then this chapter is very suitable for you.\nOperating Systems Drycc is expected to work on most modern Linux systems. Some OSS have specific requirements:\n(Red Hat/CentOS) Enterprise Linux, they usually use RPM package management. Ubuntu (Desktop/Server/Cloud) Linux, a very popular distribution. Debian GNU Linux, a very pure distribution of opensource software. If you want to add more Linux distribution support, please submit a issue on github or submit PR directly.\nSystem Software Some basic software needs to be installed before installing drycc workflow.\nOS configuration K8s requires a large number of ports. If you are not sure what they are, please close the local firewall or open these ports. At the same time, because k8s you need system time, you need to ensure that the system time is correct.\nInstalling NFSv4 client The command used to install a NFSv4 client differs depending on the Linux distribution.\nFor Debian and Ubuntu, use this command:\n$ apt-get install nfs-common For RHEL, CentOS, and EKS with EKS Kubernetes Worker AMI with AmazonLinux2 image, use this command:\n$ yum install nfs-utils Installing curl For Debian and Ubuntu, use this command:\n$ apt-get install curl For RHEL, CentOS, and EKS with EKS Kubernetes Worker AMI with AmazonLinux2 image, use this command:\n$ yum install curl Hardware Hardware requirements scale based on the size of your deployments. Minimum recommendations are outlined here.\nRAM: 1G Minimum (we recommend at least 2GB) CPU: 1 Minimum This configuration only contains the minimum requirements that can meet the operation.\nDisk Drycc performance depends on the performance of the database. To ensure optimal speed, we recommend using an SSD when possible. Disk performance will vary on ARM devices utilizing an SD card or eMMC.\nDomain Name Drycc needs a root domain name under your full control and points this domain name to the server to be installed. Suppose there is a wildcard domain pointing to the current server to install drycc, which is the name *.dryccdoman.com. We need to set the PLATFORM_DOMAIN environment variables before installation.\n$ export PLATFORM_DOMAIN=dryccdoman.co Of course, if it is a test environment, we can also use nip.io, an IP to domain name service. For example, your host IP is 59.46.3.190, we will get the following domain name 59.46.3.190.nip.io\n$ export PLATFORM_DOMAIN=59.46.3.190.nip.io Install Before installation, please make sure whether your installation environment is a public network. If it is an intranet environment and there is no public IP, you need to disable the automatic certificate.\n$ export CERT_MANAGER_ENABLED=false Then you can use the installation script available at https://www.drycc.cc/install.sh to install drycc as a service on systemd and openrc based systems.\n$ curl -sfL https://www.drycc.cc/install.sh | bash - !!! important If you are in China, you need to use mirror acceleration:\n``` $ curl -sfL https://www.drycc.cc/install.sh | INSTALL_DRYCC_MIRROR=cn bash - ``` Install Node Node can be a simple agent or a server; Server has the function of agent. Multiple servers have high availability, but the number of servers should not exceed 7 at most. There is no limit to the number of agents.\nFirst, check the cluster token of the master. $ cat /var/lib/rancher/k3s/server/node-token K1078e7213ca32bdaabb44536f14b9ce7926bb201f41c3f3edd39975c16ff4901ea::server:33bde27f-ac49-4483-b6ac-f4eec2c6dbfa We assume that the IP address of the cluster master is 192.168.6.240, in that way.\nThen, Set the environment variable: $ export K3S_URL=https://192.168.6.240:6443 $ export K3S_TOKEN=\"K1078e7213ca32bdaabb44536f14b9ce7926bb201f41c3f3edd39975c16ff4901ea::server:33bde27f-ac49-4483-b6ac-f4eec2c6dbfa\" !!! important If you are in China, you need to use mirror acceleration:\n``` $ export INSTALL_DRYCC_MIRROR=cn ``` Join the cluster as server: $ curl -sfL https://www.drycc.cc/install.sh | bash -s - install_k3s_server Join the cluster as agent: $ curl -sfL https://www.drycc.cc/install.sh | bash -s - install_k3s_agent Install Options When using this method to install drycc, the following environment variables can be used to configure the installation:\nENVIRONMENT VARIABLE DESCRIPTION PLATFORM_DOMAIN Required item, specify drycc’s domain name DRYCC_ADMIN_USERNAME Required item, specify drycc’s admin username DRYCC_ADMIN_PASSWORD Required item, specify drycc’s admin password CERT_MANAGER_ENABLED Whether to use automatic certificate. It is false by default CHANNEL By default, stable channel will be installed. You can also specify testing KUBERNETES_SERVICE_HOST Set with the HOST of the loadbalancer that was in front of kube-apiserver KUBERNETES_SERVICE_PORT Set with the PORT of the loadbalancer that was in front of kube-apiserver METALLB_CONFIG_FILE The metallb config file path, layer 2 network is used by default LONGHORN_CONFIG_FILE The Longhorn config file path INSTALL_DRYCC_MIRROR Specify the accelerated mirror location. Currently, only cn is supported BUILDER_REPLICAS Number of builder replicas to deploy CONTROLLER_API_REPLICAS Number of controller api replicas to deploy CONTROLLER_CELERY_REPLICAS Number of controller celery replicas to deploy CONTROLLER_WEBHOOK_REPLICAS Number of controller webhook replicas to deploy CONTROLLER_APP_RUNTIME_CLASS RuntimeClass is a feature for selecting the container runtime configuration. CONTROLLER_APP_GATEWAY_CLASS GatewayClass allocated by drycc gateways; default GatewayClass is used by default CONTROLLER_APP_STORAGE_CLASS StorageClass allocated by drycc volumes; default storageClass is used by default VALKEY_PERSISTENCE_SIZE The size of the persistence space allocated to valkey, which is 5Gi by default VALKEY_PERSISTENCE_STORAGE_CLASS StorangeClass of valkey; default storangeclass is used by default STORAGE_PERSISTENCE_SIZE The size of the persistence space allocated to storage, which is 5Gi by default STORAGE_PERSISTENCE_STORAGE_CLASS StorangeClass of storage; default storangeclass is used by default MONITOR_GRAFANA_PERSISTENCE_SIZE The size of the persistence space allocated to monitor.grafana, which is 5Gi by default MONITOR_GRAFANA_PERSISTENCE_STORAGE_CLASS StorangeClass of monitor grafana; default storangeclass is used by default DATABASE_PERSISTENCE_SIZE The size of the persistence space allocated to database, which is 5Gi by default DATABASE_PERSISTENCE_STORAGE_CLASS StorangeClass of database; default storangeclass is used by default TIMESERIES_REPLICAS Number of timeseries replicas to deploy TIMESERIES_PERSISTENCE_SIZE The size of the persistence space allocated to timeseries, which is 5Gi by default TIMESERIES_PERSISTENCE_STORAGE_CLASS StorangeClass of timeseries; default storangeclass is used by default PASSPORT_REPLICAS Number of passport replicas to deploy REGISTRY_REPLICAS Number of registry replicas to deploy HELMBROKER_REPLICAS Number of helmbroker api replicas to deploy HELMBROKER_CELERY_REPLICAS Number of helmbroker celery replicas to deploy HELMBROKER_PERSISTENCE_SIZE The size of the persistence space allocated to helmbroker, which is 5Gi by default HELMBROKER_PERSISTENCE_STORAGE_CLASS StorangeClass of helmbroker; default storangeclass is used by default VICTORIAMETRICS_CONFIG_FILE The path of the victoriametrics configuration file, turn on this, the two below won’t work. VICTORIAMETRICS_VMAGENT_PERSISTENCE_SIZE The size of the persistence space allocated to victoriametrics vmagent, which is 10Gi by default VICTORIAMETRICS_VMAGENT_PERSISTENCE_STORAGE_CLASS StorangeClass of victoriametrics vmagent; default storangeclass is used by default VICTORIAMETRICS_VMSTORAGE_PERSISTENCE_SIZE The size of the persistence space allocated to victoriametrics vmstorage, which is 10Gi by default VICTORIAMETRICS_VMSTORAGE_PERSISTENCE_STORAGE_CLASS StorangeClass of victoriametrics vmstorage; default storangeclass is used by default K3S_DATA_DIR The config of k3s data dir; If not set, the default path is used ACME_SERVER ACME Server url, default use letsencrypt ACME_EAB_KEY_ID The key ID of which your external account binding is indexed by the external account ACME_EAB_KEY_SECRET The key Secret of which your external account symmetric MAC key Since the installation script will install k3s, other environment variables can refer to k3s installation environment variables.\nUninstall If you installed drycc using an installation script, you can uninstall the entire drycc using this script.\n$ curl -sfL https://www.drycc.cc/uninstall.sh | bash - ","categories":"","description":"Install Workflow in pure host, it can be a cloud server, bare metal server, virtual machine, or even your laptop.","excerpt":"Install Workflow in pure host, it can be a cloud server, bare metal …","ref":"/docs/quickstart/install-workflow/","tags":"","title":"Install Workflow"},{"body":"Install Drycc Workflow (Specify gateway) Now that Helm is installed and the repository has been added, install Workflow with a native gateway by running:\n$ helm install drycc oci://registry.drycc.cc/charts/workflow \\ --namespace drycc \\ --set global.gatewayClass=istio \\ --set global.platformDomain=drycc.cc \\ --set builder.service.type=LoadBalancer Of course, if you deploy it on a bare machine, you probably do not have Load Balancer. You need to use NodePort:\n$ helm install drycc oci://registry.drycc.cc/charts/workflow \\ --namespace drycc \\ --set global.gatewayClass=istio \\ --set global.platformDomain=drycc.cc \\ --set builder.service.type=NodePort \\ --set builder.service.nodePort=32222 If you want to use Load Balancer on a bare machine, you can look at metallb\nWhere global.platformDomain is a required parameter that is traditionally not required for Workflow that is explained in the next section. In this example we are using drycc.cc for $hostname.\nHelm will install a variety of Kubernetes resources in the drycc namespace. Wait for the pods that Helm launched to be ready. Monitor their status by running:\n$ kubectl --namespace=drycc get pods You should also notice that several Kubernetes gatewayclass has been installed on your cluster. You can view it by running:\n$ kubectl get gatewayclass --namespace drycc Depending on the order in which the Workflow components initialize, some pods may restart. This is common during the installation: if a component’s dependencies are not yet available, that component will exit and Kubernetes will automatically restart it.\nHere, it can be seen that the controller, builder and registry all took a few loops waiting for storage before they were able to start:\n$ kubectl --namespace=drycc get pods NAME READY STATUS RESTARTS AGE drycc-builder-hy3xv 1/1 Running 5 5m drycc-controller-g3cu8 1/1 Running 5 5m drycc-controller-celery-cmxxn 3/3 Running 0 5m drycc-database-rad1o 1/1 Running 0 5m drycc-fluentbit-1v8uk 1/1 Running 0 5m drycc-fluentbit-esm60 1/1 Running 0 5m drycc-storage-4ww3t 1/1 Running 0 5m drycc-registry-asozo 1/1 Running 1 5m Install a Kubernetes Gateway Now that Workflow has been deployed with the global.gatewayClass , we will need a Kubernetes gateway in place to begin routing traffic.\nHere is an example of how to use istio as an gateway for Workflow. Of course, you are welcome to use any controller you wish.\n$ helm repo add istio https://istio-release.storage.googleapis.com/charts $ helm repo update $ kubectl create namespace istio-system $ helm install istio-base istio/base -n istio-system $ helm install istiod istio/istiod -n istio-system --wait $ kubectl create namespace istio-ingress $ helm install istio-ingress istio/gateway -n istio-ingress --wait Configure DNS User must install drycc and then set up a hostname, and assumes the *.$host convention.\nWe need to point the *.$host record to the public IP address of your gateway. You can get the public IP using the following command. A wildcard entry is necessary here as apps will use the same rule after they are deployed.\n$ kubectl get gateway --namespace drycc NAME CLASS ADDRESS PROGRAMMED AGE gateway istio 138.91.243.152 True 36d If we were using drycc.cc as a hostname, we would need to create the following A DNS records.\nName Type Value *.drycc.cc A 138.91.243.152 Once all of the pods are in the READY state, and *.$host resolves to the external IP found above, the preparation of gateway has been completed!\nAfter installing Workflow, register a user and deploy an application.\nIf your k8s does not provide public network loadblance, you need to install TCP proxy services such as haproxy on machines that can access both internal and external networks, and then expose 80 and 443.\n","categories":"","description":"Choose the gateway provider that best suits your needs and platform.","excerpt":"Choose the gateway provider that best suits your needs and platform.","ref":"/docs/installing-workflow/gateway/","tags":"","title":"Specify Gateway"},{"body":"If help is required getting started with Kubernetes and Drycc Workflow, follow the quickstart guide for assistance.\nPrerequisites Verify the Kubernetes system requirements Install Helm and Drycc Workflow CLI tools Check Your Setup Check that the helm command is available and the version is v2.5.0 or newer.\n$ helm version Client: \u0026version.Version{SemVer:\"v2.5.0\", GitCommit:\"012cb0ac1a1b2f888144ef5a67b8dab6c2d45be6\", GitTreeState:\"clean\"} Server: \u0026version.Version{SemVer:\"v2.5.0\", GitCommit:\"012cb0ac1a1b2f888144ef5a67b8dab6c2d45be6\", GitTreeState:\"clean\"} Choose Your Deployment Strategy Drycc Workflow includes everything it needs to run out of the box. However, these defaults are aimed at simplicity rather than production readiness. Production and staging deployments of Workflow should, at a minimum, use off-cluster storage which is used by Workflow components to store and backup critical data. Should an operator need to completely re-install Workflow, the required components can recover from off-cluster storage. See the documentation for configuring object storage for more details.\nMore rigorous installations would benefit from using outside sources for the following things:\nPostgres - For example AWS RDS. Registry - This includes quay.io, dockerhub, Amazon ECR, and Google GCR. Valkey - Such as AWS Elasticache Grafana Gateway Now, workflow requires that gateway and cert-manager must be installed. Any compatible Kubernetes entry controller can be used.\nInstall Drycc Workflow If the version of helm is 3.0 +; you need to create the namespace in advance:\nkubectl create ns drycc If you want to change it, set the variable when using helm.\n$ helm install drycc oci://registry.drycc.cc/charts/workflow \\ --namespace drycc \\ --set builder.imageRegistry=quay.io \\ --set imagebuilder.imageRegistry=quay.io \\ --set controller.imageRegistry=quay.io \\ --set database.imageRegistry=quay.io \\ --set fluentbit.imageRegistry=quay.io \\ --set valkey.imageRegistry=quay.io \\ --set storage.imageRegistry=quay.io \\ --set grafana.imageRegistry=quay.io \\ --set registry.imageRegistry=quay.io \\ --set global.platformDomain=drycc.cc Helm will install a variety of Kubernetes resources in the drycc namespace. Wait for the pods that Helm launched to be ready. Monitor their status by running:\n$ kubectl --namespace=drycc get pods If it’s preferred to have kubectl automatically update as the pod states change, run (type Ctrl-C to stop the watch):\n$ kubectl --namespace=drycc get pods -w Depending on the order in which the Workflow components initialize, some pods may restart. This is common during the installation: if a component’s dependencies are not yet available, that component will exit and Kubernetes will automatically restart it.\nHere, it can be seen that the controller, builder and registry all took a few loops before they were able to start:\n$ kubectl --namespace=drycc get pods NAME READY STATUS RESTARTS AGE drycc-builder-574483744-l15zj 1/1 Running 0 4m drycc-controller-3953262871-pncgq 1/1 Running 2 4m drycc-controller-celery-cmxxn 3/3 Running 0 4m drycc-database-83844344-47ld6 1/1 Running 0 4m drycc-fluentbit-zxnqb 1/1 Running 0 4m drycc-valkey-304849759-1f35p 1/1 Running 0 4m drycc-storage-676004970-nxqgt 1/1 Running 0 4m drycc-monitor-grafana-432627134-lnl2h 1/1 Running 0 4m drycc-monitor-telegraf-wmcmn 1/1 Running 1 4m drycc-registry-756475849-lwc6b 1/1 Running 1 4m drycc-registry-proxy-96c4p 1/1 Running 0 4m Once all of the pods are in the READY state, Drycc Workflow is up and running!\nFor more installation parameters, please check the values.yaml file of workflow.\nAfter installing Workflow, register a user and deploy an application.\nConfigure DNS User must to set up a hostname, and assumes the drycc-builder.$host convention.\nWe need to point the drycc-builder.$host record to the public IP address of your builder. You can get the public IP using the following command. A wildcard entry is necessary here as apps will use the same rule after they are deployed.\n$ kubectl get svc drycc-builder --namespace drycc NAME CLUSTER-IP EXTERNAL-IP PORT(S) AGE drycc-builder 10.0.25.3 138.91.243.152 2222:31625/TCP 33m If we were using drycc.cc as a hostname, we would need to create the following A DNS records.\nName Type Value drycc-builder.drycc.cc A 138.91.243.152 Once all of the pods are in the READY state, and drycc-builder.$host resolves to the external IP found above, Workflow is up and running!\nAfter installing Workflow, register a user and deploy an application.\nIf your k8s does not provide public network loadblance, you need to install TCP proxy services such as haproxy on machines that can access both internal and external networks, and then expose 80 and 443.\n","categories":"","description":"This document is aimed at those who have already provisioned a Kubernetes cluster and want to install Drycc Workflow.","excerpt":"This document is aimed at those who have already provisioned a …","ref":"/docs/installing-workflow/workflow/","tags":"","title":"Installing Drycc Workflow"},{"body":"Drycc Workflow Roadmap The Drycc Workflow Roadmap is a community document created as part of the open Planning Process. Each roadmap item describes a high-level capability or grouping of features that are deemed important to the future of Drycc.\nGiven the project’s rapid Release Schedule, roadmap items are designed to provide a sense of direction over many releases.\nInteractive drycc run /bin/bash Provide the ability for developers to launch an interactive terminal session in their application environment.\nRelated issues:\nhttps://github.com/drycc/workflow-cli/issues/28 https://github.com/drycc/drycc/issues/117 Log Streaming Stream application logs via drycc logs -f https://github.com/drycc/drycc/issues/465\nTeams and Permissions Teams and Permissions represents a more flexible permissions model to allow more nuanced control to applications, capabilities and resources on the platform. There have been a number of proposals in this area which need to be reconciled for Drycc Workflow before we begin implementation.\nRelated issues:\nDeploy Keys: https://github.com/drycc/drycc/issues/3875 Teams: https://github.com/drycc/drycc/issues/4173 Fine grained permissions: https://github.com/drycc/drycc/issues/4150 Admins create apps only: https://github.com/drycc/drycc/issues/4052 Admin Certificate Permissions: https://github.com/drycc/drycc/issues/4576#issuecomment-170987223 Monitoring Define and deliver alerts with Kapacitor: https://github.com/drycc/monitor/issues/44 Workflow Addons/Services Developers should be able to quickly and easily provision application dependencies using a services or addon abstraction. https://github.com/drycc/drycc/issues/231\nInbound/Outbound Webhooks Drycc Workflow should be able to send and receive webhooks from external systems. Facilitating integration with third party services like GitHub, Gitlab, Slack, Hipchat.\nSend webhook on platform events: https://github.com/drycc/drycc/issues/1486 (Workflow v2.10) ","categories":"","description":"Drycc roadmap is community driven and managed through GitHub.","excerpt":"Drycc roadmap is community driven and managed through GitHub.","ref":"/docs/roadmap/roadmap/","tags":"","title":"Drycc Workflow Roadmap"},{"body":"This document describes how one can use kubectl to debug any issues with the cluster.\nDiving into the Components Using kubectl, one can inspect the cluster’s current state. When Workflow is installed with helm, Workflow is installed into the drycc namespace. To inspect if Workflow is running, run:\n$ kubectl --namespace=drycc get pods NAME READY STATUS RESTARTS AGE drycc-builder-gqum7 0/1 ContainerCreating 0 4s drycc-controller-h6lk6 0/1 ContainerCreating 0 4s drycc-controller-celery-cmxxn 0/3 ContainerCreating 0 4s drycc-database-56v39 0/1 ContainerCreating 0 4s drycc-fluentbit-xihr1 0/1 Pending 0 2s drycc-storage-c2exb 0/1 Pending 0 3s drycc-grafana-9ccur 0/1 Pending 0 3s drycc-registry-5bor6 0/1 Pending 0 3s !!! tip To save precious keystrokes, alias kubectl --namespace=drycc to kd so it is easier to type in the future.\nTo fetch the logs of a specific component, use kubectl logs:\n$ kubectl --namespace=drycc logs drycc-controller-h6lk6 system information: Django Version: 1.9.6 Python 3.5.1 addgroup: gid '0' in use Django checks: System check identified no issues (2 silenced). [...] To dive into a running container to inspect its environment, use kubectl exec:\n$ kubectl --namespace=drycc exec -it drycc-database-56v39 gosu postgres psql psql (13.4 (Debian 13.4-1.pgdg100+1)) Type \"help\" for help. postgres=# \\l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges -------------------+----------+----------+------------+------------+----------------------- drycc_controller | postgres | UTF8 | en_US.utf8 | en_US.utf8 | drycc_passport | postgres | UTF8 | en_US.utf8 | en_US.utf8 | postgres | postgres | UTF8 | en_US.utf8 | en_US.utf8 | template0 | postgres | UTF8 | en_US.utf8 | en_US.utf8 | =c/postgres + | | | | | postgres=CTc/postgres template1 | postgres | UTF8 | en_US.utf8 | en_US.utf8 | =c/postgres + | | | | | postgres=CTc/postgres (4 rows) postgres=# \\connect drycc_controller You are now connected to database \"drycc_controller\" as user \"postgres\". drycc_controller=# \\dt List of relations Schema | Name | Type | Owner --------+--------------------------------+-------+------------------- public | api_app | table | drycc_controller public | api_build | table | drycc_controller public | api_certificate | table | drycc_controller public | api_config | table | drycc_controller public | api_domain | table | drycc_controller public | api_key | table | drycc_controller public | api_push | table | drycc_controller public | api_release | table | drycc_controller public | auth_group | table | drycc_controller --More-- drycc_controller=# SELECT COUNT(*) from api_app; count ------- 0 (1 row) ","categories":"","description":"Kubernetes provides a command line tool for communicating with a Kubernetes cluster's control plane, using the Kubernetes API.","excerpt":"Kubernetes provides a command line tool for communicating with a …","ref":"/docs/troubleshooting/kubectl/","tags":"","title":"Troubleshooting using Kubectl"},{"body":"","categories":"","description":"Understanding the architecture design of workflow.\n","excerpt":"Understanding the architecture design of workflow.\n","ref":"/docs/understanding-workflow/","tags":"","title":"Understanding Workflow"},{"body":"Workflow use the passport component to create and authorize users, it can config options for LDAP authentication or browse passport web site to register users.\nLogin to Workflow If you already have an account, use drycc login to authenticate against the Drycc Workflow API.\n$ drycc login http://drycc.example.com Opening browser to http://drycc.example.com/v2/login/drycc/?key=4ccc81ee2dce4349ad5261ceffe72c71 Waiting for login... .o.Logged in as drycc Configuration file written to /root/.drycc/client.json Or you can login with username and password $ drycc login http://drycc.example.com –username=demo –password=demo Configuration file written to /root/.drycc/client.json\nLogout from Workflow Logout of an existing controller session using drycc logout.\n$ drycc logout Logged out as drycc Verify Your Session You can verify your client configuration by running drycc whoami.\n$ drycc whoami You are drycc at http://drycc.example.com !!! note Session and client configuration is stored in the ~/.drycc/client.json file.\n","categories":"","description":"Get started on Drycc today","excerpt":"Get started on Drycc today","ref":"/docs/users/registration/","tags":"","title":"Users and Registration"},{"body":"All Workflow components are deployed as services (and associated controllers) in your Kubernetes cluster. If you are interested we have a more detailed exploration of the Workflow architecture.\nAll of the componentry for Workflow is built with composability in mind. If you need to customize one of the components for your specific deployment or need the functionality in your own project we invite you to give it a shot!\nController Project Location: drycc/controller\nThe controller component is an HTTP API server which serves as the endpoint for the drycc CLI. The controller provides all of the platform functionality as well as interfacing with your Kubernetes cluster. The controller persists all of its data to the database component.\nPassport Project Location: drycc/passport\nThe passport component exposes a web API and provide OAuth2 authentication.\nDatabase Project Location: drycc/postgres\nThe database component is a managed instance of PostgreSQL which holds a majority of the platforms state. Backups and WAL files are pushed to object storage via WAL-E. When the database is restarted, backups are fetched and replayed from object storage so no data is lost.\nBuilder Project Location: drycc/builder\nThe builder component is responsible for accepting code pushes via Git and managing the build process of your Application. The builder process is:\nReceives incoming git push requests over SSH Authenticates the user via SSH key fingerprint Authorizes the user’s access to push code to the Application Starts the Application Build phase (see below) Triggers a new Release via the Controller Builder currently supports both buildpack and Dockerfile based builds.\nProject Location: drycc/imagebuilder\nFor Buildpack-based deploys, the builder component will launch a one-shot Job in the drycc namespace. This job runs imagebuilder component which handles default and custom buildpacks (specified by .packbuilder). The completed image is pushed to the managed Container registry on cluster. For more information about buildpacks see using buildpacks.\nUnlike buildpack-based, For Applications which contain a Dockerfile in the root of the repository, it generates a Container image (using the underlying Container engine). For more information see using Dockerfiles.\nObject Storage Project Location: drycc/storage\nAll of the Workflow components that need to persist data will ship them to the object storage that was configured for the cluster.For example, database ships its WAL files, registry stores Container images, and slugbuilder stores slugs.\nWorkflow supports either on or off-cluster storage. For production deployments we highly recommend that you configure off-cluster object storage.\nTo facilitate experimentation, development and test environments, the default charts for Workflow include on-cluster storage via storage.\nIf you also feel comfortable using Kubernetes persistent volumes you may configure storage to use persistent storage available in your environment.\nRegistry Project Location: drycc/registry\nThe registry component is a managed container registry which holds application images generated from the builder component. Registry persists the Container image images to either local storage (in development mode) or to object storage configured for the cluster.\nQuickwit Project Location: drycc/quickwit\nQuickwit is the first engine to execute complex search and analytics queries directly on cloud storage with sub-second latency. Powered by Rust and its decoupled compute and storage architecture, it is designed to be resource-efficient, easy to operate, and scale to petabytes of data.\nQuickwit is a great fit for log management, distributed tracing, and generally immutable data such as conversational data (emails, texts, messaging platforms) and event-based analytics.\nFluentbit Project Location: drycc/fluentbit\nFluent Bit is a fast and lightweight telemetry agent for logs, metrics, and traces for Linux, macOS, Windows, and BSD family operating systems. Fluent Bit has been made with a strong focus on performance to allow the collection and processing of telemetry data from different sources without complexity.\nVictoriametrics Project Location: drycc/victoriametrics\nVictoriametrics is a system monitoring and alerting system. It was opensourced by SoundCloud in 2012 and is the second project both to join and to graduate within Cloud Native Computing Foundation after Kubernetes. Victoriametrics stores all metrics data as time series, i.e metrics information is stored along with the timestamp at which it was recorded, optional key-value pairs called as labels can also be stored along with metrics.\nHelmBroker Project Location: drycc-addons/helmbroker\nHelm Broker is a Service Broker that exposes Helm charts as Service Classes in Service Catalog. To do so, Helm Broker uses the concept of addons. An addon is an abstraction layer over a Helm chart which provides all information required to convert the chart into a Service Class.\nVictoriametrics Project Location: drycc/victoriametrics\nVictoriametrics is an open-source systemsmonitoring and alerting toolkit originally built atSoundCloud.\nSee Also Workflow Concepts Workflow Architecture ","categories":"","description":"Workflow is comprised of a number of small, independent services that combine to create a distributed CaaS.","excerpt":"Workflow is comprised of a number of small, independent services that …","ref":"/docs/understanding-workflow/components/","tags":"","title":"Components"},{"body":"What’s New New! format of POST /v2/apps/\u003capp id\u003e/run has changed.\nAuthentication Register a New User Example Request:\nPOST /v2/auth/register/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json { \"username\": \"test\", \"password\": \"opensesame\", \"email\": \"test@example.com\" } Optional Parameters:\n{ \"first_name\": \"test\", \"last_name\": \"testerson\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Log in Example Request:\nPOST /v2/auth/login/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json {\"username\": \"test\", \"password\": \"opensesame\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"token\": \"abc123\"} Cancel Account Example Request:\nDELETE /v2/auth/cancel/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Regenerate Token note\nThis command could require administrative privileges\nExample Request:\nPOST /v2/auth/tokens/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional Parameters:\n{ \"username\" : \"test\" \"all\" : \"true\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"token\": \"abc123\"} Change Password Example Request:\nPOST /v2/auth/passwd/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"password\": \"foo\", \"new_password\": \"bar\" } Optional parameters:\n{\"username\": \"testuser\"} note\nUsing the username parameter requires administrative privileges and makes the password parameter optional.\nExample Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Applications List all Applications Example Request:\nGET /v2/apps HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Create an Application Example Request:\nPOST /v2/apps/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 Optional parameters:\n{\"id\": \"example-go\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Destroy an Application Example Request:\nDELETE /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 List Application Details Example Request:\nGET /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Update Application Details Example Request:\nPOST /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional parameters:\n{ \"owner\": \"test\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 1.8.0 Content-Type: application/json Retrieve Application Logs Example Request:\nGET /v2/apps/example-go/logs/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional URL Query Parameters:\n?log_lines= Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: text/plain \"16:51:14 drycc[api]: test created initial release\\n\" Run one-off Commands POST /v2/apps/example-go/run/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"command\": \"echo hi\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"exit_code\": 0, \"output\": \"hi\\n\"} Certificates List all Certificates Example Request:\nGET /v2/certs HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } ] } Get Certificate Details Example Request:\nGET /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Create Certificate Example Request:\nPOST /v2/certs/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 { \"name\": \"foo\" \"certificate\": \"-----BEGIN CERTIFICATE-----\", \"key\": \"-----BEGIN RSA PRIVATE KEY-----\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Destroy a Certificate Example Request:\nDELETE /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Attach a Domain to a Certificate Example Request:\nPOST /v2/certs/foo/domain/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"domain\": \"test.com\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Remove a Domain from a Certificate Example Request:\nDELETE /v2/certs/foo/domain/test.com/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Pods List all Pods Example Request:\nGET /v2/apps/example-go/pods/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } List all Pods by Type Example Request:\nGET /v2/apps/example-go/pods/web/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } Restart All Pods Example Request:\nPOST /v2/apps/example-go/pods/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type Example Request:\nPOST /v2/apps/example-go/pods/web/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type and Name Example Request:\nPOST /v2/apps/example-go/pods/go-v2-web-atots/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Scale Pods Example Request:\nPOST /v2/apps/example-go/scale/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"web\": 3} Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Configuration List Application Configuration Example Request:\nGET /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create new Config Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": \"world\", \"PLATFORM\": \"drycc\"}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json X-Drycc-Release: 3 { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v3\", \"HELLO\": \"world\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Unset Config Variable Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": null}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json X-Drycc-Release: 4 { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v4\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Domains List Application Domains Example Request:\nGET /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } ] } Add Domain Example Request:\nPOST /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {'domain': 'example.example.com'} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } Remove Domain Example Request:\nDELETE /v2/apps/example-go/domains/example.example.com HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Builds List Application Builds Example Request:\nGET /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"FROM drycc/slugrunner RUN mkdir -p /app WORKDIR /app ENTRYPOINT [\\\"/runner/init\\\"] ADD slug.tgz /app ENV GIT_SHA 060da68f654e75fac06dbedd1995d5f8ad9084db\", \"image\": \"example-go\", \"owner\": \"test\", \"procfile\": { \"web\": \"example-go\" }, \"sha\": \"060da68f\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create Application Build Example Request:\nPOST /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"image\": \"drycc/example-go:latest\"} Optional Parameters:\n{ \"procfile\": { \"web\": \"./cmd\" } } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json X-Drycc-Release: 4 { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"\", \"image\": \"drycc/example-go:latest\", \"owner\": \"test\", \"procfile\": {}, \"sha\": \"\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Releases List Application Releases Example Request:\nGET /v2/apps/example-go/releases/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"ed637ceb-5d32-44bd-9406-d326a777a513\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test changed nothing\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 3 }, { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test deployed 060da68\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 2 }, { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } ] } List Release Details Example Request:\nGET /v2/apps/example-go/releases/v2/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } Rollback Release Example Request:\nPOST /v2/apps/example-go/releases/rollback/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"version\": 1} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"version\": 5} Keys List Keys Example Request:\nGET /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"test@example.com\", \"owner\": \"test\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Add Key to User Example Request:\nPOST /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"id\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example\", \"owner\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Remove Key from User Example Request:\nDELETE /v2/keys/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Permissions List Application Permissions note\nThis does not include the app owner.\nExample Request:\nGET /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"users\": [ \"test\", \"foo\" ] } Create Application Permission Example Request:\nPOST /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Remove Application Permission Example Request:\nDELETE /v2/apps/example-go/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 List Administrators Example Request:\nGET /v2/admin/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 2, \"next\": null \"previous\": null, \"results\": [ { \"username\": \"test\", \"is_superuser\": true }, { \"username\": \"foo\", \"is_superuser\": true } ] } Grant User Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nPOST /v2/admin/perms HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Remove User’s Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nDELETE /v2/admin/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Users List all users note\nThis command requires administrative privileges\nExample Request:\nGET /v2/users HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.0 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } ] } ","categories":"","description":"This is the v2.0 REST API for the Controller.","excerpt":"This is the v2.0 REST API for the Controller.","ref":"/docs/reference-guide/controller-api-v2-0/","tags":"","title":"Controller API v2.0"},{"body":"It’s useful to help keep the development team informed about deploys, while it can also be used to integrate different systems together.\nAfter one or more hooks are setup, hook output and errors appear in your application’s logs:\n$ drycc logs ... 2011-03-15T15:07:29-07:00 drycc[api]: Deploy hook sent to http://drycc.rocks Deploy hooks are a generic HTTP hook. An administrator can create and configure multiple deploy hooks by tuning the controller settings via the Helm chart.\nHTTP POST Hook The HTTP deploy hook performs an HTTP POST to a URL. The parameters included in the request are the same as the variables available in the hook message: app, release, release_summary, sha and user. See below for their descriptions:\napp=secure-woodland\u0026release=v4\u0026release_summary=gabrtv%20deployed%35b3726\u0026sha=35b3726\u0026user=gabrtv Optionally, if a deploy hook secret key is added to the controller through tuning the controller settings, a new Authorization header will be present in the POST request. The value of this header is computed as the HMAC hex digest of the request URL, using the secret as the key.\nIn order to authenticate that this request came from Workflow, use the secret key, the full URL and the HMAC-SHA1 hashing algorithm to compute the signature. In Python, that would look something like this:\nimport hashlib import hmac hmac.new(\"my_secret_key\", \"http://drycc.rocks?app=secure-woodland\u0026release=v4\u0026release_summary=gabrtv%20deployed%35b3726\u0026sha=35b3726\u0026user=gabrtv\", digestmod=hashlib.sha1).hexdigest() If the value of the computed HMAC hex digest and the value in the Authorization header are identical, then the request came from Workflow.\n!!! important When computing the signature, ensure that the URL parameters are in alphabetic order. This is critical when computing the cryptographic signature as most web applications don’t care about the order of the HTTP parameters, but the cryptographic signature will not be the same.\n","categories":"","description":"Deploy hooks allow an external service to receive a notification whenever a new version of your app is pushed to Workflow.","excerpt":"Deploy hooks allow an external service to receive a notification …","ref":"/docs/managing-workflow/deploy-hooks/","tags":"","title":"Deploy Hooks"},{"body":"Drycc supports deploying applications via Dockerfiles. A Dockerfile automates the steps for crafting a [Container Image][]. Dockerfiles are incredibly powerful but require some extra work to define your exact application runtime environment.\nAdd SSH Key For Dockerfile based application deploys via git push, Drycc Workflow identifies users via SSH keys. SSH keys are pushed to the platform and must be unique to each user.\nSee this document for instructions on how to generate an SSH key.\nRun drycc keys add to upload your SSH key to Drycc Workflow.\n$ drycc keys add ~/.ssh/id_drycc.pub Uploading id_drycc.pub to drycc... done Read more about adding/removing SSH Keys here.\nPrepare an Application If you do not have an existing application, you can clone an example application that demonstrates the Dockerfile workflow.\n$ git clone https://github.com/drycc/helloworld.git $ cd helloworld Dockerfile Requirements In order to deploy Dockerfile applications, they must conform to the following requirements:\nThe Dockerfile must use the EXPOSE directive to expose exactly one port. That port must be listening for an HTTP connection. The Dockerfile must use the CMD directive to define the default process that will run within the container. The Container image must contain bash to run processes. !!! note Note that if you are using a private registry of any kind (gcr or other) the application environment must include a $PORT config variable that matches the EXPOSE’d port, example: drycc config set PORT=5000. See Configuring Registry for more info.\nCreate an Application Use drycc create to create an application on the Controller.\n$ drycc create Creating application... done, created folksy-offshoot Git remote drycc added Push to Deploy Use git push drycc master to deploy your application.\n$ git push drycc master Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.99 KiB | 0 bytes/s, done. Total 13 (delta 2), reused 0 (delta 0) -----\u003e Building Docker image Uploading context 4.096 kB Uploading context Step 0 : FROM drycc/base:latest ---\u003e 60024338bc63 Step 1 : RUN wget -O /tmp/go1.2.1.linux-amd64.tar.gz -q https://go.googlecode.com/files/go1.2.1.linux-amd64.tar.gz ---\u003e Using cache ---\u003e cf9ef8c5caa7 Step 2 : RUN tar -C /usr/local -xzf /tmp/go1.2.1.linux-amd64.tar.gz ---\u003e Using cache ---\u003e 515b1faf3bd8 Step 3 : RUN mkdir -p /go ---\u003e Using cache ---\u003e ebf4927a00e9 Step 4 : ENV GOPATH /go ---\u003e Using cache ---\u003e c6a276eded37 Step 5 : ENV PATH /usr/local/go/bin:/go/bin:$PATH ---\u003e Using cache ---\u003e 2ba6f6c9f108 Step 6 : ADD . /go/src/github.com/drycc/helloworld ---\u003e 94ab7f4b977b Removing intermediate container 171b7d9fdb34 Step 7 : RUN cd /go/src/github.com/drycc/helloworld \u0026\u0026 go install -v . ---\u003e Running in 0c8fbb2d2812 github.com/drycc/helloworld ---\u003e 13b5af931393 Removing intermediate container 0c8fbb2d2812 Step 8 : ENV PORT 80 ---\u003e Running in 9b07da36a272 ---\u003e 2dce83167874 Removing intermediate container 9b07da36a272 Step 9 : CMD [\"/go/bin/helloworld\"] ---\u003e Running in f7b215199940 ---\u003e b1e55ce5195a Removing intermediate container f7b215199940 Step 10 : EXPOSE 80 ---\u003e Running in 7eb8ec45dcb0 ---\u003e ea1a8cc93ca3 Removing intermediate container 7eb8ec45dcb0 Successfully built ea1a8cc93ca3 -----\u003e Pushing image to private registry Launching... done, v2 -----\u003e folksy-offshoot deployed to Drycc http://folksy-offshoot.local3.dryccapp.com To learn more, use `drycc help` or visit https://www.drycc.cc To ssh://git@local3.dryccapp.com:2222/folksy-offshoot.git * [new branch] master -\u003e master $ curl -s http://folksy-offshoot.local3.dryccapp.com Welcome to Drycc! See the documentation at http://docs.drycc.cc/ for more information. Because a Dockerfile application is detected, the web process type is automatically scaled to 1 on first deploy.\nUse drycc scale web=3 to increase web processes to 3, for example. Scaling a process type directly changes the number of containers running that process.\nContainer Build Arguments As of Workflow v2.13.0, users can inject their application config into the Container image using Container build arguments. To opt into this, users must add a new environment variable to their application:\n$ drycc config set DRYCC_DOCKER_BUILD_ARGS_ENABLED=1 Every environment variable set with drycc config set will then be available for use inside the user’s Dockerfile. For example, if a user runs drycc config set POWERED_BY=Workflow, the user can utilize that build argument in their Dockerfile:\nARG POWERED_BY RUN echo \"Powered by $POWERED_BY\" \u003e /etc/motd ","categories":"","description":"Drycc Container Registry allows you to deploy your Docker-based app to Drycc. Both Common Runtime and Private Spaces are supported.","excerpt":"Drycc Container Registry allows you to deploy your Docker-based app to …","ref":"/docs/applications/using-dockerfiles/","tags":"","title":"Using Dockerfiles"},{"body":"In this guide, we walk you through the process of setting up a development environment that is suitable for hacking on most Drycc components.\nWe try to make it simple to hack on Drycc components. However, there are necessarily several moving pieces and some setup required. We welcome any suggestions for automating or simplifying this process.\n!!! note The Drycc team is actively engaged in containerizing Go and Python based development environments tailored specifically for Drycc development in order to minimize the setup required. This work is ongoing. Refer to the drycc/router project for a working example of a fully containerized development environment.\nIf you’re just getting into the Drycc codebase, look for GitHub issues with the label easy-fix. These are more straightforward or low-risk issues and are a great way to become more familiar with Drycc.\nPrerequisites In order to successfully compile and test Drycc binaries and build Container images of Drycc components, the following are required:\ngit Go 1.5 or later, with support for compiling to linux/amd64 glide golint shellcheck Podman (in a non-Linux environment, you will additionally want [Podman Machine][machine]) For drycc/controller, in particular, you will also need:\nPython 2.7 or later (with pip) virtualenv (sudo pip install virtualenv) In most cases, you should simply install according to the instructions. There are a few special cases, though. We cover these below.\nConfiguring Go If your local workstation does not support the linux/amd64 target environment, you will have to install Go from source with cross-compile support for that environment. This is because some of the components are built on your local machine and then injected into a container.\nHomebrew users can just install with cross compiling support:\n$ brew install go --with-cc-common It is also straightforward to build Go from source:\n$ sudo su $ curl -sSL https://golang.org/dl/go1.5.src.tar.gz | tar -v -C /usr/local -xz $ cd /usr/local/go/src $ # compile Go for our default platform first, then add cross-compile support $ ./make.bash --no-clean $ GOOS=linux GOARCH=amd64 ./make.bash --no-clean Once you can compile to linux/amd64, you should be able to compile Drycc components as normal.\nFork the Repository Once the prerequisites have been met, we can begin to work with Drycc components.\nBegin at Github by forking whichever Drycc project you would like to contribute to, then clone that fork locally. Since Drycc is predominantly written in Go, the best place to put it is under $GOPATH/src/github.com/drycc/.\n$ mkdir -p $GOPATH/src/github.com/drycc $ cd $GOPATH/src/github.com/drycc $ git clone git@github.com:\u003cusername\u003e/\u003ccomponent\u003e.git $ cd \u003ccomponent\u003e !!! note By checking out the forked copy into the namespace github.com/drycc/\u003ccomponent\u003e, we are tricking the Go toolchain into seeing our fork as the “official” source tree.\nIf you are going to be issuing pull requests to the upstream repository from which you forked, we suggest configuring Git such that you can easily rebase your code to the upstream repository’s main branch. There are various strategies for doing this, but the most common is to add an upstream remote:\n$ git remote add upstream https://github.com/drycc/\u003ccomponent\u003e.git For the sake of simplicity, you may want to point an environment variable to your Drycc code - the directory containing one or more Drycc components:\n$ export DRYCC=$GOPATH/src/github.com/drycc Throughout the rest of this document, $DRYCC refers to that location.\nAlternative: Forking with a Pushurl A number of Drycc contributors prefer to pull directly from drycc/\u003ccomponent\u003e, but push to \u003cusername\u003e/\u003ccomponent\u003e. If that workflow suits you better, you can set it up this way:\n$ git clone git@github.com:drycc/\u003ccomponent\u003e.git $ cd drycc $ git config remote.origin.pushurl git@github.com:\u003cusername\u003e/\u003ccomponent\u003e.git In this setup, fetching and pulling code will work directly with the upstream repository, while pushing code will send changes to your fork. This makes it easy to stay up to date, but also make changes and then issue pull requests.\nMake Your Changes With your development environment set up and the code you wish to work on forked and cloned, you can begin making your changes.\nTest Your Changes Drycc components each include a comprehensive suite of automated tests, mostly written in Go. See testing for instructions on running the tests.\nDeploying Your Changes Although writing and executing tests are critical to ensuring code quality, most contributors will also want to deploy their changes to a live environment, whether to make use of those changes or to test them further. The remainder of this section documents the procedure for running officially released Drycc components in a development cluster and replacing any one of those with your customizations.\nRunning a Kubernetes Cluster for Development To run a Kubernetes cluster locally or elsewhere to support your development activities, refer to Drycc installation instructions here.\nUsing a Development Registry To facilitate deploying Container images containing your changes to your Kubernetes cluster, you will need to make use of a Container registry. This is a location to where you can push your custom-built images and from where your Kubernetes cluster can retrieve those same images.\nIf your development cluster runs locally (in Minikube, for instance), the most efficient and economical means of achieving this is to run a Container registry locally as a Container container.\nTo facilitate this, most Drycc components provide a make target to create such a registry:\n$ make dev-registry In a Linux environment, to begin using the registry:\nexport DRYCC_REGISTRY=\u003cIP of the host machine\u003e:5000 In non-Linux environments:\nexport DRYCC_REGISTRY=\u003cIP of the drycc Container Machine VM\u003e:5000 If your development cluster runs on a cloud provider such as Google Container Engine, a local registry such as the one above will not be accessible to your Kubernetes nodes. In such cases, a public registry such as [DockerHub][dh] or quay.io will suffice.\nTo use DockerHub for this purpose, for instance:\n$ export DRYCC_REGISTRY=\"registry.drycc.cc\" $ export IMAGE_PREFIX=\u003cyour DockerHub username\u003e To use quay.io:\n$ export DRYCC_REGISTRY=quay.io $ export IMAGE_PREFIX=\u003cyour quay.io username\u003e Note the importance of the trailing slash.\nDev / Deployment Workflow With a functioning Kubernetes cluster and the officially released Drycc components installed onto it, deployment and further testing of any Drycc component you have made changes to is facilitated by replacing the officially released component with a custom built image that contains your changes. Most Drycc components include Makefiles with targets specifically intended to facilitate this workflow with minimal friction.\nIn the general case, this workflow looks like this:\nUpdate source code and commit your changes using git Use make build to build a new Container image Use make dev-release to generate Kubernetes manifest(s) Use make deploy to restart the component using the updated manifest This can be shortened to a one-liner using just the deploy target:\n$ make deploy Useful Commands Once your customized Drycc component has been deployed, here are some helpful commands that will allow you to inspect your cluster and to troubleshoot, if necessary:\nSee All Drycc Pods $ kubectl --namespace=drycc get pods Describe a Pod This is often useful for troubleshooting pods that are in pending or crashed states:\n$ kubectl --namespace=drycc describe -f \u003cpod name\u003e Tail Logs $ kubectl --namespace=drycc logs -f \u003cpod name\u003e Django Shell Specific to drycc/controller\n$ kubectl --namespace=drycc exec -it \u003cpod name\u003e -- python manage.py shell Have commands other Drycc contributors might find useful? Send us a PR!\nPull Requests Satisfied with your changes? Share them!\nPlease read Submitting a Pull Request. It contains a checklist of things you should do when proposing a change to any Drycc component.\n","categories":"","description":"This document is for developers who are interested in working directly on the Drycc codebase.","excerpt":"This document is for developers who are interested in working directly …","ref":"/docs/contribution-guidelines/development-environment/","tags":"","title":"Development Environment"},{"body":"Drycc Workflow Client CLI The Drycc command-line interface (CLI), lets you interact with Drycc Workflow. Use the CLI to create and configure and manage applications.\nInstall the drycc client for Linux or Mac OS X with:\n$ curl -sfL https://www.drycc.cc/install-cli.sh | bash - !!! important Users in Chinese mainland can use the following methods to speed up installation:\n``` $ curl -sfL https://www.drycc.cc/install-cli.sh | INSTALL_DRYCC_MIRROR=cn bash - ``` Others please visit: https://github.com/drycc/workflow-cli/releases\nThe installer places the drycc binary in your current directory, but you should move it somewhere in your $PATH:\n$ sudo ln -fs $PWD/drycc /usr/local/bin/drycc or:\n$ sudo mv $PWD/drycc /usr/local/bin/drycc Check your work by running drycc version:\n$ drycc version v1.1.0 Update workflow cli to latest release.\ndrycc update !!! note Note that version numbers may vary as new releases become available\n","categories":"","description":"How to download, install Drycc CLI tools.","excerpt":"How to download, install Drycc CLI tools.","ref":"/docs/quickstart/install-cli-tools/","tags":"","title":"Drycc Workflow Client CLI"},{"body":"","categories":"","description":"Deploying Drycc on a Kubernetes Cluster.\n","excerpt":"Deploying Drycc on a Kubernetes Cluster.\n","ref":"/docs/installing-workflow/","tags":"","title":"Installing To Kubenetes"},{"body":"Drycc uses a continuous delivery approach for creating releases. Every merged commit that passes testing results in a deliverable that can be given a semantic version tag and shipped.\nThe master git branch of a project should always work. Only changes considered ready to be released publicly are merged.\nComponents Release as Needed Drycc components release new versions as often as needed. Fixing a high priority bug requires the project maintainer to create a new patch release. Merging a backward-compatible feature implies a minor release.\nBy releasing often, each component release becomes a safe and routine event. This makes it faster and easier for users to obtain specific fixes. Continuous delivery also reduces the work necessary to release a product such as Drycc Workflow, which integrates several components.\n“Components” applies not just to Drycc Workflow projects, but also to development and release tools, to Container base images, and to other Drycc projects that do semantic version releases.\nSee “How to Release a Component” for more detail.\nWorkflow Releases Each Month Drycc Workflow has a regular, public release cadence. From v2.8.0 onward, new Workflow feature releases arrive on the first Thursday of each month. Patch releases are created at any time, as needed. GitHub milestones are used to communicate the content and timing of major and minor releases, and longer-term planning is visible at the Roadmap.\nWorkflow release timing is not linked to specific features. If a feature is merged before the release date, it is included in the next release.\nSee “How to Release Workflow” for more detail.\nSemantic Versioning Drycc releases comply with semantic versioning, with the “public API” broadly defined as:\nREST, gRPC, or other API that is network-accessible Library or framework API intended for public use “Pluggable” socket-level protocols users can redirect CLI commands and output formats In general, changes to anything a user might reasonably link to, customize, or integrate with should be backward-compatible, or else require a major release. Drycc users can be confident that upgrading to a patch or to a minor release will not break anything.\nHow to Release a Component Most Drycc projects are “components” which produce a Container image or binary executable as a deliverable. This section leads a maintainer through creating a component release.\nStep 1: Update Code and Run the Release Tool Major or minor releases should happen on the master branch. Patch releases should check out the previous release tag and cherry-pick specific commits from master.\nNote: if a patch release, the release artifact will have to be manually promoted by triggering the component-promote job with the following values:\nCOMPONENT_NAME=\u003ccomponent name\u003e COMPONENT_SHA=\u003cpatch commit sha\u003e Make sure you have the dryccrel release tool in your search $PATH.\nRun dryccrel release once with a fake semver tag to proofread the changelog content. (If HEAD of master is not what is intended for the release, add the --sha flag as described in dryccrel release --help.)\n$ dryccrel release controller v0.0.0 Doing a dry run of the component release... skipping commit 943a49267eeb28546819a266654806cfcbae0e38 Creating changelog for controller with tag v2.8.1 through commit 943a49267eeb28546819a266654806cfcbae0e38 ### v2.8.1 -\u003e v0.0.0 #### Fixes - [`615b834`](https://github.com/drycc/controller/commit/615b834f39cb68a854cc1f1e2f0f82d862ea2731) boot: Ensure DRYCC_DEBUG==true for debug output Based on the changelog content, determine whether the component deserves a minor or patch release. Run the command again with that semver tag and --dry-run=false. You will still be asked for confirmation before the release is created:\n$ dryccrel release controller v2.8.2 --dry-run=false skipping commit 943a49267eeb28546819a266654806cfcbae0e38 Creating changelog for controller with tag v2.8.1 through commit 943a49267eeb28546819a266654806cfcbae0e38 ### v2.8.1 -\u003e v2.8.2 #### Fixes - [`615b834`](https://github.com/drycc/controller/commit/615b834f39cb68a854cc1f1e2f0f82d862ea2731) boot: Ensure DRYCC_DEBUG==true for debug output Please review the above changelog contents and ensure: 1. All intended commits are mentioned 2. The changes agree with the semver release tag (major, minor, or patch) Create release for Drycc Controller v2.8.2? [y/n]: y New release is available at https://github.com/drycc/controller/releases/tag/v2.8.2 Step 2: Verify the Component is Available Tagging the component (see Step 1) starts a CI job that eventually results in an artifact being made available for public download. Please see the CI flow diagrams for details.\nDouble-check that the artifact is available, either by a podman pull command or by running the appropriate installer script.\nIf the artifact can’t be downloaded, ensure that its CI release jobs are still in progress, or fix whatever issue arose in the pipeline. For example, the master merge pipeline may have failed to promote the :git-abc1d23 candidate image and needs to be restarted with that component and commit.\nIf the component has a correlating Kubernetes Helm chart, this chart will also be packaged, signed and uploaded to its production chart repo. Please verify it can be fetched (and verified):\n$ helm fetch oci://registry.drycc.cc/charts/controller --version 1.0.0 Verification: \u0026{0xc4207ec870 sha256:026e766e918ff28d2a7041bc3d560d149ee7eb0cb84165c9d9d00a3045ff45c3 controller-v1.0.1.tgz} How to Release Workflow Drycc Workflow integrates multiple component releases together with a Kubernetes Helm chart deliverable. This section leads a maintainer through creating a Workflow release.\nStep 1: Set Environment Variables Export two environment variables that will be used in later steps:\nexport WORKFLOW_RELEASE=v2.17.0 WORKFLOW_PREV_RELEASE=v2.16.0 # for example Step 2: Tag Supporting Repositories Some Workflow components not in the Helm chart must also be tagged in sync with the release. Follow the component release process above and ensure that these components are tagged:\ndrycc/workflow-cli drycc/workflow-e2e The version number for drycc/workflow-cli should always match the overall Workflow version number.\nStep 3: Create Helm Chart To create and stage a release candidate chart for Workflow, we will build the workflow-chart-stage job with the following parameters:\nRELEASE_TAG=$WORKFLOW_RELEASE\nThis job will gather all of the latest component release tags and use these to specify the versions of all component charts. It will then package the Workflow chart, upload it to the staging chart repo and kick off an e2e run against said chart.\nStep 4: Manual Testing Now it’s time to go above and beyond current CI tests. Create a testing matrix spreadsheet (copying from the previous document is a good start) and sign up testers to cover all permutations.\nTesters should pay special attention to the overall user experience, make sure upgrading from earlier versions is smooth, and cover various storage configurations and Kubernetes versions and infrastructure providers.\nWhen showstopper-level bugs are found, the process is as follows:\nCreate a component PR that fixes the bug. Once the PR passes and is reviewed, merge it and do a new component release Trigger the same workflow-chart-stage job as mentioned in Step 3 to upload the newly-generated Workflow release candidate chart to staging. Step 5: Release the Chart When testing has completed without uncovering any new showstopper bugs, kick off the workflow-chart-release job with the following parameter:\nRELEASE_TAG=$WORKFLOW_RELEASE\nThis job will copy the release candidate chart (now approved by CI and manual testing) from the staging repo to the production repo, signing it if it has not done so already.\nStep 6: Assemble Master Changelog Each component already updated its release notes on GitHub with CHANGELOG content. We’ll now generate the master changelog for the Workflow chart, consisting of all component and auxilliary repo changes.\nWe’ll employ the requirements.lock file from the WORKFLOW_PREV_RELEASE chart, as well as a repo-to-chart-name mapping file, this time invoking dryccrel changelog global to get all component changes between the chart versions existing in the WORKFLOW_PREV_RELEASE chart and the most recent releases existing in GitHub. (Therefore, if there are any unreleased commits in a component repo, they will not appear here):\nhelm fetch --untar oci://registry.drycc.cc/charts/workflow --version $WORKFLOW_PREV_RELEASE dryccrel changelog global workflow/requirements.lock map.json \u003e changelog-$WORKFLOW_RELEASE.md This master changelog should then be placed into a single gist. The file will also be added to the documentation update PR created in the next step.\nStep 7: Update Documentation Create a new pull request at drycc/workflow that updates version references to the new release. Use git grep $WORKFLOW_PREV_RELEASE to find any references, but be careful not to change CHANGELOG.md.\nPlace the $WORKFLOW_RELEASE master changelog generated in Step 7 in the changelogs directory. Make sure to add a header to the page to make it clear that this is for a Workflow release, e.g.:\n## Workflow v2.16.0 -\u003e v2.17.0 Once the PR has been reviewed and merged, do a component release of drycc/workflow itself. The version number for drycc/workflow should always match the overall Workflow version number.\nStep 8: Close GitHub Milestones Create a pull request at seed-repo to close the release milestone and create the next one. When changes are merged to seed-repo, milestones on all relevant projects will be updated. If there are open issues attached to the milestone, move them to the next upcoming milestone before merging the pull request.\nMilestones map to Drycc Workflow releases in drycc/workflow. These milestones do not correspond to individual component release tags.\nStep 9: Release Workflow CLI Stable Now that the $WORKFLOW_RELEASE version of Workflow CLI has been vetted, we can push stable artifacts based on this version.\nKick off https://ci.drycc.info/job/workflow-cli-build-stable/ with the TAG build parameter of $WORKFLOW_RELEASE and then verify stable artifacts are available and appropriately updated after the job completes:\n$ curl -sfL https://www.drycc.cc/install-cli.sh | bash - $ ./drycc version # (Should show $WORKFLOW_RELEASE) Step 10: Let Everyone Know Let the rest of the team know they can start blogging and tweeting about the new Workflow release. Post a message to the #company channel on Slack. Include a link to the released chart and to the master CHANGELOG:\n@here Drycc Workflow v2.17.0 is now live! Master CHANGELOG: https://drycc.info/docs/workflow/changelogs/v2.17.0/ You’re done with the release. Nice job!\n","categories":"","description":"Drycc's release model allows applications to record and roll back to previous versions.","excerpt":"Drycc's release model allows applications to record and roll back to …","ref":"/docs/roadmap/releases/","tags":"","title":"Releases"},{"body":"For Dockerfile and Buildpack based application deploys via git push, Drycc Workflow identifies users via SSH keys. SSH keys are pushed to the platform and must be unique to each user. Users may have multiple SSH keys as needed.\nGenerate an SSH Key If you do not already have an SSH key or would like to create a new key for Drycc Workflow, generate a new key using ssh-keygen:\n$ ssh-keygen -f ~/.ssh/id_drycc -t rsa Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/admin/.ssh/id_drycc. Your public key has been saved in /Users/admin/.ssh/id_drycc.pub. The key fingerprint is: 3d:ac:1f:f4:83:f7:64:51:c1:7e:7f:80:b6:70:36:c9 admin@plinth-23437.local The key's randomart image is: +--[ RSA 2048]----+ | .. | | ..| | . o. .| | o. E .o.| | S == o..o| | o +. .o| | . o + o .| | . o = | | . . | +-----------------+ $ ssh-add ~/.ssh/id_drycc Identity added: /Users/admin/.ssh/id_drycc (/Users/admin/.ssh/id_drycc) Adding and Removing SSH Keys By publishing the public half of your SSH key to Drycc Workflow the component responsible for receiving git push will be able to authenticate the user and ensure that they have access to the destination application.\n$ drycc keys add ~/.ssh/id_drycc.pub Uploading id_drycc.pub to drycc... done You can always view the keys associated with your user as well:\n$ drycc keys list ID OWNER KEY admin@plinth-23437.local admin ssh-rsa abc AAAAB3Nz...3437.local admin@subgenius.local admin ssh-rsa 123 AAAAB3Nz...nius.local Remove keys by their name:\n$ drycc keys remove admin@plinth-23437.local Removing admin@plinth-23437.local SSH Key... don ","categories":"","description":"Create, manage, and upload SSH keys to Drycc for use in deploying and connecting to applications.","excerpt":"Create, manage, and upload SSH keys to Drycc for use in deploying and …","ref":"/docs/users/ssh-keys/","tags":"","title":"Users and SSH Keys"},{"body":"Application has a Dockerfile, but a Buildpack Deployment Occurs When you deploy an application to Workflow using git push drycc master and the Builder attempts to deploy using the Buildpack workflow, check the following steps:\nAre you deploying the correct project? Are you pushing the correct git branch (git push drycc \u003cbranch\u003e)? Is the Dockerfile in the project’s root directory? Have you committed the Dockerfile to the project? Application was Deployed, but is Failing to Start If you deployed your application but it is failing to start, you can use drycc logs to check why the application fails to boot. Sometimes, the application container may fail to boot without logging any information about the error. This typically occurs when the healthcheck configured for the application fails. In this case, you can start by troubleshooting using kubectl. You can inspect the application’s current state by examining the pod deployed in the application’s namespace. To do that, run\n$ kubectl --namespace=myapp get pods NAME READY STATUS RESTARTS AGE myapp-web-1585713350-3brbo 0/1 CrashLoopBackOff 2 43s We can then describe the pod and determine why it is failing to boot:\nEvents: FirstSeen LastSeen Count From SubobjectPath Type Reason Message --------- -------- ----- ---- ------------- -------- ------ ------- 43s 43s 1 {default-scheduler } Normal Scheduled Successfully assigned myapp-web-1585713350-3brbo to kubernetes-node-1 41s 41s 1 {kubelet kubernetes-node-1} spec.containers{myapp-web} Normal Created Created container with container id b86bd851a61f 41s 41s 1 {kubelet kubernetes-node-1} spec.containers{myapp-web} Normal Started Started container with container id b86bd851a61f 37s 35s 1 {kubelet kubernetes-node-1} spec.containers{myapp-web} Warning Unhealthy Liveness probe failed: Get http://10.246.39.13:8000/healthz: dial tcp 10.246.39.13:8000: getsockopt: connection refused In this instance, we set the healthcheck initial delay timeout for the application at 1 second, which is too aggressive. The application needs some time to set up the API server after the container has booted. By increasing the healthcheck initial delay timeout to 10 seconds, the application is able to boot and is responding correctly.\nSee Custom Health Checks for more information on how to customize the application’s health checks to better suit the application’s needs.\n","categories":"","description":"This document describes how one can troubleshoot common issues when deploying or debugging an application that fails to start or deploy.","excerpt":"This document describes how one can troubleshoot common issues when …","ref":"/docs/troubleshooting/applications/","tags":"","title":"Troubleshooting Applications"},{"body":"Drycc Workflow ships with Storage by default, which provides in-cluster.\nConfiguring off-cluster Object Storage Every component that relies on object storage uses two inputs for configuration:\nYou must use object storage services that are compatible with S3 API Access credentials stored as a Kubernetes secret named storage-creds The helm chart for Drycc Workflow can be easily configured to connect Workflow components to off-cluster object storage. Drycc Workflow currently supports Google Compute Storage, Amazon S3, Azure Blob Storage and OpenStack Swift Storage.\nStep 1: Create storage buckets Create storage buckets for each of the Workflow subsystems: builder, registry, and database.\nDepending on your chosen object storage you may need to provide globally unique bucket names. If you are using S3, use hyphens instead of periods in the bucket names. Using periods in the bucket name will cause an ssl certificate validation issue with S3.\nIf you provide credentials with sufficient access to the underlying storage, Workflow components will create the buckets if they do not exist.\nStep 2: Generate storage credentials If applicable, generate credentials that have create and write access to the storage buckets created in Step 1.\nIf you are using AWS S3 and your Kubernetes nodes are configured with appropriate IAM API keys via InstanceRoles, you do not need to create API credentials. Do, however, validate that the InstanceRole has appropriate permissions to the configured buckets!\nStep 3: Configure Workflow Chart Operators should configure object storage by editing the Helm values file before running helm install. To do so:\nFetch the Helm values by running helm inspect values oci://registry.drycc.cc/charts/workflow \u003e values.yaml Update the global/storage parameter to reference the platform you are using, e.g. s3, azure, gcs, or swift Find the corresponding section for your storage type and provide appropriate values including region, bucket names, and access credentials. Save your changes. !!! note All values will be automatically (base64) encoded except the key_json values under gcs/gcr. These must be base64-encoded. This is to support cleanly passing said encoded text via helm --set cli functionality rather than attempting to pass the raw JSON data. For example:\n$ helm install drycc oci://registry.drycc.cc/charts/workflow \\ --namespace drycc \\ --set global.platformDomain=youdomain.com --set global.storage=gcs,gcs.key_json=\"$(cat /path/to/gcs_creds.json | base64 -w 0)\" You are now ready to run helm install drycc oci://registry.drycc.cc/charts/workflow --namespace drycc -f values.yaml using your desired object storage.\n","categories":"","description":"A variety of Drycc Workflow components rely on an object storage system to do their work including storing application slugs, Container images and database logs.","excerpt":"A variety of Drycc Workflow components rely on an object storage …","ref":"/docs/installing-workflow/configuring-object-storage/","tags":"","title":"Configuring Object Storage"},{"body":"Drycc supports deploying applications via an existing Docker Image. This is useful for integrating Drycc into Docker-based CI/CD pipelines.\nPrepare an Application Start by cloning an example application:\n$ git clone https://github.com/drycc/example-dockerfile-http.git $ cd example-dockerfile-http Next use your local docker client to build the image and push it to DockerHub.\n$ docker build -t \u003cusername\u003e/example-dockerfile-http . $ docker push \u003cusername\u003e/example-dockerfile-http Docker Image Requirements In order to deploy Docker images, they must conform to the following requirements:\nThe Dockerfile must use the EXPOSE directive to expose exactly one port. That port must be listening for an HTTP connection. The Dockerfile must use the CMD directive to define the default process that will run within the container. The Docker image must contain bash to run processes. !!! note Note that if you are using a private registry of any kind (gcr or other) the application environment must include a $PORT config variable that matches the EXPOSE’d port, example: drycc config set PORT=5000. See Configuring Registry for more info.\nCreate an Application Use drycc create to create an application on the controller.\n$ mkdir -p /tmp/example-dockerfile-http \u0026\u0026 cd /tmp/example-dockerfile-http $ drycc create example-dockerfile-http --no-remote Creating application... done, created example-dockerfile-http !!! note For all commands except for drycc create, the drycc client uses the name of the current directory as the app name if you don’t specify it explicitly with --app.\nDeploy the Application Use drycc pull to deploy your application from DockerHub or a public registry.\n$ drycc pull \u003cusername\u003e/example-dockerfile-http:latest Creating build... done, v2 $ curl -s http://example-dockerfile-http.local3.dryccapp.com Powered by Drycc Because you are deploying a Docker image, the web process type is automatically scaled to 1 on first deploy.\nUse drycc scale web=3 to increase web processes to 3, for example. Scaling a process type directly changes the number of Containers running that process.\nPrivate Registry To deploy Docker images from a private registry or from a private repository, use drycc registry to attach credentials to your application. These credentials are the same as you’d use when running docker login at your private registry.\nTo deploy private Docker images, take the following steps:\nGather the username and password for the registry, such as a Quay.io Robot Account or a GCR.io Long Lived Token Run drycc registry set \u003cthe-user\u003e \u003csecret\u003e -a \u003capplication-name\u003e Now perform drycc pull as normal, against an image in the private registry When using a GCR.io Long Lived Token, the JSON blob will have to be compacted first using a tool like jq and then used in the password field in drycc registry set. For the username, use _json_key. For example:\ndrycc registry set _json_key \"$(cat google_cloud_cred.json | jq -c .)\" When using a private registry the docker images are no longer pulled into the Drycc Internal Registry via the Drycc Workflow Controller but rather is managed by Kubernetes. This will increase security and overall speed, however the application port information can no longer be discovered. Instead the application port information can be set via drycc config set PORT=80 prior to setting the registry information.\n!!! note Currently GCR.io and ECR in short lived auth token mode are not supported.\n","categories":"","description":"Deploy an application using a container image stored in your Drycc Container Registry.","excerpt":"Deploy an application using a container image stored in your Drycc …","ref":"/docs/applications/using-container-images/","tags":"","title":"Using Docker Images"},{"body":"What’s New New! healthcheck field in configuration, deprecates the HEALTHCHECK_* environment variables.\nNew! Unsetting a configuration variable that does not exist will return a 422.\nNew! Creating an identical sequential release returns a 409 rather than create a no-op release.\nAuthentication Register a New User Example Request:\nPOST /v2/auth/register/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json { \"username\": \"test\", \"password\": \"opensesame\", \"email\": \"test@example.com\" } Optional Parameters:\n{ \"first_name\": \"test\", \"last_name\": \"testerson\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Log in Example Request:\nPOST /v2/auth/login/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json {\"username\": \"test\", \"password\": \"opensesame\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"token\": \"abc123\"} Cancel Account Example Request:\nDELETE /v2/auth/cancel/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Regenerate Token note\nThis command could require administrative privileges\nExample Request:\nPOST /v2/auth/tokens/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional Parameters:\n{ \"username\" : \"test\" \"all\" : \"true\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"token\": \"abc123\"} Change Password Example Request:\nPOST /v2/auth/passwd/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"password\": \"foo\", \"new_password\": \"bar\" } Optional parameters:\n{\"username\": \"testuser\"} note\nUsing the username parameter requires administrative privileges and makes the password parameter optional.\nExample Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Applications List all Applications Example Request:\nGET /v2/apps HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Create an Application Example Request:\nPOST /v2/apps/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 Optional parameters:\n{\"id\": \"example-go\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Destroy an Application Example Request:\nDELETE /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 List Application Details Example Request:\nGET /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Update Application Details Example Request:\nPOST /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional parameters:\n{ \"owner\": \"test\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 1.8.0 Content-Type: application/json Retrieve Application Logs Example Request:\nGET /v2/apps/example-go/logs/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional URL Query Parameters:\n?log_lines= Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: text/plain \"16:51:14 drycc[api]: test created initial release\\n\" Run one-off Commands POST /v2/apps/example-go/run/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"command\": \"echo hi\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"exit_code\": 0, \"output\": \"hi\\n\"} Certificates List all Certificates Example Request:\nGET /v2/certs HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } ] } Get Certificate Details Example Request:\nGET /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Create Certificate Example Request:\nPOST /v2/certs/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 { \"name\": \"foo\" \"certificate\": \"-----BEGIN CERTIFICATE-----\", \"key\": \"-----BEGIN RSA PRIVATE KEY-----\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Destroy a Certificate Example Request:\nDELETE /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Attach a Domain to a Certificate Example Request:\nPOST /v2/certs/foo/domain/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"domain\": \"test.com\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Remove a Domain from a Certificate Example Request:\nDELETE /v2/certs/foo/domain/test.com/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Pods List all Pods Example Request:\nGET /v2/apps/example-go/pods/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } List all Pods by Type Example Request:\nGET /v2/apps/example-go/pods/web/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } Restart All Pods Example Request:\nPOST /v2/apps/example-go/pods/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type Example Request:\nPOST /v2/apps/example-go/pods/web/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type and Name Example Request:\nPOST /v2/apps/example-go/pods/go-v2-web-atots/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Scale Pods Example Request:\nPOST /v2/apps/example-go/scale/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"web\": 3} Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Configuration List Application Configuration Example Request:\nGET /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create new Config Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": \"world\", \"PLATFORM\": \"drycc\"}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v3\", \"HELLO\": \"world\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Unset Config Variable Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": null}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v4\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Domains List Application Domains Example Request:\nGET /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } ] } Add Domain Example Request:\nPOST /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {'domain': 'example.example.com'} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } Remove Domain Example Request:\nDELETE /v2/apps/example-go/domains/example.example.com HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Builds List Application Builds Example Request:\nGET /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"FROM drycc/slugrunner RUN mkdir -p /app WORKDIR /app ENTRYPOINT [\\\"/runner/init\\\"] ADD slug.tgz /app ENV GIT_SHA 060da68f654e75fac06dbedd1995d5f8ad9084db\", \"image\": \"example-go\", \"owner\": \"test\", \"procfile\": { \"web\": \"example-go\" }, \"sha\": \"060da68f\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create Application Build Example Request:\nPOST /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"image\": \"drycc/example-go:latest\"} Optional Parameters:\n{ \"procfile\": { \"web\": \"./cmd\" } } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"\", \"image\": \"drycc/example-go:latest\", \"owner\": \"test\", \"procfile\": {}, \"sha\": \"\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Releases List Application Releases Example Request:\nGET /v2/apps/example-go/releases/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"ed637ceb-5d32-44bd-9406-d326a777a513\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test changed nothing\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 3 }, { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test deployed 060da68\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 2 }, { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } ] } List Release Details Example Request:\nGET /v2/apps/example-go/releases/v2/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } Rollback Release Example Request:\nPOST /v2/apps/example-go/releases/rollback/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"version\": 1} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json {\"version\": 5} Keys List Keys Example Request:\nGET /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"test@example.com\", \"owner\": \"test\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Add Key to User Example Request:\nPOST /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"id\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example\", \"owner\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Remove Key from User Example Request:\nDELETE /v2/keys/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Permissions List Application Permissions note\nThis does not include the app owner.\nExample Request:\nGET /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"users\": [ \"test\", \"foo\" ] } Create Application Permission Example Request:\nPOST /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Remove Application Permission Example Request:\nDELETE /v2/apps/example-go/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 List Administrators Example Request:\nGET /v2/admin/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 2, \"next\": null \"previous\": null, \"results\": [ { \"username\": \"test\", \"is_superuser\": true }, { \"username\": \"foo\", \"is_superuser\": true } ] } Grant User Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nPOST /v2/admin/perms HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Remove User’s Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nDELETE /v2/admin/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Users List all users note\nThis command requires administrative privileges\nExample Request:\nGET /v2/users HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.1 DRYCC_PLATFORM_VERSION: 2.1.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } ] } ","categories":"","description":"This is the v2.1 REST API for the Controller.","excerpt":"This is the v2.1 REST API for the Controller.","ref":"/docs/reference-guide/controller-api-v2-1/","tags":"","title":"Controller API v2.1"},{"body":"Determine Your Host and Hostname Values Drycc workflow requires a wildcard DNS record to dynamically map app names to the router.\nUser should already have DNS set up pointing to their known host. The $hostname value can be calculated by prepending drycc. to the value set in global.platformDomain.\nLogin to Workflow Workflow use the passport component to create and authorize users. If you already have an account, use drycc login to authenticate against the Drycc Workflow API.\n$ drycc login http://drycc.example.com Opening browser to http://drycc.example.com/v2/login/drycc/?key=4ccc81ee2dce4349ad5261ceffe72c71 Waiting for login... .o.Logged in as admin Configuration file written to /root/.drycc/client.json Or you can login with username and password\n$ drycc login http://drycc.example.com --username=demo --password=demo Configuration file written to /root/.drycc/client.json Deploy an Application Drycc Workflow supports three different types of applications, Buildpacks, Dockerfiles and Container Images. Our first application will be a simple Container Image-based application, so you don’t have to wrestle with checking out code.\nRun drycc create to create a new application on Drycc Workflow. If you do not specify a name for your application, Workflow automatically generates a friendly (and sometimes funny) name.\n$ drycc create --no-remote Creating Application... done, created proper-barbecue If you want to add a git remote for this app later, use `drycc git remote -a proper-barbecue` Our application has been created and named proper-barbecue. As with the drycc hostname, any HTTP traffic to proper-barbecue will be automatically routed to your application pods by the edge router.\nLet’s use the CLI to tell the platform to deploy an application and then use curl to send a request to the app:\n$ drycc pull drycc/example-go -a proper-barbecue Creating build... done $ curl http://proper-barbecue.$hostname Powered by Drycc !!! note If you see a 404 error, make sure you specified your application name with -a \u003cappname\u003e!\nWorkflow’s edge router knows all about application names and automatically sends traffic to the right application. The router sends traffic for proper-barbecue.104.197.125.75.nip.io to your app, just like drycc.104.197.125.75.nip.io was sent to the Workflow API service.\nChange Application Configuration Next, let’s change some configuration using the CLI. Our example app is built to read configuration from the environment. By using drycc config set we can change how the application behaves:\n$ drycc config set POWERED_BY=\"Container Images + Kubernetes\" -a proper-barbecue Creating config... done Behind the scenes, Workflow creates a new release for your application and uses Kubernetes to provide a zero-downtime rolling deploy to the new release!\nValidate that our configuration change has worked:\n$ curl http://proper-barbecue.104.197.125.75.nip.io Powered by Container Images + Kubernetes Scale Your Application Last, let’s scale our application by adding more application processes. Using the CLI you can easily add and remove additional processes to service requests:\n$ drycc scale web=2 -a proper-barbecue Scaling processes... but first, coffee! done in 36s NAME RELEASE STATE PTYPE STARTED proper-barbecue-v18-web-rk644 v18 up web 2023-12-08T03:09:25UTC proper-barbecue-v18-web-0ag04 v18 up web 2023-12-08T03:09:25UTC Congratulations! You have deployed, configured, and scaled your first application using Drycc Workflow.\nGoing Further There is a lot more you can do with Drycc Workflow, play around with the CLI:\n!!! important In order to have permission to push an app you must add a SSH key to your user on the Drycc Workflow. For more information, please check Users and SSH Keys and Troubleshooting Workflow.\nRoll back to a previous release with drycc rollback -a proper-barbecue See application logs with drycc logs -a proper-barbecue Try one of our other example applications like: drycc/ruby-getting-started drycc/python-getting-started drycc/php-getting-started Read about using application Buildpacks or Dockerfiles Join our #community slack channel and meet the team! ","categories":"","description":"Deploy an application using drycc cli.","excerpt":"Deploy an application using drycc cli.","ref":"/docs/quickstart/deploy-an-app/","tags":"","title":"Deploy Your First App"},{"body":"We’re working with Quickwit to bring you an application log cluster and search interface.\nArchitecture Diagram ┌───────────┐ ┌───────────┐ │ Container │ │ Grafana │ └───────────┘ └───────────┘ │ ^ log | │ | ˅ │ ┌───────────┐ ┌───────────┐ │ Fluentbit │─────otel/grpc────\u003e│ Quickwit │ └───────────┘ └───────────┘ Default Configuration Fluent Bit is based in a pluggable architecture where different plugins plays a major role in the data pipeline, more than 70 built-in plugins available. Please refer to charts values.yaml for specific configurations.\n","categories":"","description":"Logs are a stream of time-stamped events aggregated from the output streams of all your app’s running processes. Retrieve, filter, or use syslog drains.","excerpt":"Logs are a stream of time-stamped events aggregated from the output …","ref":"/docs/managing-workflow/platform-logging/","tags":"","title":"Platform Logging"},{"body":"Each Drycc component includes its own suite of style checks, unit tests, and black-box type functional tests.\nIntegration tests verify the behavior of the Drycc components together as a system and are provided separately by the drycc/workflow-e2e project.\nGitHub pull requests for all Drycc components are tested automatically by the Travis CI continuous integration system. Contributors should run the same tests locally before proposing any changes to the Drycc codebase.\nSet Up the Environment Successfully executing the unit and functional tests for any Drycc component requires that the Development Environment is set up first.\nRun the Tests The style checks, unit tests, and functional tests for each component can all be executed via make targets:\nTo execute style checks:\n$ make test-style To execute unit tests:\n$ make test-unit To execute functional tests:\n$ make test-functional To execute style checks, unit tests, and functional tests all in one shot:\n$ make test To execute integration tests, refer to drycc/workflow-e2e documentation.\n","categories":"","description":"Each Drycc component is one among an ecosystem of such components - many of which integrate with one another - which makes testing each component thoroughly a matter of paramount importance.","excerpt":"Each Drycc component is one among an ecosystem of such components - …","ref":"/docs/contribution-guidelines/testing/","tags":"","title":"Testing Drycc"},{"body":"","categories":"","description":"In this tutorial, you'll learn how to manage users.\n","excerpt":"In this tutorial, you'll learn how to manage users.\n","ref":"/docs/users/","tags":"","title":"Users"},{"body":"","categories":"","description":"A simple and scalable cloud platform for all developer needs.\n","excerpt":"A simple and scalable cloud platform for all developer needs.\n","ref":"/docs/applications/","tags":"","title":"Applications"},{"body":"Configuring Postgres By default, Drycc Workflow ships with the database component, which provides an in-cluster PostgreSQL database backed up to in-cluster or off-cluster object storage. Currently, for object storage, which is utilized by several Workflow components, only off-cluster solutions such as S3 or GCS are recommended in production environments. Experience has shown that many operators already opting for off-cluster object storage similarly prefer to host Postgres off-cluster as well, using Amazon RDS or similar. When excercising both options, a Workflow installation becomes entirely stateless, and is thus restored or rebuilt with greater ease should the need ever arise.\nProvisioning off-cluster Postgres First, provision a PostgreSQL RDBMS using the cloud provider or other infrastructure of your choice. Take care to ensure that security groups or other firewall rules will permit connectivity from your Kubernetes worker nodes, any of which may play host to the Workflow controller component.\nTake note of the following:\nThe hostname or public IP of your PostgreSQL RDBMS The port on which your PostgreSQL RDBMS runs– typically 5432 Within the off-cluster RDBMS, manually provision the following:\nA database user (take note of the username and password) A database owned by that user (take note of its name) If you are able to log into the RDBMS as a superuser or a user with appropriate permissions, this process will typically look like this:\n$ psql -h \u003chost\u003e -p \u003cport\u003e -d postgres -U \u003c\"postgres\" or your own username\u003e \u003e create user \u003cdrycc username; typically \"drycc\"\u003e with password '\u003cpassword\u003e'; \u003e create database \u003cdatabase name; typically \"drycc\"\u003e with owner \u003cdrycc username\u003e; \u003e \\q Configuring Workflow The Helm chart for Drycc Workflow can be easily configured to connect the Workflow controller component to an off-cluster PostgreSQL database.\nStep 1: If you haven’t already fetched the values, do so with helm inspect values drycc/workflow \u003e values.yaml Step 2: Update database connection details by modifying values.yaml: Update the database.enabled parameter to false. Update the values in the [database] configuration section to properly reflect all connection details. Update the values in the [controller] configuration section to properly reflect platformDomain details. Save your changes. Note: you do not need to (and must not) base64 encode any values, as the Helm chart will automatically handle encoding as necessary. You are now ready to helm install drycc oci://registry.drycc.cc/charts/workflow --namespace drycc -f values.yaml as usual.\n","categories":"","description":"Drycc Workflow's controller and passport component rely on a PostgreSQL database to store platform state.","excerpt":"Drycc Workflow's controller and passport component rely on a …","ref":"/docs/installing-workflow/configuring-postgres/","tags":"","title":"Configuring Postgres"},{"body":"Drycc Workflow ships with a registry component by default, which provides an in-cluster Container registry backed by the platform-configured object storage. Operators might want to use an off-cluster registry for performance or security reasons.\nConfiguring Off-Cluster Private Registry Every component that relies on a registry uses two inputs for configuration:\nRegistry Location environment variable named DRYCC_REGISTRY_LOCATION Access credentials stored as a Kubernetes secret named registry-secret The Helm chart for Drycc Workflow can be easily configured to connect Workflow components to off-cluster registry. Drycc Workflow supports external registries which provide either short-lived tokens that are valid only for a specified amount of time or long-lived tokens (basic username/password) which are valid forever for authenticating to them. For those registries which provide short lived tokens for authentication, Drycc Workflow will generate and refresh them such that the deployed apps will only have access to the short-lived tokens and not to the actual credentials for the registries.\nWhen using a private registry the container images are no longer pulled by Drycc Workflow Controller but rather are managed by Kubernetes. This will increase security and overall speed, however the port information can no longer be discovered. Instead the port information can be set via drycc config set PORT=\u003cport\u003e prior to deploying the application.\nDrycc Workflow currently supports:\noff-cluster: Any provider which supports long-lived username/password authentication, such as Azure Container Registry, Docker Hub, quay.io, or a self-hosted Container registry. Configuration If you haven’t already fetched the values file, do so with helm inspect values drycc/workflow \u003e values.yaml Update registry location details by modifying the values file: * Update the registry.enabled parameter to reference the registry location you are using: true, false * Update the values in the section which corresponds to your registry location type. You are now ready to helm install drycc oci://registry.drycc.cc/charts/workflow --namespace drycc -f values.yaml using your desired registry.\nExamples Here we show how the relevant parts of the fetched values.yaml file might look like after configuring for a particular off-cluster registry:\nAzure Container Registry (ACR) After following the docs and creating a registry, e.g. myregistry, with its corresponding login server of myregistry.azurecr.io, the following values should be supplied:\nbuilder: registryHost: \"myregistry.azurecr.io\" registryUsername: \"xxxx\" registryPassword: \"xxxx\" registryOrganization: \"xxxx\" registry: enabled: false Note: The mandatory organization field (here myorg) will be created as an ACR repository if it does not already exist.\nQuay.io builder: registryHost: \"quay.io\" registryUsername: \"xxxx\" registryPassword: \"xxxx\" registryOrganization: \"xxxx\" registry: enabled: false ","categories":"","description":"Drycc Workflow's builder component relies on a registry for storing application container images.","excerpt":"Drycc Workflow's builder component relies on a registry for storing …","ref":"/docs/installing-workflow/configuring-registry/","tags":"","title":"Configuring Registry"},{"body":"What’s New New! /v2/auth/whoami endpoint\nAuthentication Register a New User Example Request:\nPOST /v2/auth/register/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json { \"username\": \"test\", \"password\": \"opensesame\", \"email\": \"test@example.com\" } Optional Parameters:\n{ \"first_name\": \"test\", \"last_name\": \"testerson\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Log in Example Request:\nPOST /v2/auth/login/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json {\"username\": \"test\", \"password\": \"opensesame\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json {\"token\": \"abc123\"} Cancel Account Example Request:\nDELETE /v2/auth/cancel/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Who Am I Example Request:\nGET /v2/auth/whoami/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Regenerate Token note\nThis command could require administrative privileges\nExample Request:\nPOST /v2/auth/tokens/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional Parameters:\n{ \"username\" : \"test\" \"all\" : \"true\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json {\"token\": \"abc123\"} Change Password Example Request:\nPOST /v2/auth/passwd/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"password\": \"foo\", \"new_password\": \"bar\" } Optional parameters:\n{\"username\": \"testuser\"} note\nUsing the username parameter requires administrative privileges and makes the password parameter optional.\nExample Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Applications List all Applications Example Request:\nGET /v2/apps HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Create an Application Example Request:\nPOST /v2/apps/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 Optional parameters:\n{\"id\": \"example-go\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Destroy an Application Example Request:\nDELETE /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 List Application Details Example Request:\nGET /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Update Application Details Example Request:\nPOST /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional parameters:\n{ \"owner\": \"test\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 1.8.0 Content-Type: application/json Retrieve Application Logs Example Request:\nGET /v2/apps/example-go/logs/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional URL Query Parameters:\n?log_lines= Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: text/plain \"16:51:14 drycc[api]: test created initial release\\n\" Run one-off Commands POST /v2/apps/example-go/run/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"command\": \"echo hi\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json {\"exit_code\": 0, \"output\": \"hi\\n\"} Certificates List all Certificates Example Request:\nGET /v2/certs HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } ] } Get Certificate Details Example Request:\nGET /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Create Certificate Example Request:\nPOST /v2/certs/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 { \"name\": \"foo\" \"certificate\": \"-----BEGIN CERTIFICATE-----\", \"key\": \"-----BEGIN RSA PRIVATE KEY-----\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22T22:24:20Z\", \"updated\": \"2016-06-22T22:24:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Destroy a Certificate Example Request:\nDELETE /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Attach a Domain to a Certificate Example Request:\nPOST /v2/certs/foo/domain/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"domain\": \"test.com\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Remove a Domain from a Certificate Example Request:\nDELETE /v2/certs/foo/domain/test.com/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Pods List all Pods Example Request:\nGET /v2/apps/example-go/pods/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } List all Pods by Type Example Request:\nGET /v2/apps/example-go/pods/web/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } Restart All Pods Example Request:\nPOST /v2/apps/example-go/pods/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type Example Request:\nPOST /v2/apps/example-go/pods/web/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type and Name Example Request:\nPOST /v2/apps/example-go/pods/go-v2-web-atots/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Scale Pods Example Request:\nPOST /v2/apps/example-go/scale/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"web\": 3} Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Configuration List Application Configuration Example Request:\nGET /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create new Config Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": \"world\", \"PLATFORM\": \"drycc\"}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v3\", \"HELLO\": \"world\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Unset Config Variable Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": null}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v4\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Domains List Application Domains Example Request:\nGET /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } ] } Add Domain Example Request:\nPOST /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {'domain': 'example.example.com'} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } Remove Domain Example Request:\nDELETE /v2/apps/example-go/domains/example.example.com HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Builds List Application Builds Example Request:\nGET /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"FROM drycc/slugrunner RUN mkdir -p /app WORKDIR /app ENTRYPOINT [\\\"/runner/init\\\"] ADD slug.tgz /app ENV GIT_SHA 060da68f654e75fac06dbedd1995d5f8ad9084db\", \"image\": \"example-go\", \"owner\": \"test\", \"procfile\": { \"web\": \"example-go\" }, \"sha\": \"060da68f\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create Application Build Example Request:\nPOST /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"image\": \"drycc/example-go:latest\"} Optional Parameters:\n{ \"procfile\": { \"web\": \"./cmd\" } } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"\", \"image\": \"drycc/example-go:latest\", \"owner\": \"test\", \"procfile\": {}, \"sha\": \"\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Releases List Application Releases Example Request:\nGET /v2/apps/example-go/releases/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"ed637ceb-5d32-44bd-9406-d326a777a513\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test changed nothing\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 3 }, { \"app\": \"example-go\", \"build\": \"202d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test deployed 060da68\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 2 }, { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } ] } List Release Details Example Request:\nGET /v2/apps/example-go/releases/v2/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } Rollback Release Example Request:\nPOST /v2/apps/example-go/releases/rollback/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"version\": 1} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json {\"version\": 5} Keys List Keys Example Request:\nGET /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"test@example.com\", \"owner\": \"test\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Add Key to User Example Request:\nPOST /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"id\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example\", \"owner\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Remove Key from User Example Request:\nDELETE /v2/keys/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Permissions List Application Permissions note\nThis does not include the app owner.\nExample Request:\nGET /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"users\": [ \"test\", \"foo\" ] } Create Application Permission Example Request:\nPOST /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Remove Application Permission Example Request:\nDELETE /v2/apps/example-go/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 List Administrators Example Request:\nGET /v2/admin/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 2, \"next\": null \"previous\": null, \"results\": [ { \"username\": \"test\", \"is_superuser\": true }, { \"username\": \"foo\", \"is_superuser\": true } ] } Grant User Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nPOST /v2/admin/perms HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Remove User’s Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nDELETE /v2/admin/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Users List all users note\nThis command requires administrative privileges\nExample Request:\nGET /v2/users HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.2 DRYCC_PLATFORM_VERSION: 2.2.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } ] } ","categories":"","description":"This is the v2.2 REST API for the Controller.","excerpt":"This is the v2.2 REST API for the Controller.","ref":"/docs/reference-guide/controller-api-v2-2/","tags":"","title":"Controller API v2.2"},{"body":"Drycc Workflow manages your application as a set of processes that can be named, scaled and configured according to their role. This gives you the flexibility to easily manage the different facets of your application. For example, you may have web-facing processes that handle HTTP traffic, background worker processes that do async work, and a helper process that streams from the Twitter API.\nBy using a Procfile, either checked in to your application or provided via the CLI you can specify the name of the type and the application command that should run. To spawn other process types, use drycc scale \u003cptype\u003e=\u003cn\u003e to scale those types accordingly.\nDefault Process Types In the absence of a Procfile, a single, default process type is assumed for each application.\nApplications built using Buildpacks via git push implicitly receive a web process type, which starts the application server. Rails 4, for example, has the following process type:\nweb: bundle exec rails server -p $PORT All applications utilizing Dockerfiles have an implied web process type, which runs the Dockerfile’s CMD directive unmodified:\n$ cat Dockerfile FROM centos:latest COPY . /app WORKDIR /app CMD python -m SimpleHTTPServer 5000 EXPOSE 5000 For the above Dockerfile-based application, the web process type would run the Container CMD of python -m SimpleHTTPServer 5000.\nApplications utilizing remote Container images, a web process type is also implied, and runs the CMD specified in the Container image.\n!!! note The web process type is special as they’is the default process type that will receive HTTP traffic from Workflow’s routers. Other process types can be named arbitrarily.\nDeclaring Process Types If you use Buildpack or Dockerfile builds and want to override or specify additional process types, simply include a file named Procfile in the root of your application’s source tree.\nThe format of a Procfile is one process type per line, with each line containing the command to invoke:\n\u003cprocess type\u003e: \u003ccommand\u003e The syntax is defined as:\n\u003cprocess type\u003e – a lowercase alphanumeric string, is a name for your command, such as web, worker, urgentworker, clock, etc. \u003ccommand\u003e – a command line to launch the process, such as rake jobs:work. This example Procfile specifies two types, web and sleeper. The web process launches a web server on port 5000 and a simple process which sleeps for 900 seconds and exits.\n$ cat Procfile web: bundle exec ruby web.rb -p ${PORT:-5000} sleeper: sleep 900 If you are using remote Container images, you may define process types by either running drycc pull with a Procfile in your working directory, or by passing a stringified Procfile to the --procfile CLI option.\nFor example, passing process types inline:\n$ drycc pull drycc/example-go:latest --procfile=\"web: /app/bin/boot\" Read a Procfile in another directory:\n$ drycc pull drycc/example-go:latest --procfile=\"$(cat deploy/Procfile)\" Or via a Procfile located in your current, working directory:\n$ cat Procfile web: /bin/boot sleeper: echo \"sleeping\"; sleep 900 $ drycc pull -a steely-mainsail drycc/example-go Creating build... done $ drycc scale sleeper=1 -a steely-mainsail Scaling processes... but first, coffee! done in 0s NAME RELEASE STATE PTYPE READY RESTARTS STARTED steely-mainsail-sleeper-76c45b967c-4qm6w v3 up sleeper 1/1 0 2023-12-08T02:25:00UTC steely-mainsail-web-c4f44c4b4-7p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC !!! note Only process types of web will be scaled to 1 automatically. If you have additional process types remember to scale the process counts after creation.\nTo remove a process type simply scale it to 0:\n$ drycc scale sleeper=0 -a steely-mainsail Scaling processes... but first, coffee! done in 3s NAME RELEASE STATE PTYPE READY RESTARTS STARTED steely-mainsail-web-c4f44c4b4-7p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC Scaling Processes Applications deployed on Drycc Workflow scale out via the process model. Use drycc scale to control the number of containers that power your app.\n$ drycc scale web=5 -a iciest-waggoner Scaling processes... but first, coffee! done in 3s NAME RELEASE STATE PTYPE READY RESTARTS STARTED iciest-waggoner-web-c4f44c4b4-7p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC iciest-waggoner-web-c4f44c4b4-8p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC iciest-waggoner-web-c4f44c4b4-9p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC iciest-waggoner-web-c4f44c4b4-1p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC iciest-waggoner-web-c4f44c4b4-2p7dh v3 up web 1/1 0 2023-12-08T02:25:00UTC If you have multiple process types for your application you may scale the process count for each type separately. For example, this allows you to manage web process independently from background workers. For more information on process types see our documentation for Managing App Processes.\nIn this example, we are scaling the process type web to 5 but leaving the process type background with one worker.\n$ drycc scale web=5 Scaling processes... but first, coffee! done in 4s NAME RELEASE STATE PTYPE READY RESTARTS STARTED scenic-icehouse-web-3291896318-7lord v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-jn957 v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-rsekj v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-vwhnh v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-vokg7 v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-vokg7 v3 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-background-3291896318-yf8kh v3 up web 1/1 0 2023-12-08T02:25:00UTC Scaling a process down, by reducing the process count, sends a TERM signal to the processes, followed by a SIGKILL if they have not exited within 30 seconds. Depending on your application, scaling down may interrupt long-running HTTP client connections.\nFor example, scaling from 5 processes to 3:\n$ drycc scale web=3 Scaling processes... but first, coffee! done in 1s NAME RELEASE STATE PTYPE READY RESTARTS STARTED scenic-icehouse-web-3291896318-vwhnh v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-vokg7 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-vokg9 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-background-3291896318-yf8kh v2 up web 1/1 0 2023-12-08T02:25:00UTC Autoscale Autoscale allows adding a minimum and maximum number of pods on a per process type basis. This is accomplished by specifying a target CPU usage across all available pods.\nThis feature is built on top of Horizontal Pod Autoscaling in Kubernetes or HPA for short.\n!!! note This is an alpha feature. It is recommended to be on the latest Kubernetes when using this feature.\n$ drycc autoscale set web --min=3 --max=8 --cpu-percent=75 Applying autoscale settings for process type web on scenic-icehouse... done And then review the scaling rule that was created for web\n$ drycc autoscale list PTYPE PERCENT MIN MAX web 75 3 8 Remove scaling rule\n$ drycc autoscale unset web Removing autoscale for process type web on scenic-icehouse... done For autoscaling to work CPU requests have to be specified on each application Pod (can be done via drycc limits --cpu). This allows the autoscale policies to do the appropriate calculations and make decisions on when to scale up and down.\nScale up can only happen if there was no rescaling within the last 3 minutes. Scale down will wait for 5 minutes from the last rescaling. That information and more can be found at HPA algorithm page.\nFetch a container logs of the application List the containers:\n$ drycc ps NAME RELEASE STATE PTYPEE READY RESTARTS STARTED python-getting-started-web-69b7d4bfdc-kl4xf v2 up web 1/1 0 2023-12-08T02:25:00UTC === python-getting-started Processes --- web: python-getting-started-web-69b7d4bfdc-kl4xf up (v2) fetch the container logs:\n$ drycc ps logs -f python-getting-started-web-69b7d4bfdc-kl4xf [2024-05-24 07:14:39 +0000] [1] [INFO] Starting gunicorn 20.1.0 [2024-05-24 07:14:39 +0000] [1] [INFO] Listening at: http://0.0.0.0:8000 (1) [2024-05-24 07:14:39 +0000] [1] [INFO] Using worker: gevent [2024-05-24 07:14:39 +0000] [8] [INFO] Booting worker with pid: 8 [2024-05-24 07:14:39 +0000] [9] [INFO] Booting worker with pid: 9 [2024-05-24 07:14:39 +0000] [10] [INFO] Booting worker with pid: 10 [2024-05-24 07:14:39 +0000] [11] [INFO] Booting worker with pid: 11 Get a container info of the application List the containers:\n$ drycc ps describe python-getting-started-web-69b7d4bfdc-kl4xf Container: python-getting-started-web Image: drycc/python-getting-started:latest Command: Args: - gunicorn - -c - gunicorn_config.py - helloworld.wsgi:application State: running startedAt: \"2024-05-24T07:14:39Z\" Ready: true Restart Count: 0 delete a container of the application Delete the containers. Due to the set number of replicas, a new container will be launched to meet the quantity requirement.\n$ drycc ps delete python-getting-started-web-69b7d4bfdc-kl4xf Deleting python-getting-started-web-69b7d4bfdc-kl4xf from python-getting-started... done Get a Shell to a Running Container Verify that the container is running:\n$ drycc ps NAME RELEASE STATE PTYPEE READY RESTARTS STARTED python-getting-started-web-69b7d4bfdc-kl4xf v2 up web 1/1 0 2023-12-08T02:25:00UTC === python-getting-started Processes --- web: python-getting-started-web-69b7d4bfdc-kl4xf up (v2) Get a shell to the running container:\n$ drycc ps exec python-getting-started-web-69b7d4bfdc-kl4xf -it -- bash In your shell, list the root directory:\n# Run this inside the container ls / Running individual commands in a container\n$ drycc ps exec python-getting-started-web-69b7d4bfdc-kl4xf -- date Use “drycc ps –help” for a list of global command-line (applies to all commands).\nRestarting an Application Processes If you need to restart an application process, you may use drycc pts restart. Behind the scenes, Drycc Workflow instructs Kubernetes to terminate the old process and launch a new one in its place.\n$ drycc ps NAME RELEASE STATE PTYPE READY RESTARTS STARTED scenic-icehouse-web-3291896318-vokg7 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-rsekj v2 up web 1/1 0 2023-12-08T02:50:21UTC scenic-icehouse-web-3291896318-vokg7 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-background-3291896318-yf8kh v2 up web 1/1 0 2023-12-08T02:25:00UTC $ drycc pts restart scenic-icehouse-background NAME RELEASE STATE PTYPE READY RESTARTS STARTED scenic-icehouse-web-3291896318-vokg7 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-web-3291896318-rsekj v2 up web 1/1 0 2023-12-08T02:50:21UTC scenic-icehouse-web-3291896318-vokg7 v2 up web 1/1 0 2023-12-08T02:25:00UTC scenic-icehouse-background-3291896318-yf8kh v2 starting web 1/1 0 2023-12-08T02:25:00UTC Notice that the process name has changed from scenic-icehouse-background-3291896318-yf8kh to scenic-icehouse-background-3291896318-yd87g. In a multi-node Kubernetes cluster, this may also have the effect of scheduling the Pod to a new node.\nUse “drycc pts –help” for a list of pts command-line (process types info).\nList an Application Process Types $ drycc pts NAME RELEASE READY UP-TO-DATE AVAILABLE GARBAGE STARTED web v2 3/3 1 1 true 2023-12-08T02:25:00UTC background v2 1/1 1 1 false 2023-12-08T02:25:00UTC Clean a Process Types Clean up non-existent ptypes, it is usually executed automatically when autodeploy is set to true.\n$ drycc pts clean background Get deployment info of the application process type $ drycc pts describe web Container: python-getting-started-web Image: drycc/python-getting-started:latest Command: Args: - gunicorn - -c - gunicorn_config.py - helloworld.wsgi:application Limits: cpu 1 ephemeral-storage 2Gi memory 1Gi Liveness: http-get headers=[] path=/geo/ port=8000 delay=120s timeout=10s period=20s #success=1 #failure=3 Readiness: http-get headers=[] path=/geo/ port=8000 delay=120s timeout=10s period=20s #success=1 #failure=3 ","categories":"","description":"A Procfile is a list of process types in an app. Each process type declares a command that is executed when a container of that process type is started.","excerpt":"A Procfile is a list of process types in an app. Each process type …","ref":"/docs/applications/managing-app-processes/","tags":"","title":"Managing Application Processes"},{"body":"","categories":"","description":"Managing Workflow using the kubectl.\n","excerpt":"Managing Workflow using the kubectl.\n","ref":"/docs/managing-workflow/","tags":"","title":"Managing Workflow"},{"body":"Description We now include a monitoring stack for introspection on a running Kubernetes cluster. The stack includes 4 components:\nkube-state-metrics, kube-state-metrics (KSM) is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects. Node Exporter, Prometheus exporter for hardware and OS metrics exposed by *NIX kernels. Victoriametrics, a Cloud Native Computing Foundation project, is a systems and service monitoring system. Grafana, Graphing tool for time series data Architecture Diagram ┌────────────────┐ │ HOST │ │ node-exporter │◀──┐ ┌──────────────────┐ └────────────────┘ │ │kube-state-metrics│ │ └──────────────────┘ ┌────────────────┐ │ ▲ │ HOST │ │ ┌─────────────────┐ │ │ node-exporter │◀──┼────│ victoriametrics │─────────────┘ └────────────────┘ │ └─────────────────┘ │ ▲ ┌───────────────┐ │ │ │ HOST │ │ ▼ │ node-exporter│◀───┘ ┌──────────┐ └───────────────┘ │ Grafana │ └──────────┘ Grafana Grafana allows users to create custom dashboards that visualize the data captured to the running VictoriaMetrics component. By default Grafana is exposed using a service annotation through the router at the following URL: http://grafana.mydomain.com. The default login is admin/admin. If you are interested in changing these values please see [Tuning Component Settings][].\nGrafana will preload several dashboards to help operators get started with monitoring Kubernetes and Drycc Workflow. These dashboards are meant as starting points and don’t include every item that might be desirable to monitor in a production installation.\nDrycc Workflow monitoring by default does not write data to the host filesystem or to long-term storage. If the Grafana instance fails, modified dashboards are lost.\nProduction Configuration A production install of Grafana should have the following configuration values changed if possible:\nChange the default username and password from admin/admin. The value for the password is passed in plain text so it is best to set this value on the command line instead of checking it into version control. Enable persistence Use a supported external database such as mysql or postgres. You can find more information here On Cluster Persistence Enabling persistence will allow your custom configuration to persist across pod restarts. This means that the default sqllite database (which stores things like sessions and user data) will not disappear if you upgrade the Workflow installation.\nIf you wish to have persistence for Grafana you can set enabled to true in the values.yaml file before running helm install.\ngrafana: # Configure the following ONLY if you want persistence for on-cluster grafana # GCP PDs and EBS volumes are supported only persistence: enabled: true # Set to true to enable persistence size: 5Gi # PVC size Off Cluster Grafana If you wish to provide your own Grafana instance you can set grafana.enabled in the values.yaml file before running helm install.\nVictoriaMetrics VictoriaMetrics is a fast and scalable open source time series database and monitoring solution that lets users build a monitoring platform without scalability issues and minimal operational burden, it is fully compatible with the prometheus format.\nOn Cluster Persistence You can set node-exporter and kube-state-metrics to true or false in the values.yaml. -If you wish to have persistence for VictoriaMetrics you can set enabled to true in the values.yaml file before running helm install.\nvictoriametrics: vmstorage: replicas: 3 extraArgs: - --retentionPeriod=30d temporary: enabled: true size: 5Gi storageClass: \"toplvm-ssd\" persistence: enabled: true size: 10Gi storageClass: \"toplvm-hdd\" node-exporter: enabled: true kube-state-metrics: enabled: true Off Cluster VictoriaMetrics To use false VictoriaMetrics, please provide the following values in the values.yaml file before running helm install.\nvictoriametrics.enabled=false grafana.prometheusUrl=\"http://my.prometheus.url:9090\" controller.prometheusUrl=\"http://my.prometheus.url:9090\" ","categories":"","description":"Platform monitoring to your apps to spot issues in advance and respond to incidents quickly.","excerpt":"Platform monitoring to your apps to spot issues in advance and respond …","ref":"/docs/managing-workflow/platform-monitoring/","tags":"","title":"Platform Monitoring"},{"body":"Design Document Before opening a pull request, ensure your change also references a design document if the contribution is substantial. For more information, see Design Documents.\nSingle Issue It’s hard to reach agreement on the merit of a PR when it isn’t focused. When fixing an issue or implementing a new feature, resist the temptation to refactor nearby code or to fix that potential bug you noticed. Instead, open a separate issue or pull request. Keeping concerns separated allows pull requests to be tested, reviewed, and merged more quickly.\nSquash and rebase the commit or commits in your pull request into logical units of work with git. Include tests and documentation changes in the same commit, so that a revert would remove all traces of the feature or fix.\nMost pull requests will reference a GitHub issue. In the PR description - not in the commit itself - include a line such as “closes #1234”. The issue referenced will automatically be closed when your PR is merged.\nInclude Tests If you significantly alter or add functionality to a component that impacts the broader Drycc Workflow PaaS, you should submit a complementary PR to modify or amend end-to-end integration tests. These integration tests can be found in the drycc/workflow-e2e repository.\nSee testing for more information.\nInclude Docs Changes to any Drycc Workflow component that could affect a user’s experience also require a change or addition to the relevant documentation. For most Drycc components, this involves updating the component’s own documentation. In some cases where a component is tightly integrated into drycc/workflow, its documentation must also be updated.\nCross-repo commits If a pull request is part of a larger piece of work involving one or more additional commits in other Workflow repositories, these commits can be referenced in the last PR to be submitted. The downstream e2e test job will then supply every referenced commit (derived from PR issue number supplied) to the test runner so it can source the necessary Container images for inclusion in the generated Workflow chart to be tested.\nFor example, consider paired commits in drycc/controller and drycc/workflow-e2e. The commit body for the first PR in drycc/workflow-e2e would look like:\nfeat(foo_test): add e2e test for feature foo [skip e2e] test for controller#42 Adding [skip e2e] forgoes the e2e tests on this commit. This and any other required PRs aside from the final PR should be submitted first, so that their respective build and image push jobs run.\nLastly, the final PR in drycc/controller should be created with the required PR number(s) listed, in the form of [Rr]equires \u003crepoName\u003e#\u003cpullRequestNumber\u003e, for use by the downstream e2e run.\nfeat(foo): add feature foo Requires workflow-e2e#42 Code Standards Drycc components are implemented in Go and Python. For both languages, we agree with The Zen of Python, which emphasizes simple over clever. Readability counts.\nGo code should always be run through gofmt on the default settings. Lines of code may be up to 99 characters long. Documentation strings and tests are required for all exported functions. Use of third-party go packages should be minimal, but when doing so, such dependencies should be managed via the glide tool.\nPython code should always adhere to PEP8, the python code style guide, with the exception that lines of code may be up to 99 characters long. Docstrings and tests are required for all public methods, although the flake8 tool used by Drycc does not enforce this.\nCommit Style We follow a convention for commit messages borrowed from CoreOS, who borrowed theirs from AngularJS. This is an example of a commit:\nfeat(scripts/test-cluster): add a cluster test command this uses tmux to setup a test cluster that you can easily kill and start for debugging. To make it more formal, it looks something like this:\n{type}({scope}): {subject} \u003cBLANK LINE\u003e {body} \u003cBLANK LINE\u003e {footer} The allowed {types} are as follows:\nfeat -\u003e feature fix -\u003e bug fix docs -\u003e documentation style -\u003e formatting ref -\u003e refactoring code test -\u003e adding missing tests chore -\u003e maintenance The {scope} can be anything specifying the location(s) of the commit change(s).\nThe {subject} needs to be an imperative, present tense verb: “change”, not “changed” nor “changes”. The first letter should not be capitalized, and there is no dot (.) at the end.\nJust like the {subject}, the message {body} needs to be in the present tense, and includes the motivation for the change, as well as a contrast with the previous behavior. The first letter in a paragraph must be capitalized.\nAll breaking changes need to be mentioned in the {footer} with the description of the change, the justification behind the change and any migration notes required.\nAny line of the commit message cannot be longer than 72 characters, with the subject line limited to 50 characters. This allows the message to be easier to read on GitHub as well as in various git tools.\nMerge Approval Any code change - other than a simple typo fix or one-line documentation change - requires at least two Drycc maintainers to accept it. Maintainers tag pull requests with “LGTM1” and “LGTM2” (Looks Good To Me) labels to indicate acceptance.\nNo pull requests can be merged until at least one core maintainer signs off with an LGTM. The other LGTM can come from either a core maintainer or contributing maintainer.\nIf the PR is from a Drycc maintainer, then he or she should be the one to close it. This keeps the commit stream clean and gives the maintainer the benefit of revisiting the PR before deciding whether or not to merge the changes.\nAn exception to this is when an errant commit needs to be reverted urgently. If necessary, a PR that only reverts a previous commit can be merged without waiting for LGTM approval.\n","categories":"","description":"Proposed changes to Drycc projects are made as GitHub pull requests.","excerpt":"Proposed changes to Drycc projects are made as GitHub pull requests.","ref":"/docs/contribution-guidelines/submitting-a-pull-request/","tags":"","title":"Submitting a Pull Request"},{"body":"Drycc software is fully open source. As such, the “Drycc community” consists of anyone who uses the Drycc software and participates in its evolution, whether by answering questions, finding bugs, suggesting enhancements, or writing documentation or code.\nDrycc development is coordinated through numerous project repositories on GitHub. Anyone can check out the source code for any Drycc component, fork it, make improvements, and create a pull request to offer those changes back to the Drycc community.\nEngine Yard maintains the numerous Drycc projects, and as such, decides what ends up in the official GitHub repositories. Drycc depends on the contributions of the community; the maintainers will not ignore pull requests or issues.\nDrycc uses the timeless, highly efficient, and totally unfair system known as “Benevolent Dictator for Life” (BDFL). Gabriel Monroy, the creator of Drycc, is our BDFL and has final say over all decisions related to Drycc.\nOpen Source Bounties Drycc projects are bounty-friendly. We believe open source bounty sites can be constructive tools in the development of open source software. Community members are encouraged to a) offer bounties and b) receive bounties for open source contributions that benefit everyone. The Drycc maintainers, however, will not accept bounties on this project but are more than happy to help community members attempting bounties.\n","categories":"","description":"Drycc is an open source project that anyone in the community can use, improve, and enjoy. We'd love you to join us! Here's a few ways to find out what's happening and get involved.","excerpt":"Drycc is an open source project that anyone in the community can use, …","ref":"/docs/contribution-guidelines/community/","tags":"","title":"Community"},{"body":"What’s New New! /v2/apps/{name}/logs endpoint was fixed and no longer returns b'log data' and instead returns a normal string log data\nAuthentication Register a New User Example Request:\nPOST /v2/auth/register/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json { \"username\": \"test\", \"password\": \"opensesame\", \"email\": \"test@example.com\" } Optional Parameters:\n{ \"first_name\": \"test\", \"last_name\": \"testerson\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Log in Example Request:\nPOST /v2/auth/login/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json {\"username\": \"test\", \"password\": \"opensesame\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json {\"token\": \"abc123\"} Cancel Account Example Request:\nDELETE /v2/auth/cancel/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Who Am I Example Request:\nGET /v2/auth/whoami/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } Regenerate Token note\nThis command could require administrative privileges\nExample Request:\nPOST /v2/auth/tokens/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional Parameters:\n{ \"username\" : \"test\" \"all\" : \"true\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json {\"token\": \"abc123\"} Change Password Example Request:\nPOST /v2/auth/passwd/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"password\": \"foo\", \"new_password\": \"bar\" } Optional parameters:\n{\"username\": \"testuser\"} note\nUsing the username parameter requires administrative privileges and makes the password parameter optional.\nExample Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Applications List all Applications Example Request:\nGET /v2/apps HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Create an Application Example Request:\nPOST /v2/apps/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 Optional parameters:\n{\"id\": \"example-go\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Destroy an Application Example Request:\nDELETE /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 List Application Details Example Request:\nGET /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example-go\", \"owner\": \"test\", \"structure\": {}, \"updated\": \"2014-01-01T00:00:00UTC\", \"url\": \"example-go.example.com\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Update Application Details Example Request:\nPOST /v2/apps/example-go/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional parameters:\n{ \"owner\": \"test\" } Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 1.8.0 Content-Type: application/json Retrieve Application Logs Example Request:\nGET /v2/apps/example-go/logs/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Optional URL Query Parameters:\n?log_lines= Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: text/plain \"16:51:14 drycc[api]: test created initial release\\n\" Run one-off Commands POST /v2/apps/example-go/run/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"command\": \"echo hi\"} Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json {\"exit_code\": 0, \"output\": \"hi\\n\"} Certificates List all Certificates Example Request:\nGET /v2/certs HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22.32.34:20Z\", \"updated\": \"2016-06-22.32.34:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } ] } Get Certificate Details Example Request:\nGET /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22.32.34:20Z\", \"updated\": \"2016-06-22.32.34:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Create Certificate Example Request:\nPOST /v2/certs/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 { \"name\": \"foo\" \"certificate\": \"-----BEGIN CERTIFICATE-----\", \"key\": \"-----BEGIN RSA PRIVATE KEY-----\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"id\": 22, \"owner\": \"test\", \"san\": [], \"domains\": [], \"created\": \"2016-06-22.32.34:20Z\", \"updated\": \"2016-06-22.32.34:20Z\", \"name\": \"foo\", \"common_name\": \"bar.com\", \"fingerprint\": \"7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0\", \"expires\": \"2017-01-14T23:57:57Z\", \"starts\": \"2016-01-15T23:57:57Z\", \"issuer\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\", \"subject\": \"/C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=bar.com/emailAddress=engineering@drycc.cc\" } Destroy a Certificate Example Request:\nDELETE /v2/certs/foo HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Attach a Domain to a Certificate Example Request:\nPOST /v2/certs/foo/domain/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"domain\": \"test.com\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Remove a Domain from a Certificate Example Request:\nDELETE /v2/certs/foo/domain/test.com/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Enable or disable TLS Example Request:\nPOST /v2/apps/example-go/tls/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 { \"https_enforced\": true } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"app\": \"example-go\", \"owner\": \"test\", \"https_enforced\": true, \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Get TLS status Example Request:\nGET /v2/apps/example-go/tls/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"app\": \"example-go\", \"owner\": \"test\", \"https_enforced\": false, \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Pods List all Pods Example Request:\nGET /v2/apps/example-go/pods/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } List all Pods by Type Example Request:\nGET /v2/apps/example-go/pods/web/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"results\": [ { \"name\": \"go-v2-web-e7dej\", \"release\": \"v2\", \"started\": \"2014-01-01T00:00:00Z\", \"state\": \"up\", \"type\": \"web\" } ] } Restart All Pods Example Request:\nPOST /v2/apps/example-go/pods/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type Example Request:\nPOST /v2/apps/example-go/pods/web/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Restart Pods by Type and Name Example Request:\nPOST /v2/apps/example-go/pods/go-v2-web-atots/restart/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json [ { \"name\": \"go-v2-web-atots\", \"release\": \"v2\", \"started\": \"2016-04-11T21:07:54Z\", \"state\": \"up\", \"type\": \"web\" } ] Scale Pods Example Request:\nPOST /v2/apps/example-go/scale/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"web\": 3} Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Configuration List Application Configuration Example Request:\nGET /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create new Config Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": \"world\", \"PLATFORM\": \"drycc\"}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v3\", \"HELLO\": \"world\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Unset Config Variable Example Request:\nPOST /v2/apps/example-go/config/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"values\": {\"HELLO\": null}} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"owner\": \"test\", \"app\": \"example-go\", \"values\": { \"DRYCC_APP\": \"example-go\", \"DRYCC_RELEASE\": \"v4\", \"PLATFORM\": \"drycc\" }, \"memory\": {}, \"cpu\": {}, \"tags\": {}, \"healthcheck\": {}, \"created\": \"2014-01-01T00:00:00UTC\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Domains List Application Domains Example Request:\nGET /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } ] } Add Domain Example Request:\nPOST /v2/apps/example-go/domains/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {'domain': 'example.example.com'} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"domain\": \"example.example.com\", \"owner\": \"test\", \"updated\": \"2014-01-01T00:00:00UTC\" } Remove Domain Example Request:\nDELETE /v2/apps/example-go/domains/example.example.com HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Builds List Application Builds Example Request:\nGET /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"FROM drycc/slugrunner RUN mkdir -p /app WORKDIR /app ENTRYPOINT [\\\"/runner/init\\\"] ADD slug.tgz /app ENV GIT_SHA 060da68f654e75fac06dbedd1995d5f8ad9084db\", \"image\": \"example-go\", \"owner\": \"test\", \"procfile\": { \"web\": \"example-go\" }, \"sha\": \"060da68f\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Create Application Build Example Request:\nPOST /v2/apps/example-go/build/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"image\": \"drycc/example-go:latest\"} Optional Parameters:\n{ \"procfile\": { \"web\": \"./cmd\" } } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"app\": \"example-go\", \"created\": \"2014-01-01T00:00:00UTC\", \"dockerfile\": \"\", \"image\": \"drycc/example-go:latest\", \"owner\": \"test\", \"procfile\": {}, \"sha\": \"\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Releases List Application Releases Example Request:\nGET /v2/apps/example-go/releases/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"app\": \"example-go\", \"build\": \"2.3d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"ed637ceb-5d32-44bd-9406-d326a777a513\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test changed nothing\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 3 }, { \"app\": \"example-go\", \"build\": \"2.3d8e4b-600e-4425-a85c-ffc7ea607f61\", \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test deployed 060da68\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 2 }, { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } ] } List Release Details Example Request:\nGET /v2/apps/example-go/releases/v2/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"app\": \"example-go\", \"build\": null, \"config\": \"95bd6dea-1685-4f78-a03d-fd7270b058d1\", \"created\": \"2014-01-01T00:00:00UTC\", \"owner\": \"test\", \"summary\": \"test created initial release\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\", \"version\": 1 } Rollback Release Example Request:\nPOST /v2/apps/example-go/releases/rollback/ HTTP/1.1 Host: drycc.example.com Content-Type: application/json Authorization: token abc123 {\"version\": 1} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json {\"version\": 5} Keys List Keys Example Request:\nGET /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"test@example.com\", \"owner\": \"test\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } ] } Add Key to User Example Request:\nPOST /v2/keys/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 { \"id\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\" } Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"created\": \"2014-01-01T00:00:00UTC\", \"id\": \"example\", \"owner\": \"example\", \"public\": \"ssh-rsa \u003c...\u003e\", \"updated\": \"2014-01-01T00:00:00UTC\", \"uuid\": \"de1bf5b5-4a72-4f94-a10c-d2a3741cdf75\" } Remove Key from User Example Request:\nDELETE /v2/keys/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Permissions List Application Permissions note\nThis does not include the app owner.\nExample Request:\nGET /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"users\": [ \"test\", \"foo\" ] } Create Application Permission Example Request:\nPOST /v2/apps/example-go/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Remove Application Permission Example Request:\nDELETE /v2/apps/example-go/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 List Administrators Example Request:\nGET /v2/admin/perms/ HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 2, \"next\": null \"previous\": null, \"results\": [ { \"username\": \"test\", \"is_superuser\": true }, { \"username\": \"foo\", \"is_superuser\": true } ] } Grant User Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nPOST /v2/admin/perms HTTP/1.1 Host: drycc.example.com Authorization: token abc123 {\"username\": \"example\"} Example Response:\nHTTP/1.1 201 CREATED DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Remove User’s Administrative Privileges note\nThis command requires administrative privileges\nExample Request:\nDELETE /v2/admin/perms/example HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 204 NO CONTENT DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Users List all users note\nThis command requires administrative privileges\nExample Request:\nGET /v2/users HTTP/1.1 Host: drycc.example.com Authorization: token abc123 Example Response:\nHTTP/1.1 200 OK DRYCC_API_VERSION: 2.3 DRYCC_PLATFORM_VERSION: 2.3.0 Content-Type: application/json { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"id\": 1, \"last_login\": \"2014-10-19T22:01:00.601Z\", \"is_superuser\": true, \"username\": \"test\", \"first_name\": \"test\", \"last_name\": \"testerson\", \"email\": \"test@example.com\", \"is_staff\": true, \"is_active\": true, \"date_joined\": \"2014-10-19T22:01:00.601Z\", \"groups\": [], \"user_permissions\": [] } ] } ","categories":"","description":"This is the v2.3 REST API for the Controller.","excerpt":"This is the v2.3 REST API for the Controller.","ref":"/docs/reference-guide/controller-api-v2-3/","tags":"","title":"Controller API v2.3"},{"body":"Configuring an Application A Drycc application stores config in environment variables.\nSetting Environment Variables Use drycc config to modify environment variables for a deployed application.\n$ drycc help config Manage environment variables that define app config Usage: drycc config [flags] drycc config [command] Available Commands: info An app config info set Set environment variables for an app unset Unset environment variables for an app pull Pull environment variables to the path push Push environment variables from the path attach Selects environment groups to attach an app ptype detach Selects environment groups to detach an app ptype Flags: -a, --app string The uniquely identifiable name for the application -g, --group string The group for which the config needs to be listed -p, --ptype string The ptype for which the config needs to be listed -v, --version int The version for which the config needs to be listed Global Flags: -c, --config string Path to configuration file. (default \"~/.drycc/client.json\") -h, --help Display help information Use \"drycc config [command] --help\" for more information about a command. When config is changed, a new release is created and deployed automatically.\nYou can set multiple environment variables with one drycc config set command, or with drycc config push and a local .env file.\n$ drycc config set FOO=1 BAR=baz \u0026\u0026 drycc config pull $ cat .env FOO=1 BAR=baz $ echo \"TIDE=high\" \u003e\u003e .env $ drycc config push Creating config... done, v4 === yuppie-earthman DRYCC_APP: yuppie-earthman FOO: 1 BAR: baz TIDE: high It can modify environment variables for a process type of application.\n$ drycc config set FOO=1 BAR=baz --ptype=web It can also modify environment variables for a environment group.\n$ drycc config set FOO1=1 BAR1=baz --group=web.env Then bind this environment variable group to the web.\n$ drycc config attach web web.env Of course, you can also detach it.\n$ drycc config detach web web.env Attach to Backing Services Drycc treats backing services like databases, caches and queues as attached resources. Attachments are performed using environment variables.\nFor example, use drycc config to set a DATABASE_URL that attaches the application to an external PostgreSQL database.\n$ drycc config set DATABASE_URL=postgres://user:pass@example.com:5432/db === peachy-waxworks DATABASE_URL: postgres://user:pass@example.com:5432/db Detachments can be performed with drycc config unset.\nBuildpacks Cache By default, apps using the [Imagebuilder][] will reuse the latest image data. When deploying applications that depend on third-party libraries that have to be fetched, this could speed up deployments a lot. In order to make use of this, the buildpack must implement the cache by writing to the cache directory. Most buildpacks already implement this, but when using custom buildpacks, it might need to be changed to make full use of the cache.\nDisabling and re-enabling the cache In some cases, cache might not speed up your application. To disable caching, you can set the DRYCC_DISABLE_CACHE variable with drycc config set DRYCC_DISABLE_CACHE=1. When you disable the cache, Drycc will clear up files it created to store the cache. After having it turned off, run drycc config unset DRYCC_DISABLE_CACHE to re-enable the cache.\nClearing the cache Use the following procedure to clear the cache:\n$ drycc config set DRYCC_DISABLE_CACHE=1 $ git commit --allow-empty -m \"Clearing Drycc cache\" $ git push drycc # (if you use a different remote, you should use your remote name) $ drycc config unset DRYCC_DISABLE_CACHE Custom Health Checks By default, Workflow only checks that the application starts in their Container. A health check may be added by configuring a health check probe for the application. The health checks are implemented as Kubernetes Container Probes. A ‘startupProbe’ ’livenessProbe’ and a ‘readinessProbe’ can be configured, and each probe can be of type ‘httpGet’, ’exec’ or ’tcpSocket’ depending on the type of probe the Container requires.\nA ‘startupProbe’ indicates whether the application within the container is started. All other probes are disabled if a startup probe is provided, until it succeeds. If the startup probe fails, the container is subjected to its restart policy.\nA ’livenessProbe’ is useful for applications running for long periods of time, eventually transitioning to broken states and cannot recover except by restarting them.\nOther times, a ‘readinessProbe’ is useful when the Container is only temporarily unable to serve, and will recover on its own. In this case, if a Container fails its ‘readinessProbe’ , the Container will not be shut down, but rather the Container will stop receiving incoming requests.\n‘httpGet’ probes are just as it sounds: it performs a HTTP GET operation on the Container. A response code inside the 200-399 range is considered a pass. ‘httpGet’ probes accept a port number to perform the HTTP GET operation on the Container.\n’exec’ probes run a command inside the Container to determine its health. An exit code of zero is considered a pass, while a non-zero status code is considered a fail. ’exec’ probes accept a string of arguments to be run inside the Container.\n’tcpSocket’ probes attempt to open a socket in the Container. The Container is only considered healthy if the check can establish a connection. ’tcpSocket’ probes accept a port number to perform the socket connection on the Container.\nHealth checks can be configured on a per-proctype basis for each application using drycc healthchecks set. If no type is mentioned then the health checks are applied to default proc type web, whichever is present. To configure a httpGet liveness probe:\n$ drycc healthchecks set livenessProbe httpGet 80 --ptype web Applying livenessProbe healthcheck... done App: peachy-waxworks UUID: afd84067-29e9-4a5f-9f3a-60d91e938812 Owner: dev Created: 2023-12-08T10:25:00Z Updated: 2023-12-08T10:25:00Z Healthchecks: livenessProbe web http-get headers=[] path=/ port=80 delay=50s timeout=50s period=10s #success=1 #failure=3 If the application relies on certain headers being set (such as the Host header) or a specific URL path relative to the root, you can also send specific HTTP headers:\n$ drycc healthchecks set livenessProbe httpGet 80 \\ --path /welcome/index.html \\ --headers \"X-Client-Version:v1.0,X-Foo:bar\" Applying livenessProbe healthcheck... done App: peachy-waxworks UUID: afd84067-29e9-4a5f-9f3a-60d91e938812 Owner: dev Created: 2023-12-08T10:25:00Z Updated: 2023-12-08T10:25:00Z Healthchecks: livenessProbe web http-get headers=[X-Client-Version=v1.0] path=/welcome/index.html port=80 delay=50s timeout=50s period=10s #success=1 #failure=3 To configure an exec readiness probe:\n$ drycc healthchecks set readinessProbe exec -- /bin/echo -n hello --ptype web Applying readinessProbe healthcheck... done App: peachy-waxworks UUID: afd84067-29e9-4a5f-9f3a-60d91e938812 Owner: dev Created: 2023-12-08T10:25:00Z Updated: 2023-12-08T10:25:00Z Healthchecks: readinessProbe web exec /bin/echo -n hello delay=50s timeout=50s period=10s #success=1 #failure=3 You can overwrite a probe by running drycc healthchecks set again:\n$ drycc healthchecks set readinessProbe httpGet 80 --ptype web Applying livenessProbe healthcheck... done App: peachy-waxworks UUID: afd84067-29e9-4a5f-9f3a-60d91e938812 Owner: dev Created: 2023-12-08T10:25:00Z Updated: 2023-12-08T10:25:00Z Healthchecks: livenessProbe web http-get headers=[] path=/ port=80 delay=50s timeout=50s period=10s #success=1 #failure=3 Configured health checks also modify the default application deploy behavior. When starting a new Pod, Workflow will wait for the health check to pass before moving onto the next Pod.\nAutodeploy By default, Changes the config, limits or healthchecks and so on will trigger deploy. If you don’t want deploy, you can disable.\n$ drycc autodeploy disable To re-enable autodeploy.\ndrycc autodeploy enable you can deploy by executing the following command. deploy all ptypes\ndrycc releases deploy deploy web process type, and support --force option to force deploy.\ndrycc releases deploy web --force Autorollback By default, deployment failures will roll back to the previous successful version. If you don’t want this to happen, you can disable.\n$ drycc autorollback disable To re-enable autorollback.\ndrycc autorollback enable Isolate the Application Workflow supports isolating applications onto a set of nodes using drycc tags.\n!!! note In order to use tags, you must first launch your cluster with the proper node labels. If you do not, tag commands will fail. Learn more by reading “Assigning Pods to Nodes”.\nOnce your nodes are configured with appropriate label selectors, use drycc tags set to restrict the application ptype to those nodes:\n$ drycc tags set web environ=prod Applying tags... done, v4 environ prod ","categories":"","description":"How to store configuration of a Drycc app in the environment, keeping config out of code, making it easy to maintain app or deployment specific configs.","excerpt":"How to store configuration of a Drycc app in the environment, keeping …","ref":"/docs/applications/managing-app-configuration/","tags":"","title":"Configuring an Application"},{"body":"Create an authentication token Create an authentication token using the drycc client.\n# drycc tokens add prometheus --password admin --username admin ! WARNING: Make sure to copy your token now. ! You won't be able to see it again, please confirm whether to continue. ! To proceed, type \"yes\" ! \u003e yes UUID USERNAME TOKEN 58176cf1-37a8-4c52-9b27-4c7a47269dfb admin 1F2c7A802aF640fd9F31dD846AdDf56BcMsay Add scrape configurations for prometheus A valid example file can be found here.\nThe global configuration specifies parameters that are valid in all other configuration contexts. They also serve as defaults for other configuration sections.\nglobal: scrape_interval: 60s evaluation_interval: 60s scrape_configs: - job_name: 'drycc' scheme: https metrics_path: /v2/apps/\u003cappname\u003e/metrics authorization: type: Token credentials: 1F2c7A802aF640fd9F31dD846AdDf56BcMsay static_configs: - targets: ['drycc.domain.com'] ","categories":"","description":"Metrics supports basic monitoring capabilities for Pod, providing various monitoring indicators such as CPU, memory, disk, network, etc., to meet the basic monitoring requirements for Pod resources.","excerpt":"Metrics supports basic monitoring capabilities for Pod, providing …","ref":"/docs/applications/managing-app-metrics/","tags":"","title":"Managing Application Metrics"},{"body":"Running Workflow without drycc storage In production, persistent storage can be achieved by running an external object store. For users on AWS, GCE/GKE or Azure, the convenience of Amazon S3, Google GCS or Microsoft Azure Storage makes the prospect of running a Storage-less Workflow cluster quite reasonable. For users who have restriction on using external object storage using swift object storage can be an option.\nRunning a Workflow cluster without Storage provides several advantages:\nRemoval of state from the worker nodes Reduced resource usage Reduced complexity and operational burden of managing Workflow See Configuring Object Storage for details on removing this operational complexity.\nReview Security Considerations There are some additional security-related considerations when running Workflow in production. See [Security Considerations][] for details.\nRegistration is Admin-Only By default, registration with the Workflow controller is in “admin_only” mode. The first user to run a drycc register command becomes the initial “admin” user, and registrations after that are disallowed unless requested by an admin.\nPlease see the following documentation to learn about changing registration mode:\nCustomizing Controller Disable Grafana Signups It is also recommended to disable signups for the Grafana dashboards.\nPlease see the following documentation to learn about disabling Grafana signups:\nCustomizing Monitor Running Workflow with RBAC If your cluster has RBAC amongst your authorization modes ($ kubectl api-versions should contains rbac.authorization.k8s.io) it may be necessary to enable RBAC in Workflow. This can be achieved by setting use_rbac in the global section of values.yaml to true, or by adding --set=global.use_rbac=true to the $ helm install/upgrade command. RBAC support was announced in Kubernetes-1.5 and is enabled by default if:\nyour Kubernetes cluster is in GKE your Kubernetes cluster built with kubeadm Note: helm may need to be given specific permissions under RBAC if not already done.\nAttention: Azure ACS Kubernetes clusters are not RBAC-enabled for today due to lack in authentication strategy. Feel free to watch this PR for more details.\n","categories":"","description":"When readying a Workflow deployment for production workloads, there are some additional recommendations.","excerpt":"When readying a Workflow deployment for production workloads, there …","ref":"/docs/managing-workflow/production-deployments/","tags":"","title":"Production Deployments"},{"body":"This upgrade process requires:\nHelm version 2.1.0 or newer Configured Off-Cluster Storage Upgrade Process !!! note If upgrading from a Helm Classic install, you’ll need to ‘migrate’ the cluster to a Kubernetes Helm installation. See Workflow-Migration for steps.\nStep 1: Apply the Workflow upgrade Helm will remove all components from the previous release. Traffic to applications deployed through Workflow will continue to flow during the upgrade. No service interruptions should occur.\nIf Workflow is not configured to use off-cluster Postgres, the Workflow API will experience a brief period of downtime while the database recovers from backup.\nFirst, find the name of the release helm gave to your deployment with helm ls, then run\n$ helm upgrade \u003crelease-name\u003e oci://registry.drycc.cc/charts/workflow Note: If using off-cluster object storage on gcs and/or off-cluster registry using gcr and intending to upgrade from a pre-v2.10.0 chart to v2.10.0 or greater, the key_json values will now need to be pre-base64-encoded. Therefore, assuming the rest of the custom/off-cluster values are defined in the existing values.yaml used for previous installs, the following may be run:\n$ B64_KEY_JSON=\"$(cat ~/path/to/key.json | base64 -w 0)\" $ helm upgrade \u003crelease_name\u003e drycc/workflow -f values.yaml --set gcs.key_json=\"${B64_KEY_JSON}\",registry-token-refresher.gcr.key_json=\"${B64_KEY_JSON}\" Alternatively, simply replace the appropriate values in values.yaml and do without the --set parameter. Make sure to wrap it in single quotes as double quotes will give a parser error when upgrading.\nStep 2: Verify Upgrade Verify that all components have started and passed their readiness checks:\n$ kubectl --namespace=drycc get pods NAME READY STATUS RESTARTS AGE drycc-builder-2448122224-3cibz 1/1 Running 0 5m drycc-controller-1410285775-ipc34 1/1 Running 3 5m drycc-controller-celery-694f75749b-cmxxn 3/3 Running 0 5m drycc-database-e7c5z 1/1 Running 0 5m drycc-fluentbit-45h7j 1/1 Running 0 5m drycc-fluentbit-4z7lw 1/1 Running 0 5m drycc-fluentbit-k2wsw 1/1 Running 0 5m drycc-fluentbit-skdw4 1/1 Running 0 5m drycc-valkey-8nazu 1/1 Running 0 5m drycc-grafana-tm266 1/1 Running 0 5m drycc-registry-1814324048-yomz5 1/1 Running 0 5m drycc-registry-proxy-4m3o4 1/1 Running 0 5m drycc-registry-proxy-no3r1 1/1 Running 0 5m drycc-registry-proxy-ou8is 1/1 Running 0 5m drycc-registry-proxy-zyajl 1/1 Running 0 5m Step 3: Upgrade the Drycc Client Users of Drycc Workflow should now upgrade their drycc client to avoid getting WARNING: Client and server API versions do not match. Please consider upgrading. warnings.\ncurl -sfL https://www.drycc.cc/install-cli.sh | bash - \u0026\u0026 sudo mv drycc $(which drycc) ","categories":"","description":"Drycc Workflow releases may be upgraded in-place with minimal downtime.","excerpt":"Drycc Workflow releases may be upgraded in-place with minimal …","ref":"/docs/managing-workflow/upgrading-workflow/","tags":"","title":"Upgrading Workflow"},{"body":"Track Application Changes Drycc Workflow tracks all changes to your application. Application changes are the result of either new application code pushed to the platform (via git push drycc master), or an update to application configuration (via drycc config:set KEY=VAL).\nEach time a build or config change is made to your application a new release is created. These release numbers increase monotonically.\nYou can see a record of changes to your application using drycc releases:\n$ drycc releases OWNER STATE VERSION CREATED SUMMARY dev succeed v3 2023-12-04T10:17:46Z dev deleted PIP_INDEX_URL, DISABLE_COLLECTSTATIC dev succeed v2 2023-12-01T10:20:22Z dev added IMAGE_PULL_POLICY, PIP_INDEX_URL, PORT, DISABLE_COLLEC[...] dev succeed v1 2023-11-30T17:54:57Z dev created initial release Rollback a Release Drycc Workflow also supports rolling back go previous releases. If buggy code or an errant configuration change is pushed to your application, you may rollback to a previously known, good release.\n!!! note All rollbacks create a new, numbered release. But will reference the build/code and configuration from the desired rollback point.\nIn this example, the application is currently running release v4. Using drycc rollback v2 tells Workflow to deploy the build and configuration that was used for release v2. This creates a new release named v5 whose contents are the source and configuration from release v2:\n$ drycc releases OWNER STATE VERSION CREATED SUMMARY dev succeed v3 2023-12-04T10:17:46Z dev deleted PIP_INDEX_URL, DISABLE_COLLECTSTATIC dev succeed v2 2023-12-01T10:20:22Z dev added IMAGE_PULL_POLICY, PIP_INDEX_URL, PORT, DISABLE_COLLEC[...] dev succeed v1 2023-11-30T17:54:57Z dev created initial release $ drycc rollback v2 Rolled back to v2 $ drycc releases OWNER STATE VERSION CREATED SUMMARY dev succeed v4 2023-12-04T10:20:46Z dev rolled back to v2 dev succeed v3 2023-12-04T10:17:46Z dev deleted PIP_INDEX_URL, DISABLE_COLLECTSTATIC dev succeed v2 2023-12-01T10:20:22Z dev added IMAGE_PULL_POLICY, PIP_INDEX_URL, PORT, DISABLE_COLLEC[...] dev succeed v1 2023-11-30T17:54:57Z dev created initial release Only rollback web process type:\n$ drycc rollback v3 web Rolled back to v3 $ drycc releases OWNER STATE VERSION CREATED SUMMARY dev succeed v5 2023-12-04T10:23:49Z dev rolled back to v3 dev succeed v4 2023-12-04T10:20:46Z dev rolled back to v2 dev succeed v3 2023-12-04T10:17:46Z dev deleted PIP_INDEX_URL, DISABLE_COLLECTSTATIC dev succeed v2 2023-12-01T10:20:22Z dev added IMAGE_PULL_POLICY, PIP_INDEX_URL, PORT, DISABLE_COLLEC[...] dev succeed v1 2023-11-30T17:54:57Z dev created initial release Run One-off Administration Tasks Drycc applications use one-off processes for admin tasks like database migrations and other commands that must run against the live application.\nUse drycc run to execute commands on the deployed application.\n$ drycc run -- 'ls -l' Running `ls -l`... total 28 -rw-r--r-- 1 root root 553 Dec 2 23:59 LICENSE -rw-r--r-- 1 root root 60 Dec 2 23:59 Procfile -rw-r--r-- 1 root root 33 Dec 2 23:59 README.md -rw-r--r-- 1 root root 1622 Dec 2 23:59 pom.xml drwxr-xr-x 3 root root 4096 Dec 2 23:59 src -rw-r--r-- 1 root root 25 Dec 2 23:59 system.properties drwxr-xr-x 6 root root 4096 Dec 3 00:00 target Share an Application Use drycc perms add to allow another Drycc user to collaborate on your application.\n$ drycc perms add otheruser view,change,delete Adding user otheruser as a collaborator for view,change,delete peachy-waxwork... done Use drycc perms to see who an application is currently shared with, and drycc perms remove to remove a collaborator.\n!!! note Collaborators can do anything with an application that its owner can do, except delete the application.\nWhen working with an application that has been shared with you, clone the original repository and add Drycc’ git remote entry before attempting to git push any changes to Drycc.\n$ git clone https://github.com/drycc/example-java-jetty.git Cloning into 'example-java-jetty'... done $ cd example-java-jetty $ git remote add -f drycc ssh://git@local3.dryccapp.com:2222/peachy-waxworks.git Updating drycc From drycc-controller.local:peachy-waxworks * [new branch] master -\u003e drycc/master Application Troubleshooting Applications deployed on Drycc Workflow treat logs as event streams. Drycc Workflow aggregates stdout and stderr from every Container making it easy to troubleshoot problems with your application.\nUse drycc logs to view the log output from your deployed application.\n$ drycc logs -f Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.5]: INFO:oejsh.ContextHandler:started o.e.j.s.ServletContextHandler{/,null} Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.8]: INFO:oejs.Server:jetty-7.6.0.v20120127 Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.5]: INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:10005 Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.6]: INFO:oejsh.ContextHandler:started o.e.j.s.ServletContextHandler{/,null} Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.7]: INFO:oejsh.ContextHandler:started o.e.j.s.ServletContextHandler{/,null} Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.6]: INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:10006 Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.8]: INFO:oejsh.ContextHandler:started o.e.j.s.ServletContextHandler{/,null} Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.7]: INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:10007 Dec 3 00:30:31 ip-10-250-15-201 peachy-waxworks[web.8]: INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:10008 ","categories":"","description":"This is a high-level, technical description of how Drycc works. It ties together many of the concepts you'll encounter while writing, configuring, deploying and running applications on the Drycc platform.","excerpt":"This is a high-level, technical description of how Drycc works. It …","ref":"/docs/applications/managing-app-lifecycle/","tags":"","title":"Managing an Application"},{"body":"Triage helps ensure issues resolve quickly by:\nDescribing the issue’s intent and purpose is conveyed precisely. This is necessary because it can be difficult for an issue to explain how an end user experiences an problem and what actions they took. Giving a contributor the information they need before they commit to resolving an issue. Lowering the issue count by preventing duplicate issues. Streamlining the development process by preventing duplicate discussions. If you don’t have time to code, consider helping with triage. The community will thank you for saving them time by spending some of yours.\nEnsure the Issue Contains Basic Information Before triaging an issue very far, make sure that the issue’s author provided the standard issue information. This will help you make an educated recommendation on how this to categorize the issue. Standard information that should be included in most issues are things such as:\nthe version(s) of Drycc this issue affects a reproducible case if this is a bug page URL if this is a docs issue or the name of a man page Depending on the issue, you might not feel all this information is needed. Use your best judgment. If you cannot triage an issue using what its author provided, explain kindly to the author that they must provide the above information to clarify the problem.\nIf the author provides the recommended information but you are still unable to triage the issue, request additional information. Do this kindly and politely because you are asking for more of the author’s time.\nIf the author does not respond requested information within the timespan of a week, close the issue with a kind note stating that the author can request for the issue to be reopened when the necessary information is provided.\nClassifying the Issue An issue can have multiple of the following labels:\nIssue Kind Kind Description bug Bugs are bugs. The cause may or may not be known at triage time so debugging should be taken account into the time estimate. docs Writing documentation, man pages, articles, blogs, or other significant word-driven task. enhancement Enhancements can drastically improve usability or performance of a component. question Contains a user or contributor question requiring a response. security Security-related issues such as TLS encryption, network segregation, authn/authz features, etc. Functional Area builder cache contrib and provisioning client controller database docs kubernetes registry router store (Ceph) tests Easy Fix “Easy Fix” issues are a way for a new contributor to find issues that are fit for their experience level. These issues are typically for users who are new to Drycc, and possibly Go, and is looking to help while learning the basics.\nPrioritizing issues When attached to a specific milestone, an issue can be attributed one of the following labels to indicate their degree of priority.\nPriority Description priority 0 Urgent: Security, critical bugs, blocking issues. Drop everything and fix this today, then consider creating a patch release. priority 1 Serious: Impedes user actions or is a regression. Fix this before the next planned release. And that’s it. That should be all the information required for a new or existing contributor to come in an resolve an issue.\n","categories":"","description":"Issue triage provides an important way to contribute to an open source project.","excerpt":"Issue triage provides an important way to contribute to an open source …","ref":"/docs/contribution-guidelines/triaging-issues/","tags":"","title":"Triaging Issues"},{"body":"","categories":"","description":"Troubleshooting is systematic approach to problem-solving.\n","excerpt":"Troubleshooting is systematic approach to problem-solving.\n","ref":"/docs/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"Conduct The Drycc community welcomes and encourages participation by everyone.\nNo matter how you identify yourself or how others perceive you: we welcome you. We welcome contributions from everyone as long as they interact constructively with our community.\nThe Drycc developer community continues to grow, and it is inevitable that disagreements and conflict will arise. We ask that participants conduct themselves according to these principles:\nBe welcoming, friendly, and patient.\nBe considerate.\nYour work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we’re a world-wide community, so you might not be communicating in someone else’s primary language.\nBe respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and bad manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a productive one.\nBe careful in the words that you choose. Be kind to others. Do not insult or put down other participants. Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are never appropriate for the community.\n(Thanks to the Debian and Django communities for their text and their inspiration.)\n","categories":"","description":"The Drycc community welcomes and encourages participation by **everyone**.","excerpt":"The Drycc community welcomes and encourages participation by …","ref":"/docs/contribution-guidelines/conduct/","tags":"","title":"Conduct"},{"body":"We can use the blow command to create volumes and mount the created volumes. Drycc create volume support ReadWriteMany, so before deploying drycc, you need to have a StorageClass ready which can support ReadWriteMany. Deploying drycc, set controller.appStorageClass to this StorageClass.\nUse drycc volumes to mount a volume for a deployed application’s processes.\n$ drycc help volumes Valid commands for volumes: add create a volume for the application expand expand a volume for the application list list volumes in the application info print information about a volume remove delete a volume from the application client the client used to manage volume files mount mount a volume to process of the application unmount unmount a volume from process of the application Use 'drycc help [command]' to learn more. Create a volume for the application You can create a csi volume with the drycc volumes add command.\n$ drycc volumes add myvolume 200M Creating myvolume to scenic-icehouse... done Or use an existing nfs server\n$ drycc volumes add mynfsvolume 200M -t nfs --nfs-server=nfs.drycc.com --nfs-path=/ Creating mynfsvolume to scenic-icehouse... done Or maybe use an existing oss3\n$ drycc volumes add myossvolume 200M -t oss --oss-server=oss.drycc.com --oss-bucket=vbucket --oss-access-key=ak --oss-secret-key=sk Creating myossvolume to scenic-icehouse... done List volumes in the application After volume is created, you can list the volumes in this application.\n$ drycc volumes list NAME OWNER TYPE PTYPE PATH SIZE myvolume admin csi 200M mynfsvolume admin nfs 200M myossvolume admin oss 200M Mount a volume The volume which is named myvolume is created, you can mount the volume with process of the application, use the command of drycc volumes mount. When volume is mounted, a new release will be created and deployed automatically.\n$ drycc volumes mount myvolume web=/data/web Mounting volume... done And use drycc volumes list show mount detail.\n$ drycc volumes list NAME OWNER TYPE PTYPE PATH SIZE myvolume admin nfs web /data/web 200M If you don’t need the volume, use drycc volumes unmount to unmount the volume and then use drycc volumes remove to delete the volume from the application. Before deleting volume, the volume has to be unmounted.\n$ drycc volumes unmount myvolume web Unmounting volume... done $ drycc volumes remove myvolume Deleting myvolume from scenic-icehouse... done Use volume client to manage volume files. Assume the volume which is named myvolume is created and mounted.\nPrepare a file named testfile.\n$ echo \"testtext\" \u003e testfile Upload. $ drycc volumes client cp testfile vol://myvolume/ [↑] testfile 100% [==================================================] (5/ 5 B, 355 B/s)\nList files in myvolume.\n$ drycc volumes client ls vol://myvolume/ [2024-07-22T15:32:28+08:00] 5 testfile Delete testfle in myvolume.\n$ drycc volumes client rm vol://myvolume/testfile ","categories":"","description":"Drycc supports many types of volumes. A container can use any number of volume types simultaneously.","excerpt":"Drycc supports many types of volumes. A container can use any number …","ref":"/docs/applications/managing-app-volumes/","tags":"","title":"Mounting volumes for an Application"},{"body":"","categories":"","description":"Browse the ever-growing list of up-to-date, community driven roadmaps.\n","excerpt":"Browse the ever-growing list of up-to-date, community driven roadmaps. …","ref":"/docs/roadmap/","tags":"","title":"Roadmap"},{"body":"","categories":"","description":"This HowTo is for project maintainers who need a Contributing Guide for their project.\n","excerpt":"This HowTo is for project maintainers who need a Contributing Guide …","ref":"/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"What is a maintainer? (Unabashedly stolen from the Podman project)\nThere are different types of maintainers, with different responsibilities, but all maintainers have 3 things in common:\nThey share responsibility in the project’s success. They have made a long-term, recurring time investment to improve the project. They spend that time doing whatever needs to be done, not necessarily what is the most interesting or fun. Maintainers are often under-appreciated, because their work is harder to appreciate. It’s easy to appreciate a really cool and technically advanced feature. It’s harder to appreciate the absence of bugs, the slow but steady improvement in stability, or the reliability of a release process. But those things distinguish a good project from a great one.\nDrycc maintainers Drycc has two groups of maintainers in addition to our beloved Benevolent Dictator for Life.\nBDFL Drycc follows the timeless, highly efficient and totally unfair system known as Benevolent dictator for life.\nGabriel Monroy (@gabrtv), as creator of the Drycc project, serves as our project’s BDFL. While the day-to-day project management is carried out by the maintainers, Gabriel serves as the final arbiter of any disputes and has the final say on project direction.\nCore maintainers Core maintainers are exceptionally knowledgeable about all areas of Drycc. Some maintainers work on Drycc full-time, although this is not a requirement.\nThe duties of a core maintainer include:\nClassify and respond to GitHub issues and review pull requests Help to shape the Drycc roadmap and lead efforts to accomplish roadmap milestones Participate actively in feature development and bug fixing Answer questions and help users in the Drycc #community Slack channel The current list of core maintainers can be seen here.\nNo pull requests can be merged until at least one core maintainer signs off with an LGTM. The other LGTM can come from either a core maintainer or contributing maintainer.\nContributing maintainers Contributing maintainers are exceptionally knowledgeable about some but not necessarily all areas of Drycc, and are often selected due to specific domain knowledge that complements the project (but a willingness to continually contribute to the project is most important!). Often, core maintainers will ask a contributing maintainer to weigh in on issues, pull requests, or conversations where the contributing maintainer is knowledgeable.\nThe duties of a contributing maintainer are very similar to those of a core maintainer, but they are limited to areas of the Drycc project where the contributing maintainer is knowledgeable.\nContributing maintainers are defined in practice as those who have write access to the Drycc repository. All maintainers can review pull requests and add LGTM labels as appropriate.\nBecoming a maintainer The Drycc project wouldn’t be where it is today without its community. Many of the project’s community members embody the spirit of maintainership, and have contributed substantially to the project.\nThe contributing maintainers group was created in part so that exceptional members of the community who have an interest in the continued success of the project have the opportunity to join the core maintainers in guiding the future of Drycc.\nGenerally, potential contributing maintainers are selected by the Drycc core maintainers based in part on the following criteria:\nSustained contributions to the project over a period of time (usually months) A willingness to help Drycc users on GitHub and in the Drycc #community Slack channel A friendly attitude :) The Drycc core maintainers must unanimously agree before inviting a community member to join as a contributing maintainer, although in many cases the candidate has already been acting in the capacity of a contributing maintainer for some time, and has been consulted on issues, pull requests, etc.\n","categories":"","description":"This document serves to describe the leadership structure of the Drycc project, and list the current project maintainers.","excerpt":"This document serves to describe the leadership structure of the Drycc …","ref":"/docs/contribution-guidelines/maintainers/","tags":"","title":"Drycc Maintainers"},{"body":"A Gateway describes how traffic can be translated to Services within the cluster. That is, it defines a request for a way to translate traffic from somewhere that does not know about Kubernetes to somewhere that does. For example, traffic sent to a Kubernetes Service by a cloud load balancer, an in-cluster proxy, or an external hardware load balancer. While many use cases have client traffic originating “outside” the cluster, this is not a requirement.\nCreate Gateway for an Application Gateway is a way of exposing services externally, which generates an external IP address to connect route and service. After deploy, the gateway has been created.\nList the containers:\n# drycc gateways NAME LISENTER PORT PROTOCOL ADDRESSES python-getting-started tcp-80-0 80 HTTP 101.65.132.51 You can also add a port in this gateway or create a one.\n# drycc gateways add python-getting-started --port=443 --protocol=HTTPS Adding gateway python-getting-started to python-getting-started... done Create service for an Application Service is a way of exposing services internally, creating a service generates an internal DNS that can access ptype. the web process type has been created, for others types, you should add as needed.\nList the services:\n$ drycc services PTYPE PORT PROTOCOL TARGET-PORT DOMAIN web 80 TCP 8000 python-getting-started.python-getting-started.svc.cluster.local Add a new service for process type\n# drycc services add --help # drycc services add sleep 8001:8001 Create Route for an Application A Gateway may be attached to one or more Route references which serve to direct traffic for a subset of traffic to a specific service. Same as the above， the web process type already bind the gateway and servies.\n# drycc routes NAME OWNER KIND GATEWAYS SERVICES python-getting-started demo HTTPRoute [\"python-getting-started:80\"] [\"python-getting-started:80\"] create a new route and attach gateway.\ndrycc routes add sleep HTTPRoute --ptype=sleep sleep:8001,100 drycc routes attach sleep --gateway=python-getting-started --port=80 ","categories":"","description":"A Gateway describes how traffic can be translated to Services within the cluster.","excerpt":"A Gateway describes how traffic can be translated to Services within …","ref":"/docs/applications/managing-app-gateway/","tags":"","title":"About gateway for an Application"},{"body":"We can use blow command to create resources and bind which resource is created. This command depend on service-catalog.\nUse drycc resources to create and bind a resource for a deployed application.\n$ drycc help resources Manage resources for your applications Usage: drycc resources [flags] drycc resources [command] Available Commands: services List all available resource services plans List all available plans for a resource service create Create a resource for the application list List resources in the application describe Get a resource's detail in the application update Update a resource from the application bind Bind a resource for an application unbind unbind a resources for an application destroy Delete a resource from the application Flags: -a, --app string The uniquely identifiable name for the application -l, --limit int The maximum number of results to display Global Flags: -c, --config string Path to configuration file. (default \"~/.drycc/client.json\") -h, --help Display help information -v, --version Display client version Use \"drycc resources [command] --help\" for more information about a command. List all available resource services You can list available resource services with one drycc resources services command\n$ drycc resources services ID NAME UPDATEABLE 15032a52-33c2-4b40-97aa-ceb972f51509 airflow true b7cb26a4-b258-445c-860b-a664239a67f8 cloudbeaver true 9ce3c3ba-33b5-4e4e-a5e9-a338a83d5070 flink true b80c51a1-957c-4d93-b3d5-efde84cd8031 fluentbit true fff5b6c7-ed85-429b-8265-493e40cc53c7 grafana true 412e368f-bf78-4798-92cc-43343119a57d kafka true ea2a9b87-fbc4-4e2a-adee-161c1f91d98d minio true 383f7316-84f3-4955-8491-1d4b02b749c8 mongodb true fbee746b-f3a7-4bef-8b55-cbecfd4c8ac3 mysql-cluster true 5975094d-45cc-4e85-8573-f93937d026c7 opensearch true 1db95161-7193-4544-8c76-e5ad5f6c03f6 pmm true 5cfb0abf-276c-445b-9060-9aa964ede87d postgresql-cluster true b8f70264-eafc-4b2f-848e-2ec0d059032b prometheus true e1fd0d37-9046-4152-a29b-d155c5657c8b redis true 7d2b64c6-0b59-4f08-a2f5-7b17cea6e5ee redis-cluster true 2e6877df-86e7-4bcc-a869-2a9b6847a465 seaweedfs true 4aea5c0f-9495-420d-896a-ffc61a3eced5 spark true b50db3b5-8d5f-4be9-b8bd-467ecd6cc11d zookeeper true List all available plans for an resource services You can list all available plans for an resource services with one drycc resources plans command\n$ drycc resources plans redis ID NAME DESCRIPTION 8d659058-a3b4-4058-b039-cc03a31b9442 standard-128 Redis standard-128 plan which limit resources memory size 128Mi. 36e3dbec-fc51-4f6b-9baa-e31e316858be standard-256 Redis standard-256 plan which limit resources memory size 256Mi. 560817c2-5aa1-41c4-9ee6-a77e3ee552d5 standard-512 Redis standard-512 plan which limit resources memory size 512Mi. d544d989-9fb8-43e9-a74e-0840ce1b8f0f standard-1024 Redis standard-1024 plan which limit resources memory size 1Gi. ad51b7bb-9b12-4ffd-8e49-010c0141b263 standard-2048 Redis standard-2048 plan which limit resources memory size 2Gi. 5097d76e-557c-453f-bdb1-54009e0df78d standard-4096 Redis standard-4096 plan which limit resources memory size 4Gi. be3fa2d0-36d2-47c5-9561-9deffe5ba373 standard-8192 Redis standard-8192 plan which limit resources memory size 8Gi. 4ca812a8-d7c3-439f-96cd-26523e88400e standard-16384 Redis standard-16384 plan which limit resources memory size 16Gi. b7f2a71f-0d97-48fd-8eed-aab24a7822f3 standard-32768 Redis standard-32768 plan which limit resources memory size 32Gi. 25c6b5d5-7505-47c8-95b1-dc9bdc698063 standard-65536 Redis standard-65536 plan which limit resources memory size 64Gi. Create resource in application You can create a resource with one drycc resources create command\n$ drycc resources create redis redis standard-128 Creating redis to scenic-icehouse... done After resources are created, you can list the resources in this application.\n$ drycc resources list UUID NAME OWNER PLAN UPDATED 07220e9e-d54d-4d74-a88c-f464aa374386 redis admin redis:standard-128 2024-05-08T01:01:00Z Bind resources The resource which is named redis is created, you can bind the redis to the application, use the command of drycc resources bind redis.\n$ drycc resources bind redis Binding resource... done Describe resources And use drycc resources describe show the binding detail. If the binding is successful, this command will show the information of connect to the resource.\n$ drycc resources describe redis === scenic-icehouse resource redis plan: redis:1000 status: Ready binding: Ready REDISPORT: 6379 REDIS_PASSWORD: RzG87SJWG1 SENTINELHOST: 172.16.0.2 SENTINELPORT: 26379 Update resources You can use the drycc resources update command to upgrade a new plan. An example of how to upgrade the plan’s capacity to 128MB:\n$ drycc resources update redis redis standard-128 Updating redis to scenic-icehouse... done Remove the resource If you don’t need resources, use drycc resources unbind to unbind the resource and then use drycc resources destroy to delete the resource from the application. Before deleting the resource, the resource must be unbinded.\n$ drycc resources unbind redis Unbinding resource... done $ drycc resources destroy redis Deleting redis from scenic-icehouse... done ","categories":"","description":"Tools and services for developing, extending, and operating your app.","excerpt":"Tools and services for developing, extending, and operating your app.","ref":"/docs/applications/managing-app-resources/","tags":"","title":"Managing resources for an Application"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/news/","tags":"","title":"News"},{"body":"","categories":"","description":"Reference gxwuide definition and meaning.\n","excerpt":"Reference gxwuide definition and meaning.\n","ref":"/docs/reference-guide/","tags":"","title":"Reference Guide"},{"body":"A common architecture pattern of multi-process applications is to have one process serve public requests while having multiple other processes supporting the public one to, for example, perform actions on a schedule or process work items from a queue. To implement this system of apps in Drycc Workflow, set up the apps to communicate using DNS resolution, as shown above, and hide the supporting processes from public view by removing them from the Drycc Workflow router.\nDNS Service Discovery Drycc Workflow supports deploying a single app composed of a system of processes. Each Drycc Workflow app communicates on a single port, so communicating with another Workflow app means finding that app’s address and port. All Workflow apps are mapped to port 80 externally, so finding its IP address is the only challenge. Workflow creates a Kubernetes Service for each app, which effectively assigns a name and one cluster-internal IP address to an app. The DNS service running in the cluster adds and removes DNS records which point from the app name to its IP address as services are added and removed. Drycc Workflow apps, then, can simply send requests to the domain name given to the service, which is “app-name.app-namespace”.\n","categories":"","description":"The Communication Solution between Drycc Applicatios.","excerpt":"The Communication Solution between Drycc Applicatios.","ref":"/docs/applications/inter-app-communication/","tags":"","title":"Inter-app Communication"},{"body":" Managing Application Resource Limits Drycc Workflow supports restricting memory and CPU shares of each process. Requests/Limits set on a per-process type are given to Kubernetes as a requests and limits. Which means you guarantee \u003crequests\u003e amount of resource for a process as well as limit the process from using more than \u003climits\u003e. By default, Kubernetes will set \u003crequests\u003e equal to \u003climit\u003e if we don’t explicitly set \u003crequests\u003e value. Please keep in mind that 0 \u003c= requests \u003c= limits.\nLimiting If you set a requests/limits that is out of range for your cluster, Kubernetes will be unable to schedule your application processes into the cluster!\n$ drycc limits plans ID SPEC CPU VCPUS MEMORY FEATURES std1.large.c1m1 std1 Universal CPU 1 1 GiB Integrated GPU shared std1.large.c1m2 std1 Universal CPU 1 2 GiB Integrated GPU shared std1.large.c1m4 std1 Universal CPU 1 4 GiB Integrated GPU shared std1.large.c1m8 std1 Universal CPU 1 8 GiB Integrated GPU shared std1.large.c2m2 std1 Universal CPU 2 2 GiB Integrated GPU shared std1.large.c2m4 std1 Universal CPU 2 4 GiB Integrated GPU shared std1.large.c2m8 std1 Universal CPU 2 8 GiB Integrated GPU shared std1.large.c2m16 std1 Universal CPU 2 16 GiB Integrated GPU shared $ drycc limits set web=std1.large.c1m1 Applying limits... done ","categories":"","description":"Drycc Workflow supports restricting memory and CPU shares of each process.","excerpt":"Drycc Workflow supports restricting memory and CPU shares of each …","ref":"/docs/applications/managing-resource-limits/","tags":"","title":"Resource Limits"},{"body":"You can use drycc domains to add or remove custom domains to the application:\n$ drycc domains add hello.bacongobbler.com --ptype=web Adding hello.bacongobbler.com to finest-woodshed... done Once that’s done, you can go into a DNS registrar and set up a CNAME from the new appname to the old one:\n$ dig hello.dryccapp.com [...] ;; ANSWER SECTION: hello.bacongobbler.com. 1759 IN CNAME finest-woodshed.dryccapp.com. finest-woodshed.dryccapp.com. 270 IN A 172.17.8.100 !!! note Setting a CNAME for a root domain can cause issues. Setting an @ record to be a CNAME causes all traffic to go to the other domain, including mail and the SOA (“start-of-authority”) records. It is highly recommended that you bind a subdomain to an application, however you can work around this by pointing the @ record to the address of the load balancer (if any).\nTo add or remove the application from the routing mesh, use drycc routing:\n$ drycc routing disable Disabling routing for finest-woodshed... done This will make the application unreachable through the Router, but the application is still reachable internally through its Kubernetes Service. To re-enable routing:\n$ drycc routing enable Enabling routing for finest-woodshed... done ","categories":"","description":"Make your apps accessible via custom domain names.","excerpt":"Make your apps accessible via custom domain names.","ref":"/docs/applications/domains-and-routing/","tags":"","title":"Domains and Routing"},{"body":"Application SSL Certificates SSL is a cryptographic protocol that provides end-to-end encryption and integrity for all web requests. Apps that transmit sensitive data should enable SSL to ensure all information is transmitted securely.\nTo enable SSL on a custom domain, e.g., www.example.com, use the SSL endpoint.\n!!! note drycc certs is only useful for custom domains. Default application domains are SSL-enabled already and can be accessed simply by using https, e.g. https://foo.dryccapp.com (provided that you have installed your wildcard certificate on the routers or on the load balancer).\nOverview Because of the unique nature of SSL validation, provisioning SSL for your domain is a multi-step process that involves several third-parties. You will need to:\nPurchase an SSL certificate from your SSL provider Upload the cert to Drycc Acquire SSL Certificate Purchasing an SSL cert varies in cost and process depending on the vendor. RapidSSL offers a simple way to purchase a certificate and is a recommended solution. If you’re able to use this provider, see buy an SSL certificate with RapidSSL for instructions.\nDNS and Domain Configuration Once the SSL certificate is provisioned and your cert is confirmed, you must route requests for your domain through Drycc. Unless you’ve already done so, add the domain specified when generating the CSR to your app with:\n$ drycc domains add www.example.com --ptype==web -a foo Adding www.example.com to foo... done Add a Certificate Add your certificate, any intermediate certificates, and private key to the endpoint with the certs:add command.\n$ drycc certs add example-com server.crt server.key -a foo Adding SSL endpoint... done www.example.com !!! note The name given to the certificate can only contain a-z (lowercase), 0-9 and hyphens\nThe Drycc platform will investigate the certificate and extract any relevant information from it such as the Common Name, Subject Alt Names (SAN), fingerprint and more.\nThis allows for wildcard certificates and multiple domains in the SAN without uploading duplicates.\nAdd a Certificate Chain Sometimes, your certificates (such as a self-signed or a cheap certificate) need additional certificates to establish the chain of trust. What you need to do is bundle all the certificates into one file and give that to Drycc. Importantly, your site’s certificate must be the first one:\n$ cat server.crt server.ca \u003e server.bundle After that, you can add them to Drycc with the certs add command:\n$ drycc certs add example-com server.bundle server.key -a foo Adding SSL endpoint... done www.example.com Attach SSL certificate to a domain Certificates are not automagically connected up to domains, instead you will have to attach a certificate to a domain\n$ drycc certs attach example-com example.com -a foo Each certificate can be connected to many domains. There is no need to upload duplicates.\nTo remove an association\n$ drycc certs detach example-com example.com -a foo Endpoint overview You can verify the details of your domain’s SSL configuration with drycc certs.\n$ drycc certs NAME COMMON-NAME EXPIRES SAN DOMAINS example-com example.com 14 Jan 2017 blog.example.com example.com or by looking at at each certificates detailed information\n$ drycc certs info example-com -a foo === bar-com Certificate Common Name(s): example.com Expires At: 2017-01-14 23:57:57 +0000 UTC Starts At: 2016-01-15 23:57:57 +0000 UTC Fingerprint: 7A:CA:B8:50:FF:8D:EB:03:3D:AC:AD:13:4F:EE:03:D5:5D:EB:5E:37:51:8C:E0:98:F8:1B:36:2B:20:83:0D:C0 Subject Alt Name: blog.example.com Issuer: /C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=example.com/emailAddress=engineering@drycc.cc Subject: /C=US/ST=CA/L=San Francisco/O=Drycc/OU=Engineering/CN=example.com/emailAddress=engineering@drycc.cc Connected Domains: example.com Owner: admin-user Created: 2016-01-28 19:07:41 +0000 UTC Updated: 2016-01-30 00:10:02 +0000 UTC Testing SSL Use a command line utility like curl to test that everything is configured correctly for your secure domain.\n!!! note The -k option flag tells curl to ignore untrusted certificates.\nPay attention to the output. It should print SSL certificate verify ok. If it prints something like common name: www.example.com (does not match 'www.somedomain.com') then something is not configured correctly.\nEnforcing SSL at the Router To enforce all HTTP requests be redirected to HTTPS, TLS can be enforced at the router level by running\n$ drycc tls force enable -a foo Enabling https-only requests for foo... done Users hitting the HTTP endpoint for the application will now receive a 301 redirect to the HTTPS endpoint.\nTo disable enforced TLS, run\n$ drycc tls force disable -a foo Disabling https-only requests for foo... done Automated Certificate Management With Automated Certificate Management (ACM), Drycc automatically manages TLS certificates for apps with Hobby and Professional dynos on the Common Runtime, and for apps in Private Spaces that enable the feature. Certificates handled by ACM automatically renew one month before they expire, and new certificates are created automatically whenever you add or remove a custom domain. All applications with paid dynos include ACM for free. Automated Certificate Management uses Let’s Encrypt, the free, automated, and open certificate authority for managing your application’s TLS certificates. Let’s Encrypt is run for the public benefit by the Internet Security Research Group (ISRG).\nTo enable ACM with the following command: $ drycc tls auto enable -a foo\nTo disable ACM with the following command: $ drycc tls auto disable -a foo\nRemove Certificate You can remove a certificate using the certs:remove command:\n$ drycc certs remove my-cert -a foo Removing www.example.com... Done. Swapping out certificates Over the lifetime of an application an operator will have to acquire certificates with new expire dates and apply it to all relevant applications, below is the recommended way to swap out certificates.\nBe intentional with certificate names, name them example-com-2017 when possible, where the year signifies the expiry year. This allows for example-com-2018 when a new certificate is purchased.\nAssuming all applications are already using example-com-2017 the following commands can be ran, chained together or otherwise:\n$ drycc certs detach example-com-2017 example.com -a foo $ drycc certs attach example-com-2018 example.com -a foo This will take care of a singular domain which allows the operator to verify everything went as planned and slowly roll it out to any other application using the same method.\nTroubleshooting Here are some steps you can follow if your SSL endpoint is not working as you’d expect.\nUntrusted Certificate In some cases when accessing the SSL endpoint, it may list your certificate as untrusted.\nIf this occurs, it may be because it is not trusted by Mozilla’s list of root CAs. If this is the case, your certificate may be considered untrusted for many browsers.\nIf you have uploaded a certificate that was signed by a root authority but you get the message that it is not trusted, then something is wrong with the certificate. For example, it may be missing intermediary certificates. If so, download the intermediary certificates from your SSL provider, remove the certificate from Drycc and re-run the certs add command.\n","categories":"","description":"SSL is a cryptographic protocol that provides end-to-end encryption and integrity for all web requests.","excerpt":"SSL is a cryptographic protocol that provides end-to-end encryption …","ref":"/docs/applications/ssl-certificates/","tags":"","title":"Application SSL Certificates"},{"body":"The Drycc stack is intended for advanced use cases only. Unless you have a specific need for custom Docker images, we recommend using Drycc’s default buildpack-powered build system. It offers automatic base image security updates and language-specific optimizations. It also avoids the need to maintain a container Dockerfile.\nDrycc config path overview A drycc repository comes in two different flavours:\na .drycc directory at the root of the working tree;\na root directory that is a ‘bare’ repository(i.e. without its own working tree). that is typically used for drycc pull.\nThese things may exist in a drycc repository.\nconfig/[a-z0-9]+(\\.[a-z0-9]+)*:: Configure file name, file name is group name. Format is environment variable format. [a-z0-9]+(\\-[a-z0-9]+)*.(yaml|yml):: Pipeline configure file. Config format Environment variables follow = formatting. By convention, but not rule, environment variable names are always capitalized.\nDEBUG=true JVM_OPTIONS=-XX:+UseG1GC Pipeline format A manifest has three top-level sections.\nbuild – Specifies the to build Dockerfile. env – Specifies environment variables in container. run – Specifies the release phase tasks to execute. config – Specifies config group, global group automatic reference. deploy – Specifies the commands and args to deploy. Here’s an example that illustrates using a manifest to build Docker images.\nkind: pipeline ptype: web build: docker: Dockerfile arg: CODENAME: bookworm env: VERSION: 1.2.1 run: command: - ./deployment-tasks.sh image: task timeout: 100 config: - jvm-config deploy: command: - bash - -ec args: - bundle exec puma -C config/puma.rb For more deployment information, please refer to the drycc examples.\n","categories":"","description":"Drycc Container Registry allows you to deploy your Docker-based app to Drycc. Both Common Runtime and Private Spaces are supported.","excerpt":"Drycc Container Registry allows you to deploy your Docker-based app to …","ref":"/docs/applications/using-dryccpath/","tags":"","title":"Using drycc path"},{"body":" A Open, Unified, Lightweight, Simpler Containers as a Service (CaaS).\nWelcome to Drycc Drycc Workflow is an open source container cloud platform.\nUsually we also call it Container as a Service(CaaS) that adds a developer-friendly layer to any Kubernetes cluster, making it easy to deploy and manage applications.\nDrycc Workflow includes capabilities for building and deploying from source via git push, simple application configuration, creating and rolling back releases, managing domain names and SSL certificates, providing seamless edge routing, aggregating logs, and sharing applications with teams. All of this is exposed through a simple REST API and command line interface.\nGetting Started To get started with Workflow, follow our Quick Start guide.\nTake a deep dive into Drycc Workflow in our Concepts, Architecture, and Components sections.\nFeel like contibuting some code or want to get started as a maintainer? Pick an issue tagged as an easy fix or help wanted and start contributing!\n","categories":"","description":"","excerpt":" A Open, Unified, Lightweight, Simpler Containers as a Service (CaaS). …","ref":"/docs/","tags":"","title":"Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/releases/","tags":"","title":"Release"},{"body":"!IMPORTANT This version is a major update with the following major changes made:\nRemove timeseries Remove telegraf Remove rabbitmq Replace seaweedfs with minio Replace redis with valkey Workflow ## v1.7.12 -\u003e v1.8.1 Releases filer v1.0.4 -\u003e v1.0.5 builder v1.7.2 -\u003e v1.8.0 controller v1.12.0 -\u003e v1.13.0 database v1.3.0 -\u003e v1.3.1 passport v1.3.2 -\u003e v1.3.3 imagebuilder v1.2.2 -\u003e v1.3.0 fluentbit v0.0.3 -\u003e v0.0.4 logger v1.3.6 -\u003e v1.3.7 gateway v0.0.3 -\u003e v0.1.0 grafana v1.4.2 -\u003e v1.4.3 valkey v1.4.0 -\u003e v1.5.0 prometheus v0.1.2 -\u003e v0.2.0 registry v1.3.0 -\u003e v1.3.1 registry-proxy v1.2.2 -\u003e v1.2.3 workflow-cli v1.9.0 -\u003e v1.10.0 Features 456d64b (builder) - build: change dryccfile to v2 9f6a2f7 (controller) - release: add query release version d6e35bc (controller) - build: add get build api bce1734 (controller) - route: support multi backend 2f43e19 (controller) - release: add ptypes filter 566e31d (controller) - deploy: finer grained ptype locks c2d2aac (controller) - config: add config for dryccfile a337d9c (controller) - limits: add runtime class name to plans d5aa7c7 (controller) - dryccfile: dryccfile support pipeline ecf84c4 (gateway) - charts: add storage console af3e54b (imagebuilder) - build: add drycc v2 support 3fa1950 (prometheus) - prometheus: high availability support 1c37db8 (valkey) - valkey: add sentinel 0f57a05 (valkey) - valkey: add valkey sentinel proxy f8eff51 (workflow-cli) - release: add query release version 9e7e72e (workflow-cli) - build: add build info 591560c (workflow-cli) - route: support multi backend 8bc3634 (workflow-cli) - release: add ptypes filter 3f466b5 (workflow-cli) - workflow-cli: config add ValuesRefs field (#64) 18a2658 (workflow-cli) - builds: add builds:fetch cmd (#72) 5910bba (workflow-cli) - workflow-cli:replace docopt with cobra (#77) Fixes a10df63 (builder) - wooddpecker: secsets are deprecated 76d35fa (controller) - controller: app_settings boolean field cannot be set correctly (#166) 31489d0 (controller) - controller: scale cover structure (#169) 395eba8 (controller) - migrate: master-slave database error c53cc51 (controller) - dryccfile: config not set c4cc1eb (controller) - wooddpecker: secsets are deprecated bcfc0cc (controller) - charts: indentation error 6a67e65 (controller) - controller: pod CrashLoopBackOff, release should be crash (#178) 19a8d5a (controller) - controller: migrate error 50c60d3 (controller) - controller: secret mistakenly deleted when force deploy (#179) 3d8a51f (controller) - migrate: group migrate error 2810d60 (database) - wooddpecker: secsets are deprecated 001247e (filer) - wooddpecker: secsets are deprecated d4f433c (fluentbit) - wooddpecker: secsets are deprecated d459290 (gateway) - wooddpecker: secsets are deprecated a22e5c6 (grafana) - fluentbit: fluentbit cpu error 738b417 (grafana) - wooddpecker: secsets are deprecated 6dd9ffe (grafana) - grafana: cve-2024-45337 ecd662f (grafana) - grafana: cve-2024-45337 5390aad (imagebuilder) - wooddpecker: secsets are deprecated 16c7a05 (imagebuilder) - woodpecker: cron run error 927452d (logger) - wooddpecker: secsets are deprecated 724003b (passport) - wooddpecker: secsets are deprecated b03cf4c (prometheus) - wooddpecker: secsets are deprecated 59ef8ab (registry) - wooddpecker: secsets are deprecated ee050d9 (registry) - test: s3 api error 261c45a (registry) - registry: env REGISTRY_VERSION conflicts 2d741e8 (registry-proxy) - nginx: ignored user conf 03228f3 (registry-proxy) - wooddpecker: secsets are deprecated 06c574a (valkey) - wooddpecker: secsets are deprecated 652c638 (workflow-cli) - filer: progressbar chinese garbled characters 9756ef7 (workflow-cli) - domains: ptype no default error 496f82f (workflow-cli) - routes: command alignment d20c80d (workflow-cli) - routes: backend null error 89bd46c (workflow-cli) - workflow-cli: modify volume type (#63) 6a3736e (workflow-cli) - build: macos not support 198c760 (workflow-cli) - perms: print indent b44db0c (workflow-cli) - wooddpecker: secsets are deprecated 4b98ab1 (workflow-cli) - workflow-cli: lint error Docs 2d51735 (builder) - readme: remove foss Maintenance d6d1c8e (builder) - controller-sdk-go: bump new version v0.0.0-20241021053012-e5fbff128198 0da2b48 (builder) - k8s: bump version v0.31.2 c1d4ff0 (builder) - builder: update config struct (#23) 4e8f1be (builder) - builder: modify config struct (#24) 2658a58 (builder) - deps: bump golang.org/x/crypto from 0.28.0 to 0.31.0 (#25) 445508c (builder) - git: add git repo clean 1bf85f3 (builder) - distribution: bump version to v3.0.0-rc.3.0 d54e568 (builder) - go: bump version 1.24 (#28) 8d8317c (builder) - deps: bump golang.org/x/net from 0.33.0 to 0.36.0 (#27) 197a87d (builder) - controller-sdk-go: bump version 78b6d6d (builder) - builder: bump version bf53d95 (builder) - mc: bump mc version to 2025.04.03.17.07.56 9914b4a (controller) - filer: add pod security context 3865137 (controller) - controller: volume not related release (#164) 4187c02 (controller) - filer: url quote content disposition e432d84 (controller) - deps: bump django from 4.2.15 to 4.2.16 in /rootfs (#167) f53758e (controller) - service: add name field 618ae90 (controller) - routes: kind is required 794ed58 (controller) - monitor: use memory_working_set_bytes replace memory_usage_bytes 93f5b5f (controller) - python: upgrade requirements version 6201fa0 (controller) - migrations: add registry migrate 8d6d70d (controller) - monitor: use prometheus replace timeseries a8cb39f (controller) - tests: add empty test case 2917bef (controller) - controller: use valkey replace redis d2d333f (controller) - filer: add clean old filer d4999af (controller) - ps: support previous pod logs (#171) c420d58 (controller) - gateway: add parent ref filter 14f17b4 (controller) - controller: modify query latest release (#173) 6f2d0f5 (controller) - deps: bump django from 4.2.16 to 4.2.17 in /rootfs (#172) 59a1e1e (controller) - controller: request check name parameter (#174) f414624 (controller) - deploy: add apply tasks 8b66072 (controller) - deps: bump django from 4.2.17 to 4.2.18 in /rootfs (#175) 2819ac9 (controller) - pts: pts replicas not correct (#176) 9971067 (controller) - settings: logger simple format (#177) 68f02a3 (controller) - dryccfile: migrate to dryccfile v2 d893f37 (controller) - charts: change upgrade helm hook 4b33f78 (controller) - deps: bump django from 4.2.18 to 4.2.20 in /rootfs (#180) d55df43 (controller) - controller: allow re attach to update and some error (#181) 3b0583d (controller) - controller: add oss mount support e17c180 (controller) - controller: bump version 5fb3047 (controller) - woodpecker: add cron event c91c28c (database) - postgres: bump version 15.8 62bb2e3 (database) - database: remove all database extensions 41a06b1 (database) - woodpecker: add cron event 9c61805 (filer) - filer: bump go version to 1.24 22c64dd (filer) - filer: add cron event 168bd13 (fluentbit) - charts: remove k8s early compatibility b96af9d (fluentbit) - fluentbit: bump go version to 1.23 ff048d5 (fluentbit) - fluentbit: bump version 3.1.10 c062f1c (fluentbit) - fluentbit: use valkey replace redis 6307847 (fluentbit) - fluentbit: limit log scope 265a632 (fluentbit) - deps: bump fluent-bit version to 3.2.3 c444a87 (fluentbit) - go: bump version 1.24 c8c81c4 (fluentbit) - fluentbit: bump fluentbit to 4.0.0 c97cb21 (fluentbit) - fluentbit: add cron event 0adf9ec (gateway) - charts: change drycc-monitor-grafana to drycc-grafana 9d8fa5b (grafana) - charts: remove k8s early compatibility 0364f36 (grafana) - monitor: bump grafana to 11 and telegraf to 1.32 44dab77 (grafana) - grafana: add rabbitmq dashboard c47e009 (grafana) - monitor: remove telegraf 3302a01 (grafana) - grafana: use valkey replace redis 80fffe5 (grafana) - rabbitmq: remove rabbitmq 6badc10 (grafana) - woodpecker: add cron event ecd662f (grafana) - grafana: bump grafana version to 11.6.0 fa223c2 (imagebuilder) - build: change build args format cc01e47 (imagebuilder) - deps: bump stack version a2a6f72 (imagebuilder) - imagebuilder: podman_publish use dockerfile var (#7) e9d68da (imagebuilder) - imagebuilder: change storage networkpolicy 9bc6edc (imagebuilder) - imagebuilder: bump version d2a7d77 (imagebuilder) - mc: bump mc version to 2025.04.03.17.07.56 885f267 (imagebuilder) - pack: bump pack to 0.37.0 00af0c8 (imagebuilder) - podman: bump version to 5.4.2 465ee45 (logger) - golang: bump version to 1.23 4186f7e (logger) - logger: use valkey replace redis 933470b (logger) - go: bump version 1.24 effcc11 (logger) - logger: bump go version to 1.24 b916a08 (logger) - logger: bump to latest version 05495b6 (passport) - python: upgrade requirements version 8904f3e (passport) - charts: change drycc-monitor-grafana to drycc-grafana 95473f0 (passport) - passport: use valkey replace redis 93a05a6 (passport) - charts: change upgrade helm hook f2ac617 (passport) - passport: bump version cf7c8ed (prometheus) - prometheus: bump new version 233d2f1 (prometheus) - woodpecker: add cron event 52a1f1b (registry) - mc: bump version to 2024.11.05.11.29.45 aee3d3d (registry) - registry: add cron event 7f85c99 (registry) - registry: bump registry to 3.0.0 8b1d7d1 (registry) - mc: bump mc version to 2025.04.03.17.07.56 08707aa (registry-proxy) - charts: add probe 881ba2a (registry-proxy) - charts: remove k8s early compatibility 4d99e30 (registry-proxy) - woodpecker: add cron event 9ce2090 (valkey) - valkey: use valkey replace redis d9685dd (valkey) - charts: remove dependencies 77f26f4 (valkey) - valkey: add cron event 064620a (workflow-cli) - volumes: unified in bytes c7548de (workflow-cli) - filer: url quote content disposition ad1ccb1 (workflow-cli) - volumes: ignore empty file 0f5a5d3 (workflow-cli) - workflow-cli: remove fossa 455c6d6 (workflow-cli) - routes: remove debug print a421dfb (workflow-cli) - routes: change field order 1ae288d (workflow-cli) - workflow-cli: optimize drycc output 7a7e1dc (workflow-cli) - routes: format output ad2a530 (workflow-cli) - go.mod: bump version 17cdc53 (workflow-cli) - ps: support previous pod logs (#65) 18f7c81 (workflow-cli) - config: modify config groups annotation (#66) 8be9ad3 (workflow-cli) - config: ConfigVar not omitempty (#67) a7c87f1 (workflow-cli) - shortcuts: remove sharding 5a2b689 (workflow-cli) - deps: bump golang.org/x/net from 0.30.0 to 0.33.0 (#68) 5a2b689 (workflow-cli) - deps: bump golang.org/x/crypto from 0.28.0 to 0.31.0 (#69) 9793539 (workflow-cli) - workflow: compatible with the latest dryccfile format f3374b6 (workflow-cli) - workflow-cli: default dryccpath (#70) 7809a37 (workflow-cli) - config: display ptype refs (#71) 684210e (workflow-cli) - builds: fetch support preview and save to local (#73) 3ff8c50 (workflow-cli) - workflow-cli: format builds config print, optimize shortcut exec logs (#74) 5aae652 (workflow-cli) - workflow-cli: upgrade controller-sdk-go cdf857d (workflow-cli) - workflow-cli: bump version 1da6773 (workflow-cli) - workflow-cli: modify prompt info (#81) 30e72b3 (workflow-cli) - workflow-cli: Optimize command flags (#82) 036d053 (workflow-cli) - volume: change client use subcommand ","categories":"","description":"New Drycc Workflow Release v1.8.1","excerpt":"New Drycc Workflow Release v1.8.1","ref":"/blog/2025/04/15/drycc-workflow-v1.8.1/","tags":"","title":"Drycc Workflow v1.8.1"},{"body":"Workflow ## v1.7.11 -\u003e v1.7.12 Releases filer v1.0.3 -\u003e v1.0.4 builder v1.7.1 -\u003e v1.7.2 controller v1.11.0 -\u003e v1.12.0 passport v1.3.1 -\u003e v1.3.2 imagebuilder v1.2.1 -\u003e v1.2.2 fluentbit v0.0.2 -\u003e v0.0.3 logger v1.3.5 -\u003e v1.3.6 storage v0.2.0 -\u003e v0.2.1 rabbitmq v1.3.1 -\u003e v1.3.2 workflow-cli v1.8.0 -\u003e v1.9.0 Features ef9e2ce (controller) - controller: support autorollback config (#154) c497a87 (controller) - release: add deploy release ba43453 (controller) - release: add release deploy 80b6f1d (controller) - perms: refine the permission model 751f5e7 (workflow-cli) - perms: add object user perm 005fe95 (workflow-cli) - workflow-cli: add autorollback cmd (#58) c8fa511 (workflow-cli) - workflow-cli: add update cmd a5d440c (workflow-cli) - release: add deploy release 4f28426 (workflow-cli) - workflow-cli: add autodeploy flag and more (#62) Fixes ce20b62 (controller) - migrations: certificate migrate err 97eff7a (controller) - controller: volume can not delete when ptype isn’t exist 4076bea (controller) - controller: fix pod unhealthy do not rollback 84c84f9 (controller) - migration: cert migrate error b4201d3 (controller) - controller: no cert domain do not redirect https (#162) f26d608 (imagebuilder) - podman: permission denied 7d5afe9 (imagebuilder) - podman: failed to reexec e766f1d (workflow-cli) - perms: print perm message 06ac7b5 (workflow-cli) - filer: cp file to volume error Maintenance 52ef190 (builder) - controller-sdk-go: bump new version v0.0.0-20240819081928-b589d0b69f71 b65b429 (controller) - charts: config.defaultMetrics add field (#147) a9266ec (controller) - tests: use latest codecov a5b4d62 (controller) - charts: modify grpcroutes role (#148) ad15c2a (controller) - deps: bump django from 4.2.14 to 4.2.15 in /rootfs (#149) 6fd65bd (controller) - metrics: add prometheus query interval 602105b (controller) - deps: bump aiohttp from 3.9.4 to 3.10.2 in /rootfs (#152) 95961ad (controller) - perms: add object perms f4f409e (controller) - controller: merge migrations (#155) fc6963e (controller) - gateway: remove unnecessary else 2dd5869 (controller) - perms: destroy perms log err 8804e8f (controller) - controller: change process type names to ptypes 5c05c52 (controller) - release: add autodeploy flag 81340aa (controller) - controller: pod failed do not rollback (#159) 13c9a5e (controller) - controller: unified naming convention for ptype b42b5dd (controller) - pod: modify readiness check fd36f76 (controller) - controller: services protocol default is TCP 7cc46bb (controller) - migration: remove unused cert 77cdbeb (controller) - controller: releases add_condition error (#161) 2ef5b65 (controller) - celery: use quorum queye 70706be (controller) - filer: zero copy upload file 85f799c (controller) - release: check deploy release ptypes be5ec67 (filer) - filer: add timeout for read and write 6d5040e (fluentbit) - plugin: only collect drycc controller logs a11fbbc (imagebuilder) - imagebuilder: bump stack version 064cc95 (logger) - logger: only collect drycc controller logs c8ed35d (passport) - migrate: use helm hook replace cluster lock 6135c7e (passport) - passport: use latest codecov cli version 4fbfb84 (rabbitmq) - rabbitmq: add init vhost list 3e179a8 (storage) - csi: remove attach 4918b27 (storage) - seaweedfs: bump version to 3.72 54207e3 (storage) - charts: change config order 18bb07d (storage) - seaweedfs: bump version to 3.73 60d8072 (workflow-cli) - workflow-cli: pts add node selector and ps add status field (#55) 89af759 (workflow-cli) - route: pretty At time display and add GRPCRoute 71b755d (workflow-cli) - filer: zero copy upload file 860db96 (workflow-cli) - update: dry-run short option eb9b67a (workflow-cli) - perms: modify cmd describe (#59) 0b98ae6 (workflow-cli) - perms: remove print (#60) 6d8a5ba (workflow-cli) - volumes: merge dest dir add212e (workflow-cli) - releases: add exception field (#61) 6203c2c (workflow-cli) - services: optimize service command parameters dc0c875 (workflow-cli) - controller-sdk-go: change post file procotol ","categories":"","description":"New Drycc Workflow Release v1.7.12","excerpt":"New Drycc Workflow Release v1.7.12","ref":"/blog/2024/09/14/drycc-workflow-v1.7.12/","tags":"","title":"Drycc Workflow v1.7.12"},{"body":"Workflow ## v1.7.10 -\u003e v1.7.11 Releases builder v1.7.0 -\u003e v1.7.1 controller v1.10.0 -\u003e v1.11.0 passport v1.3.0 -\u003e v1.3.1 imagebuilder v1.2.0 -\u003e v1.2.1 logger v1.3.4 -\u003e v1.3.5 storage v0.1.0 -\u003e v0.2.0 monitor v1.4.1 -\u003e v1.4.2 timeseries v0.1.0 -\u003e v0.1.1 rabbitmq v1.3.0 -\u003e v1.3.1 workflow-cli v1.7.0 -\u003e v1.8.0 Features 8875d5f (controller) - volumes: add volumes client support 98235b9 (controller) - canary: remove canary api d0495c3 (storage) - storage: add csi 725215e (workflow-cli) - ps: add ps describe 97ab7f2 (workflow-cli) - ps: pod list add ready and restarts (#42) eade475 (workflow-cli) - volumes: add filer client 11f55e1 (workflow-cli) - canary: remove canary api Fixes 59f299b (controller) - serializer: list type representation error d6f1e1a (storage) - charts: helm upgrade error 291a42a (timeseries) - charts: upgrade err e685d4b (workflow-cli) - config: unset typed values (#41) 86c800a (workflow-cli) - token: parameter unused warning Maintenance 197686a (builder) - controller-sdk-go: bump new version 9cbe813 (controller) - ps:logs: support pod all logs 22794cf (controller) - release: pre_release is incorrect 0c1a13e (controller) - controller: pipeline and httproute optimization 31d3daf (controller) - volumes: add add filer delete 141de25 (controller) - deps: bump djangorestframework from 3.15.1 to 3.15.2 in /rootfs (#137) a4296ad (controller) - migrate: use helm hook replace cluster lock 8b0a162 (imagebuilder) - woodpecker: add cron bb8350e (logger) - charts: change logsMaximumLines to 3000 f4844ac (monitor) - monitor: add startup_error_behavior 61e0ef6 (monitor) - telegraf: bump telegraf 1.31.0 4109d46 (monitor) - grafana: update kubernetes_deployment_metrics dashboard e440490 (monitor) - grafana: update kubernetes_deployment_metrics add container cpu and memory usage 12bcc9a (passport) - chart: job upgrade add passportLocation condition c854359 (rabbitmq) - rabbitmq: bump rabbitmq 3.13.4 53f1a25 (storage) - storage: remove savepoint 7c64dc4 (workflow-cli) - volumes: modify mount path regexp bf945ee (workflow-cli) - services: add domain display b1d31a3 (workflow-cli) - config: change config key pattern fea1f71 (workflow-cli) - ps: restart process types (#43) 40b9ff8 (workflow-cli) - time: format to local time b22f9a7 (workflow-cli) - workflow-cli: remove uuid display 2409220 (workflow-cli) - volume: mount path allow ‘-’ (#44) 2398647 (workflow-cli) - ps: optimize usage printing ","categories":"","description":"New Drycc Workflow Release v1.7.11","excerpt":"New Drycc Workflow Release v1.7.11","ref":"/blog/2024/07/19/drycc-workflow-v1.7.11/","tags":"","title":"Drycc Workflow v1.7.11"},{"body":"Workflow ## v1.7.9 -\u003e v1.7.10 Releases passport v1.3.0 -\u003e v1.3.1 Maintenance 12bcc9a (passport) - chart: job upgrade add passportLocation condition ","categories":"","description":"New Drycc Workflow Release v1.7.10","excerpt":"New Drycc Workflow Release v1.7.10","ref":"/blog/2024/05/08/drycc-workflow-v1.7.10/","tags":"","title":"Drycc Workflow v1.7.10"},{"body":"Workflow ## v1.7.8 -\u003e v1.7.9 Releases controller v1.9.0 -\u003e v1.10.0 Features d707420 (controller) - pipline: differential deployment ","categories":"","description":"New Drycc Workflow Release v1.7.9","excerpt":"New Drycc Workflow Release v1.7.9","ref":"/blog/2024/05/07/drycc-workflow-v1.7.9/","tags":"","title":"Drycc Workflow v1.7.9"},{"body":"Workflow ## v1.7.7 -\u003e v1.7.8 Releases builder v1.6.0 -\u003e v1.7.0 controller v1.8.0 -\u003e v1.9.0 workflow-cli v1.6.0 -\u003e v1.7.0 Features 384c7ee (builder) - domain: add procfile_type 26c8c7f (controller) - domain: add procfile_type bd49789 (workflow-cli) - domain: add procfile_type ","categories":"","description":"New Drycc Workflow Release v1.7.8","excerpt":"New Drycc Workflow Release v1.7.8","ref":"/blog/2024/05/01/drycc-workflow-v1.7.8/","tags":"","title":"Drycc Workflow v1.7.8"},{"body":"Workflow ## v1.7.6 -\u003e v1.7.7 Releases builder v1.5.1 -\u003e v1.6.0 controller v1.7.0 -\u003e v1.8.0 database v1.2.1 -\u003e v1.3.0 passport v1.2.0 -\u003e v1.3.0 imagebuilder v1.1.1 -\u003e v1.2.0 fluentbit v0.0.1 -\u003e v0.0.2 logger v1.3.3 -\u003e v1.3.4 storage v0.0.5 -\u003e v0.1.0 gateway v0.0.2 -\u003e v0.0.3 monitor v1.4.0 -\u003e v1.4.1 redis v1.3.2 -\u003e v1.4.0 timeseries v0.0.2 -\u003e v0.1.0 prometheus v0.1.1 -\u003e v0.1.2 rabbitmq v1.2.1 -\u003e v1.3.0 registry v1.2.2 -\u003e v1.3.0 registry-proxy v1.2.1 -\u003e v1.2.2 workflow-cli v1.5.2 -\u003e v1.6.0 Features 6c1cf5e (builder) - charts: reuses the value from an existing secret and config 65ae63c (builder) - pipeline: add dryccfile support bb7b11d (builder) - auth: add tokens api 39d022f (controller) - ps: add pod logs support 86056d0 (controller) - charts: reuses the value from an existing secret and config 4cf005c (controller) - limits: add limits plan support bf60e4b (controller) - controller: add init job 98f77a8 (controller) - pipeline: add dryccfile support 8ce9a83 (controller) - cert-manager: add tls events 7034f5d (controller) - config: deploy according to procfile_type 5554d8f (controller) - config: add typed_values 2c5bbad (controller) - auth: add token api 410d34e (database) - charts: reuses the value from an existing secret and config 693e4d1 (imagebuilder) - pipeline: add dryccfile support 7d9cc06 (imagebuilder) - config: add typed values 854e171 (passport) - charts: reuses the value from an existing secret and config 7ac9255 (passport) - oauth2: add authorization code for any grant type 4517547 (rabbitmq) - charts: reuses the value from an existing secret and config bccfcb4 (redis) - charts: reuses the value from an existing secret and config d887605 (registry) - charts: reuses the value from an existing secret and config ff09e5b (storage) - charts: reuses the value from an existing secret and config c6e2ac8 (timeseries) - charts: reuses the value from an existing secret and config 22c4c77 (workflow-cli) - apps: change drycc run to async a9e6369 (workflow-cli) - ps: add pod logs support 2bc31c8 (workflow-cli) - limits: add limits plan support f40398a (workflow-cli) - pipeline: add dryccfile support 03638ff (workflow-cli) - tls: add tls events 9113627 (workflow-cli) - config: add typed values 43ee760 (workflow-cli) - auth: add tokens api Fixes 50dfe64 (builder) - woodpecker: CI_SYSTEM_ARCH env removed ab09b24 (controller) - healthcheck: delete outdated code 52019b5 (controller) - services: default PORT change error f57ae42 (controller) - certificate: failed to create certificate 30c3f54 (controller) - woodpecker: CI_SYSTEM_ARCH env removed dbba43a (controller) - service: update port error e0459c5 (controller) - copy: use deepcopy replace copy 2122479 (controller) - charts: failed to call webhook 53d9977 (controller) - signals: config limits handle error afda287 (controller) - limits: always set default b350cb8 (database) - woodpecker: CI_SYSTEM_ARCH env removed b48a422 (fluentbit) - woodpecker: CI_SYSTEM_ARCH env removed 7cebca2 (gateway) - cert-manager: auto tls error 190c19b (imagebuilder) - woodpecker: CI_SYSTEM_ARCH env removed 2c6a6f9 (logger) - woodpecker: CI_SYSTEM_ARCH env removed 10bb98d (monitor) - woodpecker: CI_SYSTEM_ARCH env removed f8225dc (passport) - woodpecker: CI_SYSTEM_ARCH env removed 06db66c (prometheus) - woodpecker: CI_SYSTEM_ARCH env removed f4aff72 (rabbitmq) - woodpecker: CI_SYSTEM_ARCH env removed 88c18ff (redis) - woodpecker: CI_SYSTEM_ARCH env removed 5dcc19d (registry) - woodpecker: CI_SYSTEM_ARCH env removed 092a939 (registry-proxy) - woodpecker: CI_SYSTEM_ARCH env removed 3597ac9 (storage) - woodpecker: CI_SYSTEM_ARCH env removed 5a49b35 (timeseries) - woodpecker: CI_SYSTEM_ARCH env removed 0c4a48a (workflow-cli) - tls: change issuer options 06a2511 (workflow-cli) - tls: info error Maintenance 2f7617e (builder) - go: bump controller-sdk-go version aae2f29 (builder) - charts: add diagnostic mode 7304980 (builder) - woodpecker: migrations woodpecker-ci to 2 30b648b (builder) - charts: change canary app version 2afa006 (builder) - controller-sdk-go: bump version d127a90 (builder) - config: add typed values 32fdfd0 (controller) - charts: add diagnostic mode 0974942 (controller) - woodpecker: migrations woodpecker-ci to 2 f401e08 (controller) - python: bump python 3.12 c565959 (controller) - celery: remove retrieve_resource task 47be1a1 (controller) - requirements: bump drf 3.15.1 99f7468 (controller) - charts: add config to values.yaml 7d17f5c (controller) - scale: prohibit scale when there is a running pipeline f09e1c9 (controller) - resource: sort services and plans e817505 (controller) - limits: change default cpu and gpu name 5531b2f (controller) - auth: add password login 27473f7 (controller) - deps: bump gunicorn from 21.2.0 to 22.0.0 in /rootfs c1ee1c7 (controller) - deps: bump aiohttp from 3.9.3 to 3.9.4 in /rootfs affbcb5 (database) - postgres: add patroni and postgres params (#15) f9e4eda (database) - dockerfile: install vi 008b7b6 (database) - dockerfile: install vim instand of vi dbbfee1 (database) - charts: add diagnostic mode 2e26c33 (database) - woodpecker: migrations woodpecker-ci to 2 a1b81f2 (database) - charts: change canary app version bc725e8 (fluentbit) - charts: add diagnostic mode 5d73886 (fluentbit) - woodpecker: migrations woodpecker-ci to 2 b85072d (fluentbit) - charts: change canary app version 761174d (gateway) - gateway: change secrets name 1c304da (gateway) - woodpecker: migrations woodpecker-ci to 2 b919a4c (gateway) - charts: change canary app version 3cea298 (imagebuilder) - charts: allow all dns 653bcbe (imagebuilder) - woodpecker: migrations woodpecker-ci to 2 59daeab (imagebuilder) - charts: change canary app version 2834a5a (logger) - charts: add diagnostic mode 6685492 (logger) - woodpecker: migrations woodpecker-ci to 2 191cdaf (logger) - charts: change canary app version b3c3cfa (monitor) - charts: add diagnostic mode 796799d (monitor) - grafana: add node metrics dashboard ef2a222 (monitor) - woodpecker: migrations woodpecker-ci to 2 9c83090 (monitor) - charts: change canary app version 1a97c2c (passport) - charts: add diagnostic mode 353e1ae (passport) - logger: add oauth2_provider logger config fe735c0 (passport) - woodpecker: migrations woodpecker-ci to 2 41d6144 (passport) - charts: change canary app version 979d474 (passport) - python: bump python 3.12 e9f41a1 (passport) - requirements: bump drf 3.15.1 f479f4d (passport) - charts: add migrate job ad9abf6 (passport) - passport: migrations add run_before 95ac667 (passport) - passport: optimize the use of master and slave database rules 204f7fc (passport) - deps: bump gunicorn from 21.2.0 to 22.0.0 in /rootfs 90a6410 (prometheus) - woodpecker: migrations woodpecker-ci to 2 2d8eb44 (prometheus) - charts: change canary app version 9687a17 (rabbitmq) - charts: add diagnostic mode 35d3d5b (rabbitmq) - woodpecker: migrations woodpecker-ci to 2 6a6564d (rabbitmq) - charts: change canary app version cb6722f (redis) - charts: add diagnostic mode 9553497 (redis) - woodpecker: migrations woodpecker-ci to 2 1c8dc07 (redis) - charts: change canary app version 9fa2a32 (registry) - charts: add diagnostic mode 9b09e51 (registry) - woodpecker: migrations woodpecker-ci to 2 7dbd390 (registry) - charts: change canary app version e1d2a33 (registry-proxy) - charts: add diagnostic mode 3eabfdd (registry-proxy) - charts: remove default limits f8754da (registry-proxy) - woodpecker: migrations woodpecker-ci to 2 7df7316 (registry-proxy) - charts: change canary app version 861d3b8 (storage) - filer: modify the default parameters of the filer 5fa08da (storage) - woodpecker: migrations woodpecker-ci to 2 22c4620 (storage) - charts: change canary app version 6c1e29c (timeseries) - postgres: add patroni params e280d3f (timeseries) - dockerfile: install vi 5213617 (timeseries) - dockerfile: install vim instand of vi a569a57 (timeseries) - charts: add diagnostic mode b93ec70 (timeseries) - woodpecker: migrations woodpecker-ci to 2 ff3b870 (timeseries) - charts: change canary app version e334f74 (workflow-cli) - healthcheck: delete outdated healthcheck style 4f8b960 (workflow-cli) - auth: add password login ","categories":"","description":"New Drycc Workflow Release v1.7.7","excerpt":"New Drycc Workflow Release v1.7.7","ref":"/blog/2024/04/30/drycc-workflow-v1.7.7/","tags":"","title":"Drycc Workflow v1.7.7"},{"body":"These release notes for Drycc Workflow v1.7.5 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.7.4, please refer to the following change summary.\nWorkflow ## v1.7.4 -\u003e v1.7.5 Releases builder v1.5.0 -\u003e v1.5.1 controller v1.6.3 -\u003e v1.7.0 logger v1.3.2 -\u003e v1.3.3 storage v0.0.3 -\u003e v0.0.4 redis v1.3.1 -\u003e v1.3.2 rabbitmq v1.2.0 -\u003e v1.2.1 registry v1.2.1 -\u003e v1.2.2 workflow-cli v1.5.1 -\u003e v1.5.2 Features 95d130a (controller) - controller: volume support nfs Fixes ee2ee15 (controller) - controller: container entrypoint error 03ea4f8 (controller) - controller: class property have been deprecated in python 3.11 5f04d17 (controller) - controller: miss err msg 27972a3 (controller) - controller: load_db_state_to_k8s err a005d62 (controller) - controller: volume repeat path no error c7a5ba6 (rabbitmq) - rabbitmq: cpu usage to high 45c2077 (workflow-cli) - workflow-cli: miss err msg bc738bd (workflow-cli) - workflow-cli: volumes list format Maintenance 35e1c06 (builder) - builder: bump golang 1.22 26caa36 (controller) - deps: bump aiohttp from 3.9.0 to 3.9.2 in /rootfs (#118) 3d938c4 (controller) - deps: bump django from 4.2.7 to 4.2.10 e625c2f (logger) - logger: bump golang 1.22 bfa500d (redis) - redis: headless svc does not require ports 330209a (registry) - registry: headless svc does not require ports 48c42eb (storage) - storage: change volume index to leveldb f4fde9d (storage) - storage: add volume size limit 33e3684 (workflow-cli) - workflow-cli: volume support nfs 48d5950 (workflow-cli) - workflow-cli: bump golang 1.22 ","categories":"","description":"New Drycc Workflow Release v1.7.5","excerpt":"New Drycc Workflow Release v1.7.5","ref":"/blog/2024/02/27/drycc-workflow-v1.7.5/","tags":"","title":"Drycc Workflow v1.7.5"},{"body":"Workflow ## v1.7.5 -\u003e v1.7.6 Releases storage v0.0.4 -\u003e v0.0.5 Maintenance 6cb63b6 (storage) - seaweedfs: bump version 3.63 ","categories":"","description":"New Drycc Workflow Release v1.7.6","excerpt":"New Drycc Workflow Release v1.7.6","ref":"/blog/2024/02/27/drycc-workflow-v1.7.6/","tags":"","title":"Drycc Workflow v1.7.6"},{"body":"These release notes for Drycc Workflow v1.7.2 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.7.1, please refer to the following change summary.\nWorkflow ## v1.7.1 -\u003e v1.7.2 Releases controller v1.6.0 -\u003e v1.6.1 logger v1.3.1 -\u003e v1.3.2 storage v0.0.1 -\u003e v0.0.2 timeseries v0.0.1 -\u003e v0.0.2 prometheus v0.1.0 -\u003e v0.1.1 workflow-cli v1.5.0 -\u003e v1.5.1 Fixes 2fe80a6 (controller) - resources: after resources instance update, could not delete (#111) a4082ad (controller) - controller: resource status and binding e9bfccc (controller) - controller: fix multiple volumes mount at one dir error (#116) 58d2b4c (logger) - logger: redis conn error block 7cb2700 (prometheus) - prometheus: prometheus config basic_auth 7838c6b (storage) - storage: random accesskey secretkey d9dcdfb (storage) - storage: pod restart loses data 3cbdd29 (storage) - storage: tipd cannot start after deleting pod be7e11f (storage) - storage: jq command not found 878f674 (storage) - storage: charts updateStrategy error 06cfe56 (timeseries) - timeseries: the data node ip is incorrect Maintenance 7f29f5a (controller) - resources: retrieve resource instance response add message (#112) 4a84dcd (controller) - controller: add deploy default annotations (#113) 829d7e5 (controller) - controller: modify url match service name (#114) 30abf6d (controller) - controller: transfer app ownership in async dc6f45e (controller) - controller: add channel for pod exec af4f3a7 (controller) - controller: avoid error when secret no data field (#117) ca27956 (controller) - controller: add pod default security b2e9c64 (prometheus) - charts: node-exporter mount root (#2) 3cdb2b6 (storage) - storage: bump seaweedfs 3.61 00dd2fd (storage) - storage: add csi daemonset updateStrategy 48e763c (storage) - storage: add drycc storage upgrade document 841df90 (storage) - storage: bump seaweedfs 3.62 cefd52e (timeseries) - timeseries: add check data node exists ad1c46e (workflow-cli) - resources: resources instance add message 9f955c2 (workflow-cli) - workflow-cli: add short options cpu 65399ef (workflow-cli) - workflow-cli: add tty resize support ","categories":"","description":"New Drycc Workflow Release v1.7.2","excerpt":"New Drycc Workflow Release v1.7.2","ref":"/blog/2024/01/29/drycc-workflow-v1.7.2/","tags":"","title":"Drycc Workflow  v1.7.2"},{"body":"These release notes for Drycc Workflow v1.7.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.6.0, please refer to the following change summary.\nWorkflow ## v1.6.0 -\u003e v1.7.0 Releases builder v1.4.0 -\u003e v1.5.0 controller v1.5.1 -\u003e v1.6.0 database v1.2.0 -\u003e v1.2.1 passport v1.1.0 -\u003e v1.2.0 imagebuilder v1.1.0 -\u003e v1.1.1 fluentbit v0.0.0 -\u003e v0.0.1 logger v1.3.0 -\u003e v1.3.1 storage v0.0.0 -\u003e v0.0.1 gateway v0.0.0 -\u003e v0.0.1 monitor v1.3.0 -\u003e v1.4.0 redis v1.3.0 -\u003e v1.3.1 timeseries v0.0.0 -\u003e v0.0.1 prometheus v0.0.0 -\u003e v0.1.0 rabbitmq v1.1.0 -\u003e v1.2.0 registry v1.2.0 -\u003e v1.2.1 registry-proxy v1.2.0 -\u003e v1.2.1 Features fcbebda (builder) - builder: use TCPRoute expose service d02bb5d (controller) - controller: support app dns policy config 9aa968e (controller) - controller: add svc type support 62e2d34 (controller) - controller: improve the services api 4393755 (controller) - controller: use gateway replace ingress 323045d (controller) - controller: add canary support 3f81c97 (controller) - gateways: add addresses field 4e64aa7 (controller) - gateways: add addresses field 02ad581 (monitor) - grafana: add pd tikv dashboard 2a9e2b0 (monitor) - monitor: add storage monitor 41d5057 (monitor) - grafana: data source change to prometheus ec035d1 (monitor) - monitor: usegateway replace ingress c694c98 (monitor) - grafana: add drycc storage seaweedfs dashboard 1e1fdc8 (passport) - passport: use gateway replace ingress ffdb408 (prometheus) - prometheus: use gateway replace ingress 04152b9 (rabbitmq) - rabbitmq: use gateway replace ingress Fixes 0499500 (builder) - builder: manifest error 642491d (builder) - builder: no build log 873d146 (controller) - controller: do not set entrypoint when no procfile d9028c5 (controller) - controller: pip8 error 3efcfb7 (controller) - controller: manifest error 18a3a1a (controller) - controller: miss service error 94f796c (controller) - controller: drycc run pod should not restart 80f3161 (controller) - controller: monitor query error b76f2c5 (controller) - controller: read websocket delay b6e068e (controller) - controller: metrics sql tpl, gateway pod should not restart, cleanup old rs, update monitor datatbase config ad9adc6 (controller) - controller: rabbitmq sharding err 6773907 (controller) - controller: default k8s pod annotaions ffcf1f9 (controller) - controller: under-indented for visual indent 3afd0cf (controller) - controller: charts env error 769bb8b (database) - database: manifest error 769bb8b (database) - database: label conflict error 6a321c5 (database) - database: link error 558feae (fluentbit) - fluentbit: build charts error 98d8a2a (gateway) - fixup 8b5dde1 (gateway) - gateway: secretName 702866d (gateway) - gateway: build status f55dac1 (imagebuilder) - imagebuilder: manifest error ac13b5f (imagebuilder) - imagebuilder: build svg 6b7bbc5 (logger) - logger: manifest error 0136b5c (monitor) - monitor: manifest error f03d975 (passport) - passport: DRYCC_GRAFANA_DOMAIN error b530ea8 (passport) - passport: manifest error be5a0a7 (passport) - passport: change passport 1596c7f (rabbitmq) - rabbitmq: manifest error 0dc4f6f (rabbitmq) - rabbitmq: images-shard error 43293ae (redis) - redis: manifest error ca13b7d (registry) - registry: manifest error ab5c793 (registry) - registry: garbage collect error ab0fabc (registry-proxy) - registry-proxy: manifest error dfc7236 (registry-proxy) - registry-proxy: daemon yaml format 42c03be (storage) - storage: seaweedfs csi error 453e41a (timeseries) - timeseries: could not register node Docs 5433c89 (gateway) - gateway: add prerequisites 2f0c5d8 (logger) - logger: change architecture Maintenance bdd02eb (builder) - builder: use dynamic clusterrole name 66b4b25 (builder) - builder: upgrade new controller-go-sdk 219d86f (builder) - builder: upgrade go.mod 91f2f14 (builder) - builder: use woodpecker replace drone 9abca16 (builder) - woodpecker: use woodpecker ci build status f43dd50 (builder) - deps: bump golang.org/x/net from 0.2.0 to 0.7.0 0384c69 (builder) - builder: add chart appVersion e3149b9 (builder) - builder: upgrade codename to bookworm d88ea1b (builder) - builder: add codename build-arg ba59030 (builder) - builder: upgrade go.mod 1114dd7 (builder) - builder: bump common 1.1.2 fe50b62 (builder) - builder: change drycc gateway listener name db3950c (builder) - builder: remove gateway route 5a508bb (builder) - builder: use podman replace docker bbb9029 (builder) - deps: bump golang.org/x/net from 0.12.0 to 0.17.0 f4e5d6c (builder) - builder: remove health url 9111c8f (builder) - builder: remove io/ioutil 1f36e3d (controller) - deps: bump django from 4.1.2 to 4.1.6 in /rootfs e4ab434 (controller) - controller: use woodpecker replace drone 9f0301e (controller) - deps: bump django from 4.1.6 to 4.1.7 in /rootfs 3932423 (controller) - woodpecker: use woodpecker ci build status ae8b6b4 (controller) - setting: support KUBERNETES_LIMITS env config c10b9bc (controller) - controller: using the api_version instead of hard coding e6908cd (controller) - controller: upgrade requirements b0eba0c (controller) - controller: add route rules serializer 2e4b6a4 (controller) - controller: add chart appVersion 7d32b55 (controller) - controller: upgrade to bookworm f2dc8dd (controller) - controller: add codename build-arg 5739b83 (controller) - controller: use timescaledb replace influxdb 53892cb (controller) - controller: add timeseries 0fe0eae (controller) - controller: upgrade requirements 18b2a91 (controller) - deps: bump aiohttp from 3.8.4 to 3.8.5 in /rootfs f50874a (controller) - controller: bump common 1.1.2 956cd08 (controller) - controller: change drycc gateway listener name 9ab3ead (controller) - controller: remove passport url check a24c7b0 (controller) - controller: remove gateway route f7e539a (controller) - controller: change celery priority ab77a52 (controller) - controller: use podman replace docker 8e27501 (controller) - controller: dynamic app storage class 385978b (controller) - controller: list_pods datetime format b20362c (controller) - deps: bump django from 4.2.3 to 4.2.7 in /rootfs e11ae1b (controller) - controller: add cluster migrate ca6e9df (controller) - controller: async mount 9a7fbfc (controller) - controller: remove FOSSA 3d55279 (controller) - deps: bump aiohttp from 3.8.5 to 3.8.6 in /rootfs d498a11 (controller) - controller: add measure loalancers 249a985 (controller) - deps: bump aiohttp from 3.8.5 to 3.8.6 in /rootfs b967f58 (controller) - deps: bump aiohttp from 3.8.6 to 3.9.0 in /rootfs (#107) 8ca9ed6 (controller) - controller: no longer restrict reserved domain 9ff6649 (database) - database: add init database configure 9b4cd26 (database) - database: use dynamic clusterrole name b59cde4 (database) - database: remove minio require 86462f8 (database) - database: use woodpecker replace drone 1e8555a (database) - database: add chart appVersion 1b762d5 (database) - database: upgrade codename to bookworm 9ffe1fd (database) - database: add codename build-arg 69466d7 (database) - database: add database extension beb4b62 (database) - database: bump common 1.1.2 67e2714 (database) - database: use podman replace docker 8f328f8 (fluentbit) - fluentbit: no limit buffer size for kube api fc0552c (fluentbit) - fluentbit: use podman replace docker 63a6cab (fluentbit) - fluentbit: change fluentbit match 220f81a (fluentbit) - fluentbit: run as no-root aec1393 (fluentbit) - fluentbit: change configmap name 1af4fd2 (fluentbit) - fluentbit: change default stream name bef90ad (gateway) - gateway: add route for gateway d523ddb (gateway) - gateway: change drycc gateway listener name d9137f4 (gateway) - gateway: add chart appVersion 0425dd4 (gateway) - gateway: add customListeners 3982b86 (imagebuilder) - imagebuilder: use woodpecker replace drone 3e4e7a3 (imagebuilder) - imagebuilder: add chart appVersion 8df6e8e (imagebuilder) - imagebuilder: upgrade stack version a5601f7 (imagebuilder) - imagebuilder: add drycc_app env 07465f8 (imagebuilder) - imagebuilder: upgrade to bookworm 00d22d2 (imagebuilder) - imagebuilder: add codename build-arg 0b7a24e (imagebuilder) - imagebuilder: upgrade podman/mc/caddy a7d8be8 (imagebuilder) - imagebuilder: use podman replace docker 6b2da83 (logger) - logger: use woodpecker replace drone 8245b25 (logger) - woodpecker: use woodpecker ci build status f811a74 (logger) - logger: add chart appVersion 413f6f6 (logger) - logger: upgrade codename to bookworm 2ac6b10 (logger) - logger: add codename build-arg 2581426 (logger) - logger: bump redis to v9 364b25a (logger) - logger: bump common 1.1.2 dc169a3 (logger) - logger: use fluentbit replace fluentd d855d91 (logger) - logger: use podman replace docker f767235 (monitor) - monitor: add off-cluster passport configure ab23936 (monitor) - monitor: use dynamic clusterrole name 47beee0 (monitor) - monitor: change tikv secret key af7703f (monitor) - grafana: remove panel when component off-cluster 1b870c2 (monitor) - monitor: use woodpecker replace drone 4a5f1f1 (monitor) - grafana: up ldap api_url config 143cabe (monitor) - monitor: add prometheus architecture diagram 93091c2 (monitor) - woodpecker: use woodpecker ci build status 0b7045a (monitor) - grafana: add dashboard kubernetes_deployment_metrics 2fb1839 (monitor) - woodpecker: pipeline config VERSION, when build container image e272416 (monitor) - monitor: add chart appVersion abc0e53 (monitor) - monitor: upgrade codename to bookworm 86cc01b (monitor) - monitor: add codename build-arg 1cd849f (monitor) - monitor: add postgresql outputs c3205c0 (monitor) - monitor: change default agent config 8c802c0 (monitor) - monitor: add timeseries database e9abc40 (monitor) - monitor: bump common 1.1.2 6af66cd (monitor) - monitor: change drycc gateway listener name d02d718 (monitor) - monitor: remove gateway route 3509c29 (monitor) - monitor: use podman replace docker ed7bfa2 (monitor) - monitor: optimize env PROMETHEUS_URL da89bef (passport) - passport: charts codereview 61c4a96 (passport) - passport: support init app config 9101006 (passport) - passport: add initApplications to charts 7dd7fa4 (passport) - passport: use woodpecker replace drone 4400199 (passport) - woodpecker: use woodpecker ci build status 6b2c546 (passport) - passport: change secret name to drycc-passport-auto-tls c8bd824 (passport) - passport: upgrade requirements aee5aef (passport) - passport: add chart appVersion 2d81953 (passport) - passport: upgrade codename to bookworm 9e66242 (passport) - passport: add codename build-arg 0fca998 (passport) - passport: upgrade requirements 3482528 (passport) - passport: bump common 1.1.2 0c5ec93 (passport) - passport: change drycc gateway listener name f7b8f53 (passport) - passport: remove gateway route baf69da (passport) - passport: use podman replace docker fcd45dd (passport) - passport: add cluster migrate da6d32a (prometheus) - prometheus: add prometheus-config 683de9e (prometheus) - prometheus: use podman replace docker 3323300 (prometheus) - prometheus: remove gateway route da1d356 (prometheus) - prometheus: change drycc gateway listener name 4e7a936 (prometheus) - prometheus: bump common 1.1.2 44c1c6f (prometheus) - prometheus: add codename build-arg d1f1dda (prometheus) - prometheus: upgrade codename to bookworm 0836fc1 (prometheus) - prometheus: add chart appVersion 9e13232 (prometheus) - prometheus: add LICENSE f53e14a (rabbitmq) - rabbitmq: remove auto user 0ec7277 (rabbitmq) - rabbitmq: use woodpecker replace drone f376a30 (rabbitmq) - woodpecker: use woodpecker ci build status 51405d8 (rabbitmq) - rabbitmq: add chart appVersion 463ca03 (rabbitmq) - rabbitmq: upgrade codename to bookworm 1978a71 (rabbitmq) - rabbitmq: add codename build-arg 139277f (rabbitmq) - rabbitmq: bump common 1.1.2 be49741 (rabbitmq) - rabbitmq: change drycc gateway listener name 6d22518 (rabbitmq) - rabbitmq: remove gateway route 0eb7833 (rabbitmq) - rabbitmq: add check shards 9211063 (rabbitmq) - rabbitmq: erlang vm tuning optimization 648a78d (rabbitmq) - rabbitmq: use podman replace docker 0b43a4d (rabbitmq) - rabbitmq: add x-random exchange ad1c4da (redis) - redis: use woodpecker replace drone 3f37f92 (redis) - redis: add chart appVersion e3bef7a (redis) - redis: upgrade codename to bookworm 4e806d4 (redis) - redis: add codename build-arg d5023be (redis) - redis: bump common 1.1.2 98f5d6f (redis) - redis: use podman replace docker 063f29e (registry) - registry: use woodpecker replace drone 17bf8ae (registry) - woodpecker: use woodpecker ci build status 7bbad15 (registry) - registry: add chart appVersion 279154f (registry) - registry: upgrade codename to bookworm 3e4ae84 (registry) - registry: add codename build-arg fa322d6 (registry) - registry: bump common 1.1.2 6c18fe0 (registry) - registry: use podman replace docker 0bc8472 (registry) - registry: remove health url 5dacd9f (registry) - registry: add wait-for-port check fdeefc3 (registry) - registry: use headless 08bf9f8 (registry) - registry: change registry port to 5000 40bcea2 (registry) - registry: add registry push test 871b8e7 (registry) - registry: add default env 7f3b3ac (registry) - registry: bump registry 2.8.3 569f15d (registry-proxy) - registry-proxy: use woodpecker replace drone cc33caf (registry-proxy) - woodpecker: use woodpecker ci build status 0002aab (registry-proxy) - registry-proxy: add chart appVersion 40af10b (registry-proxy) - registry-proxy: upgrade codename to bookworm c56b9df (registry-proxy) - registry-proxy: add codename build-arg 9d5bfe0 (registry-proxy) - registry-proxy: use podman replace docker e6a3350 (registry-proxy) - registry-proxy: change worker_processes to 1 726f39d (storage) - storage: add volume compactionMBps a5aa2d8 (storage) - storage: add threshold to vacuum and reclaim spaces e687d04 (storage) - storage: delete disk type in single disk case 75ee2e4 (storage) - storage: change datanode replicas to 4 c5fd7ba (storage) - storage: delete useless env b3826ea (storage) - storage: add ssd hdd dir 29881a0 (storage) - storage: add balance cronjob c5a0f51 (storage) - storage: add defaultReplication for seaweedfs master 543c7a2 (timeseries) - timeseries: use podman replace docker 5376024 (timeseries) - timeseries: update timeseries-service-replica 52e8520 (timeseries) - timeseries: bump common 1.1.2 f82657c (timeseries) - timeseries: add start script ","categories":"","description":"New Drycc Workflow Release v1.7.0","excerpt":"New Drycc Workflow Release v1.7.0","ref":"/blog/2023/12/08/drycc-workflow-v1.7.0/","tags":"","title":"Drycc Workflow v1.7.0"},{"body":"These release notes for Drycc Workflow v1.6.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.5.0, please refer to the following change summary.\nWorkflow ## v1.5.0 -\u003e v1.6.0 Releases builder v1.3.0 -\u003e v1.4.0 controller v1.4.0 -\u003e v1.5.0 passport v1.0.0 -\u003e v1.1.0 database v1.1.0 -\u003e v1.2.0 imagebuilder v1.0.1 -\u003e v1.1.0 fluentd v1.2.0 -\u003e v1.3.0 logger v1.2.0 -\u003e v1.3.0 storage v1.2.0 -\u003e v1.3.0 monitor v1.2.0 -\u003e v1.3.0 redis v1.2.0 -\u003e v1.3.0 influxdb v1.1.0 -\u003e v1.2.0 rabbitmq v1.0.0 -\u003e v1.1.0 registry v1.1.0 -\u003e v1.2.0 registry-proxy v1.1.0 -\u003e v1.2.0 Features 52517d9 (builder) - builder: update controller-sdk-go 1d78ca0 (builder) - builder: add affinity 26b6980 (builder) - builder: switch charts to oci bfd4385 (controller) - controller: add get manager user status 874208d (controller) - controller: unified measurement model cadf98f (controller) - controller: add admission webhook e0050c2 (controller) - controller: new measurement model a11ba58 (controller) - controller: multi pod restart uses async fb3c15d (controller) - controller: add check app owner status 3d78b76 (controller) - controller: add resource services api 3d6a201 (controller) - controller: add search apps api 01c443a (controller) - controller: add KUBERNETES_CPU_MEMORY_RATIO parameter 7c26232 (controller) - controller: add volume size limit 3bee749 (controller) - controller: add annotations support 23cd97c (controller) - controller: traefik v2 support e37b7db (controller) - controller: add affinity b3b367b (controller) - controller: add volume expand support a4e154a (controller) - controller: add database replica support 2f37216 (controller) - controller: switch wsgi to asgi b3314a5 (controller) - controller: add pod exec api 75df2dc (controller) - controller: add stream support for app logs 4229bad (controller) - ccontroller: switch charts to oci 89bb19b (database) - database: upgrade to pg14 9f45a5d (database) - database: add hugepages support c4008c9 (database) - database: add affinity 411a7b2 (database) - postgres: use patroni 64e5cb0 (database) - database: switch charts to oci 2bab823 (fluentd) - fluentd: switch charts to oci 337ba62 (imagebuilder) - imagebuilder: run podman as rootless 4396ffa (imagebuilder) - imagebuilder: switch to oci charts f37ae09 (influxdb) - influxdb: add affinity 04503b2 (influxdb) - influxdb: add influxdb ha 41ddad5 (influxdb) - influxdb: switch charts to oci 2006480 (logger) - logger: use redis stream replace nsqd ab23d17 (logger) - logger: add affinity 81d4e9d (logger) - logger: switch charts to oci c3d9796 (monitor) - monitor: add affinity cd9de3c (monitor) - monitor: switch to oci charts 318a73f (passport) - passport: add change user confirm 79ef100 (passport) - passport: add re login at authorize 6927bb5 (passport) - passport: add affinity 3146a09 (passport) - passport: add google reCAPTCHA 802abcd (passport) - passport: add replica database support a0dcd1b (passport) - passport: switch wsgi to asgi 4c9dbba (passport) - passport: switch charts to oci 74825f7 (rabbitmq) - rabbitmq: add rabbitmq managentment ingress 12cf7d6 (rabbitmq) - rabbitmq: add affinity 103417d (rabbitmq) - rabbitmq: switch charts to oci 5d428bb (redis) - redis: add affinity a88c1a9 (redis) - redis: switch charts to oci 541585d (registry) - registry: add affinity e9ca9d4 (registry) - registry: add garbage-collect cronjob ec62a59 (registry) - registry: switch charts to oci fde0b07 (registry-proxy) - registry-proxy: switch charts to oci be14eb4 (storage) - minio: add affinity 51af696 (storage) - storage: add k8s csi support 76a75d9 (storage) - storage: add cluster health checker a17dc8c (storage) - storage: switch charts to oci Fixes e4f44fb (builder) - builder: no error return e38dfc7 (builder) - builderControllerHost/ControllerPort init error ff9069f (controller) - controller: influxdb query error f7f5069 (controller) - controller: authentication 500 7e297a8 (controller) - controller: add check remote user status 9db28e1 (controller) - controller: celery MaxRetriesExceededError 4bcff08 (controller) - controller: wrong name d69fde2 (controller) - controller: traefik ingress create error a3ad743 (controller) - fixup(controller: user login error 662c8dd (controller) - controller: change influxdb port 957bdf6 (controller) - controller: validate rsa key pairing before storage 419ec4c (controller) - controller: kubernetes pod/exec cluster role a67edaa (controller) - controller: Cannot routing:disable e09e214 (controller) - controller: allowlist cannot remove 318b126 (controller) - controller: domains update error 92855eb (database) - database: premission denied bde945a (database) - fixup(postgres: support arm, fix Failed to build psutil 7854d45 (database) - fixup(postgres: user name converted to lowercase letters 57b2a07 (fluentd) - fluentd: ifconfig_path not found 20e72b9 (imagebuilder) - imagebuilder: upgrade pack version 651db8a (imagebuilder) - imagebuilder: chown uid gid order d2e9164 (influxdb) - influxdb: proxy not running 3a1d361 (monitor) - monitor: charts naming d754ae0 (monitor) - monitor: telegraf init error 63f9e34 (monitor) - monitor: affinity error 95ae1e5 (passport) - passport: yarn build fail 3f5365e (passport) - passport: wrong name 907f17b (passport) - passport: change uid gid to 1001 e3911e0 (passport) - passport: ‘registration_done’ not found 2ace5f0 (passport) - passport: ui style b3ba1e1 (passport) - passport privacy policy link 172e9c8 (passport) - passport: check databaseReplicaUrl error a3aeb70 (rabbitmq) - passport: change uid gid to 1001 5c73dcf (redis) - reids: DRYCC_REGISTY misspelling d7e3baf (redis) - redis: env miss cadaa91 (registry) - registry: set gid uid to 1001 d524217 (registry) - registry: storage run error 854f912 (registry) - registry: chown uid gid order e642bb7 (registry-proxy) - registry-proxy: containerPort error 8dfd029 (registry-proxy) - registry-proxy: chown uid gid order bbea364 (storage) - minio: premission denied 97deba1 (storage) - storage: node unimplemented error b9bdeff (storage) - storage: pd can not connect each other Style 1edb10c (controller) - controller: database convention over configuration 1960cc3 (database) - database: database name convention over configuration 06d1f5d (imagebuilder) - imagebuilder: URL to Url b8a8941 (passport) - passport: database convention over configuration Maintenance 8e9a199 (builder) - builder: upgrade controller-sdk-go 4840151 (builder) - builder: use exec runner replace docker runner 68ccfb1 (builder) - builder: canonical charts naming 8f971cb (builder) - builder: provide any additional service annotations fe2c55d (builder) - dockerfile: use drycc/base image 2b5e706 (builder) - dockerfile: change user and workdir 7a6c8d3 (builder) - builder: set gid uid to 1001 fe494f7 (builder) - dockerfile: use uid gid a7c8752 (builder) - builder: change nodes to pod affinity eb2e94c (builder) - database: bump mc 2022.04.01.23.44.48 cfaae66 (builder) - builder: use registry.drycc.cc replace docker.io d7d2890 (builder) - builder: change default imagebuilder registry ecfdb19 (builder) - imagebuilder: change python-dev registry 6da17f4 (builder) - builder: https://github.com/minio/minio/issues/14331 1a57e5b (builder) - builder: https://github.com/minio/minio/issues/14331 f1464fa (builder) - builder: https://github.com/minio/minio/issues/13799 b1e1c4f (builder) - builder: use env replace creds volume 71a4145 (builder) - builder: bump go.mod 3567688 (builder) - builder: fine management affinity 73ea38b (builder) - builder: change storage to minio 1f91321 (builder) - builder: use testify replace assert d148b9c (builder) - builder: add check storage health b768101 (builder) - builder: change initContainers 1b3bec3 (builder) - builder: add replicas 5cb0d61 (builder) - builder: upgrade to latest controller-sdk-go 98b9d58 (builder) - builder: upgrade new require 65817c3 (builder) - builder: change drycc.cc to www.drycc.cc 4e3f9d0 (controller) - controller: add celery retry mechanism f6716fe (controller) - controller: change cronjob name eb60693 (controller) - controller: refine celery task priority 66905e9 (controller) - controller: change manager auth ea20c41 (controller) - controller: remove start/stop api 4c8fc80 (controller) - controller: improve tasks error handling cf7402e (controller) - controller: add blocklist api 80f14dd (controller) - controller: use get_user_model replace auth.User ffc7bb7 (controller) - controller: use JSONField replace ArrayField 370df8c (controller) - controller: add validate metric 29084ce (controller) - controller: use user id request manager api 718fe12 (controller) - controller change urlpatterns order 71f4042 (controller) - controller: measurements uses lowercase letters e5123ea (controller) - controller: change resource unit to number 18fee9a (controller) - deps: bump celery from 5.1.2 to 5.2.2 in /rootfs ffca6c1 (controller) - controller: use exec runner replace docker runner 9ec12e1 (controller) - controller: simplify drone configuration 4b4749e (controller) - controller: set default CSRF_COOKIE_SECURE false 2ef6338 (controller) - deps: bump django from 3.2.5 to 3.2.10 in /rootfs c7570d0 (controller) - deps: bump django from 3.2.10 to 3.2.11 in /rootfs 8b17bc1 (controller) - controller: canonical charts naming c928fb0 (controller) - controller: use rabbitmq cluster f917185 (controller) - controller: provide any additional service annotations 22a8f63 (controller) - deps: bump django from 3.2.11 to 3.2.12 in /rootfs 3cc3b00 (controller) - dockerfile: use drycc/base image ee274f6 (controller) - controller: set venv profile ce6b069 (controller) - controller: set gid uid to 1001 3a105d3 (controller) - dockerfile: use uid gid 15f9b0e (controller) - controller: code review 01e6fd9 (controller) - controller: use passport user id 893ee31 (controller) - oauth2: update user info pipline 3028fb4 (controller) - user: set AnonymousUser username 5daf82d (controller) - controller: set worker_cancel_long_running_tasks_on_connection_loss 61f2c53 (controller) - controller: change nodes to pod affinity 88feb1d (controller) - imagebuilder: python=3.10.4 rabbitmq=3.9.14 914e03f (controller) - controller: use registry.drycc.cc replace docker.io a5bb548 (controller) - controller: change python-dev registry 3ecdd7c (controller) - controller: add a separate rabbitmqUrl configuration 967cb11 (controller) - controller: remove APP_STORAGE 473d2b5 (controller) - controller: use env replace creds volume e410d4c (controller) - deps: bump django from 3.2.12 to 3.2.13 in /rootfs c6ef777 (controller) - controller: simplified passport config 0fd3233 (controller) - controller: remove settings hardcode a64e99c (controller) - controller: change passport config 62aba25 (controller) - controller: set cronjob timezone to utc 760b70b (controller) - controller: change default ratio 8dffc3a (controller) - controller: fine management affinity 26043c4 (controller) - controller: change default app storage 608bd8d (controller) - deps: bump django from 3.2.13 to 3.2.14 in /rootfs 18ed0c2 (controller) - controller: remove conjob affinity add6712 (controller) - controller: add volume expand support use patch cc1ad13 (controller) - controller: add startupProbe 0e9a603 (controller) - controller: add clearsocial cronjob eb6f05d (controller) - controller: change initContainers 762c676 (controller) - controller: change replicas abd7e8c (controller) - deps: bump django from 3.2.14 to 3.2.15 in /rootfs 07fdf1b (controller) - controller: remove database conn_max_age ef8e41f (controller) - controller: add database replica check 79143f2 (controller) - controller: upgrade new require a624048 (controller) - controller: add app.refresh func annotation b22d367 (controller) - controller: optimize app refresh timing fe98f0c (database) - database: use exec runner replace docker runner 5e00c11 (database) - database: canonical charts naming d2cb860 (database) - database: disable huge_pages 197d80d (database) - database: add persistence 1c3e645 (database) - database: provide any additional service annotations 37730ab (database) - dockerfile: use drycc/base image 5014112 (database) - dockerfile: change entrypoint 29b538e (database) - database: change nodes to pod affinity c2bb074 (database) - database: bump python 3.10.4 and mc 2022.04.01.23.44.48 077a4e9 (database) - database: use registry.drycc.cc replace docker.io 560bdb9 (database) - database: change python-dev registry 1e54b55 (database) - database: https://github.com/minio/minio/issues/14331 d646672 (database) - database: https://github.com/minio/minio/issues/13799 a6ac4e3 (database) - database: use env replace creds volume 9618d87 (database) - database: fine management affinity b823273 (database) - database: change minio to storage 7bd5a90 (database) - database: add check storage health 20c6d96 (database) - database: fix storage run error 8bde830 (database) - database: upgrade to pg 14.5 a33b5e5 (fluentd) - fluentd: update plugins eed7a78 (fluentd) - fluentd: update filter kubernetes setting cc83dd8 (fluentd) - fluentd: update elasticsearch store setting and support exclude specific container logs ba2feb2 (fluentd) - fluentd: use exec runner replace docker runner d528676 (fluentd) - fluentd: simplify drone configuration dece82d (fluentd) - fluentd: canonical charts naming 4e0a802 (fluentd) - fluend: replace nsqd with redis 15ceca0 (fluentd) - dockerfile: use drycc/base image a7f619f (fluentd) - dockerfile: change workdir 9adf5ed (fluentd) - database: bump fluentd 1.14.6 50c14c2 (fluentd) - fluentd: use registry.drycc.cc replace docker.io 83171b1 (fluentd) - fluentd: change python-dev registry ec83581 (fluentd) - fluentd: unified reids declaration 07c63e2 (fluentd) - fluentd: upgrade fluentd 1.15.2 65df9be (imagebuilder) - imagebuilder: update pack version 66cab35 (imagebuilder) - imagebuilder: use dind replace go-dev 0c82060 (imagebuilder) - imagebuilder: use exec runner replace docker runner 8146da9 (imagebuilder) - imagebuilder: canonical charts naming 7d97241 (imagebuilder) - dockerfile: use drycc/base image 07e805c (imagebuilder) - imagebuilder: change default buildpack 8d1038d (imagebuilder) - imagebuilder: upgrade podman to 4.0.1 62d3687 (imagebuilder) - imagebuilder: change workdir to /workspace da8bfb0 (imagebuilder) - imagebuilder: change uid gid to 1001 d44e3bc (imagebuilder) - imagebuilder: upgrade stack 5b0c7e6 (imagebuilder) - imagebuilder: use registry.drycc.cc replace docker.io f74cbf6 (imagebuilder) - imagebuilder: add defaultBuildpacksURL 941d493 (imagebuilder) - imagebuilder: https://github.com/minio/minio/issues/14331 449be91 (imagebuilder) - imagebuilder: https://github.com/minio/minio/issues/13799 63b0523 (imagebuilder) - imagebuilder: use env replace creds volume 4e8a6e5 (imagebuilder) - imagebuilder: add imagebuilder config 2d891f5 (imagebuilder) - imagebuilder: change minio to storage addceda (imagebuilder) - imagebuilder: upgrade new require a6e569f (imagebuilder) - imagebuilder: pack_build add –env-file parameter 6191ff5 (influxdb) - influxdb: use exec runner replace docker runner dc3f8c7 (influxdb) - influxdb: canonical charts naming 6b5c819 (influxdb) - influxdb: new ingress style 68b381d (influxdb) - influxdb: provide any additional service annotations ea20eb8 (influxdb) - dockerfile: use drycc/base image 64c0a71 (influxdb) - influxdb: set gid uid to 1001 a709ca1 (influxdb) - influxdb: use DRYCC_UID DRYCC_GID env 740dff0 (influxdb) - influxdb: use common affinity template e035673 (influxdb) - influxdb: change nodes to pod affinity f1cefbd (influxdb) - influxdb: use registry.drycc.cc replace docker.io a00100e (influxdb) - influxdb: fine management affinity 9d165ef (influxdb) - influxdb: add probe bee7fff (influxdb) - influxdb: upgrade to influxdb 2.4.0 254914c (logger) - logger: use exec runner replace docker runner 8d91c68 (logger) - logger: canonical charts naming b6d2182 (logger) - logger: provide any additional service annotations c35e59a (logger) - dockerfile: use drycc/base image a63c070 (logger) - logger: change workdir to /workspace a594b28 (logger) - logger: set gid uid to 1001 9a90e22 (logger) - dockerfile: use uid gid 36493b4 (logger) - logger: use common affinity template 897a3a5 (logger) - logger: change nodes to pod affinity 03b32ab (logger) - logger: use registry.drycc.cc replace docker.io a50ba5f (logger) - logger: change python-dev registry 23187a3 (logger) - logger: unified reids declaration aaa129a (logger) - logger: fine management affinity be4f656 (logger) - logger: add replicas 7c25459 (logger) - charts: add NetworkPolicy 6810149 (logger) - logger: remove memory storage a918c50 (logger) - logger: add .vscode to .gitignore a415210 (logger) - logger: add log follow support 59b1da3 (logger) - logger: upgrade new require 27cc151 (monitor) - monitor: use exec runner replace docker runner 07d6a9d (monitor) - monitor: canonical charts naming 1054357 (monitor) - monitor: use redis default port e3673df (monitor) - monitor: remove nsqd fc9dd3e (monitor) - monitor: new ingress style 856a898 (monitor) - monitor: add default user env 9857535 (monitor) - monitor: add random user 38b5a04 (monitor) - grafana: oauth auto login 5dfc579 (monitor) - monitor: upgrade version e121b5a (monitor) - monitor: provide any additional service annotations 84462a0 (monitor) - dockerfile: use drycc/base image b9e8ce8 (monitor) - monitor: chore(imagebuilder): change uid gid to 1001 05ee8ab (monitor) - dockerfile: use uid gid e1fa68e (monitor) - monitor: use common affinity template b8f302b (monitor) - monitor: change nodes to pod affinity 4fc991f (monitor) - database: bump telegraf 1.22.0 and grafana 8.4.5 21a2f6a (monitor) - monitor: use registry.drycc.cc replace docker.io acc976f (monitor) - monitor: change python-dev registry 62d76c1 (monitor) - monitor: unified reids declaration b3c57ad (monitor) - monitor: optimize oauth2 configuration 70af6b0 (monitor) - monitor: change passport config 69f9a88 (monitor) - monitor: fine management affinity 2fb278f (monitor) - monitor: rename influxdb port 17548ff (monitor) - grafana: update dashborad 69d7bbd (monitor) - grafana: influx dashborad disk size 75db1b0 (monitor) - monitor: upgrade new grafana/telegraf 80504a1 (monitor) - grafana: update influx and redis dashboard f7078cb (monitor) - monitor:chown use env 91ae0dd (passport) - passport: optimize login display 2d3bbbc (passport) - passport: change drycc logo 59790a7 (passport) - passport: make user email unique faea034 (passport) - passport: use strtobool 1fbf2bc (passport) - passport: use yarn replace npm 119cac8 (passport) - passport: use exec runner replace docker runner cff5062 (passport) - passport: set default CSRF_COOKIE_SECURE false 9cc0210 (passport) - passport: canonical charts naming 9ab3896 (passport) - passport: new ingress style 259ccc9 (passport) - passport: provide any additional service annotations af1bbcd (passport) - dockerfile: use drycc/base image 9ae5373 (passport) - passport: set venv profile 8f61090 (passport) - dockerfile: use uid gid fcaf72d (passport) - passport: upgrade npm package 546dcd5 (passport) - passport: add license 4bda2d6 (passport) - passport: use minify 73b0fd1 (passport) - passport: use common affinity template 278fe7a (passport) - passport: change nodes to pod affinity 3cd93d3 (passport) - passport: add reactive 370b493 (passport) - passport: add footer 483cbd6 (passport) - passport: use h_captcha replace re_captcha 3d1675e (passport) - database: bump python 3.10.4 and node 16.14.2 86a7835 (passport) - passport: use registry.drycc.cc replace docker.io 2d65355 (passport) - passport: change python-dev registry 90c1444 (passport) - passport: unified reids declaration 2e0e417 (passport) - passport: fix firefox footer ad274be (passport) - passport: use bulecss f986d8b (passport) - passport: add main footer 3e52867 (passport) - passport: dynamic settings for vue 38adabc (passport) - passport: change passport config f8d6b60 (passport) - passport: fine management affinity 2cbd79d (passport) - passport: remove database conn_max_age 7122797 (passport) - passport: change drycc.cc to www.drycc.cc 8cc84cd (rabbitmq) - rabbitmq: use exec runner replace docker runner f35930f (rabbitmq) - rabbitmq: add rabbitmq cluster support fbfa3ba (rabbitmq) - rabbitmq: canonical charts naming ca60701 (rabbitmq) - rabbitmq: use volumeClaimTemplates fe5d1b4 (rabbitmq) - rabbitmq: add sharding support 9c4ab97 (rabbitmq) - rabbitmq: provide any additional service annotations 348a88a (rabbitmq) - dockerfile: use drycc/base image 2388be1 (rabbitmq) - rabbitmq: upgrade erlang to 24.2.2 db2eaa5 (rabbitmq) - dockerfile: use uid gid 772afd1 (rabbitmq) - rabbitmq: change to wait pid file 2bfc25e (rabbitmq) - rabbitmq: use common affinity template 11d505e (rabbitmq) - rabbitmq: change nodes to pod affinity 69d63f1 (rabbitmq) - database: bump erlang 24.3.3 and rabbitmq 3.9.14 8380299 (rabbitmq) - rabbitmq: use registry.drycc.cc replace docker.io b3f69f1 (rabbitmq) - rabbitmq: add check rabbitmqLocaltion 5327c76 (rabbitmq) - rabbitmq: fine management affinity 5c66b5a (rabbitmq) - rabbitmq: change probe 27bebf9 (rabbitmq) - rabbitmq: add start-rabbitmq script 86ee6a7 (rabbitmq) - rabbitmq: upgrade to rabbitmq 3.10.7 1f29683 (redis) - redis: use exec runner replace docker runner a5041fc (redis) - redis: canonical charts naming 64468c2 (redis) - redis: add redis persistence de5d753 (redis) - redis: provide any additional service annotations f644639 (redis) - dockerfile: use drycc/base image 98051d2 (redis) - redis: premission denied bcb548e (redis) - dockerfile: use uid gid 524aa41 (redis) - redis: use common affinity template 26c9466 (redis) - redis: change nodes to pod affinity b67d7a2 (redis) - redis: use registry.drycc.cc replace docker.io 839ec50 (redis) - redis: use env replace creds volume 237ca86 (redis) - redis: fine management affinity bdd968d (redis) - redis: upgrade neew require 8b2910f (registry) - registry: use exec runner replace docker runner eedbe78 (registry) - registry: canonical charts naming 0241615 (registry) - registry: provide any additional service annotations 9b58da4 (registry) - dockerfile: use drycc/base image ab6acb7 (registry) - registry: change workdir to /workspace f368bf7 (registry) - registry: use DRYCC_UID DRYCC_GID env f4b9041 (registry) - registry: use common affinity template c2e87ca (registry) - registry: change nodes to pod affinity feb6aba (registry) - database: bump mc 2022.04.01.23.44.48 956932b (registry) - rregistry: use registry.drycc.cc replace docker.io deda8d8 (registry) - registry: move registry-secret.yaml from workflow to registry f52c7bf (registry) - registry: change python-dev registry 007fe03 (registry) - registry: https://github.com/minio/minio/issues/14331 d620c6d (registry) - registry: https://github.com/minio/minio/issues/13799 85e6b73 (registry) - registry: use env replace creds volume 6a1155d (registry) - registry: fine management affinity 7b8ebae (registry) - registry: change minio to storage 1338951 (registry) - registry: add check storage health 2fa769d (registry) - registry: change probe f187cbf (registry) - registry: add replicas 09d8a7b (registry) - registry: upgrade to mc 2022.08.28.20.08.11 4b187b8 (registry-proxy) - registry-proxy: use exec runner replace docker runner 29ffbbe (registry-proxy) - registry-proxy: canonical charts naming 6d783ba (registry-proxy) - registry-proxy: remove use_cni 8cf05cf (registry-proxy) - dockerfile: use drycc/base image 090e286 (registry-proxy) - registry-proxy: chore(imagebuilder): change uid gid to 1001 7cf6120 (registry-proxy) - registry-proxy: use DRYCC_UID DRYCC_GID env 3a00697 (registry-proxy) - registry-proxy: use registry.drycc.cc replace docker.io 30e69e8 (registry-proxy) - registry-proxy: add registry basic auth proxy 942abce (registry-proxy) - registry-proxy: upgrade to nginx 1.23.1 5ea3297 (storage) - minio: use exec runner replace docker runner 8306add (storage) - minio: canonical charts naming c917e9f (storage) - minio: provide any additional service annotations 042c732 (storage) - dockerfile: use drycc/base image 7b47b82 (storage) - minio: change workdir to /workspace 6f3531e (storage) - minio: use DRYCC_UID DRYCC_GID env 9795fb1 (storage) - minio: use common affinity template a7b09c5 (storage) - minio: change nodes to pod affinity 7607342 (storage) - database: bump mc 2022.04.01.23.44.48 and minio 2022.04.01.03.41.39 ea2b2f1 (storage) - minio: use registry.drycc.cc replace docker.io 445b501 (storage) - minio: https://github.com/minio/minio/issues/14331 f19fbc7 (storage) - minio: use env replace creds volume 8982e2e (storage) - minio: use minio to distributed 06bec73 (storage) - minio: fine management affinity 9b8f006 (storage) - storage: remove assert 59d64b9 (storage) - storage: change listen to POD_IP 60044ee (storage) - storage: add juicefs mount options 189f944 (storage) - storage: remove volumeName 302fe89 (storage) - storage: mv to minio dir 6ec586d (storage) - storage: change readinessProbee andlivenessProbe 0e028df (storage) - storage: add minio pdb cf9bd2d (storage) - storage: add check storage health svc 2dd5c9f (storage) - storage: add volumeBindingMode fa2effc (storage) - storage: remove databaseBucket d166cc7 (storage) - charts: format network-policy name d06bcce (storage) - storage: upgrade to golang 1.19 c2ca05c (storage) - storage: upgrade new require ","categories":"","description":"New Drycc Workflow Release v1.6.0","excerpt":"New Drycc Workflow Release v1.6.0","ref":"/blog/2022/10/21/drycc-workflow-v1.6.0/","tags":"","title":"Drycc Workflow v1.6.0"},{"body":"These release notes for Drycc Workflow v1.5.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.4.0, please refer to the following change summary.\nWorkflow ## v1.4.0 -\u003e v1.5.0 Releases passport v1.0.0 rabbitmq v1.0.0 imagebuilder v1.0.0 builder v1.2.0 -\u003e v1.3.0 controller v1.3.0 -\u003e v1.4.0 database v1.0.2 -\u003e v1.1.0 fluentd v1.1.0 -\u003e v1.2.0 redis v1.1.0 -\u003e v1.2.0 influxdb v1.0.1 -\u003e v1.1.0 logger v1.1.0 -\u003e v1.2.0 minio v1.1.0 -\u003e v1.2.0 monitor v1.1.0 -\u003e v1.2.0 nsqd v1.1.0 -\u003e v1.2.0 registry v1.0.3 -\u003e v1.1.0 registry-proxy v1.0.2 -\u003e v1.1.0 Features 0f5f8e4 (builder) - builder: multi-platform support f269d06 (builder) - build: add buildx supportjkjkk:q 5e72fe8 (builder) - registry: use docker build 25d8a4c (builder) - docker: dealing with the change of docker in kubenetes 1.20 7a3e1c5 (builder) - charts: set the default chart version 46b75ff (builder) - builder: add cloud native buildpacks support 2db2054 (builder) - builder: unified build model 4b7f9d9 (builder) - builder: add initContainers b78c936 (controller) - token: add get token api bac52a5 (controller) - tasks: use celery replace nsqd b9b0c58 (controller) - build: add buildx support 205dcb3 (controller) - influxdb: add influxdb client ff15849 (controller) - influxdb: upgrade to influxdb 2.x 4016244 (controller) - controller: push data to influx fcfce2e (controller) - workflow-manager: add workflow-manager support 00e9bfb (controller) - influxdb: review influxdb code dd644d5 (controller) - docker: dealing with the change of docker in kubenetes 1.20 118278b (controller) - charts: set the default chart version 122a9cd (controller) - oauth2: add oauth2 support 559a5b6 (controller) - controller: use cncf buildpacks replace slugrunner 96130e6 (controller) - charts: database configuration optimization of passport and controller 2ea8508 (controller) - oauth: using passport authentication 868c437 (database) - database: multi-platform support eadd5da (database) - build: add buildx support b6eea4c (database) - docker: dealing with the change of docker in kubenetes 1.20 04a88db (database) - charts: set the default chart version 92ed309 (database) - database: add initContainer ee6b78f (fluentd) - build: add buildx support f523e30 (fluentd) - docker: dealing with the change of docker in kubenetes 1.20 ee47b53 (fluentd) - charts: set the default chart version 80a51af (influxdb) - influxdb: modify influxdb naming rules fb10030 (influxdb) - influxdb: use influxdb v2 0e87ad8 (influxdb) - docker: dealing with the change of docker in kubenetes 1.20 9d10801 (influxdb) - charts: set the default chart version d825c9f (logger) - build: add buildx support b139576 (logger) - docker: dealing with the change of docker in kubenetes 1.20 88f84ea (logger) - charts: set the default chart version 5ccae3e (logger) - dockerfile: remove chmod cmd 193aefc (logger) - logger: add initContainers baee330 (minio) - minio: multi-platform support ad5d055 (minio) - build: add buildx support 19868d4 (minio) - docker: dealing with the change of docker in kubenetes 1.20 4bd84b8 (minio) - charts: set the default chart version 79d1f2f (monitor) - database: multi-platform support 88e5a7f (monitor) - build: add buildx support 5672e99 (monitor) - influxdb: modify influxdb naming rules 8672103 (monitor) - influxdb: use influxdb v2 66cb4c8 (monitor) - docker: dealing with the change of docker in kubenetes 1.20 9576eb3 (monitor) - charts: set the default chart version 30809c9 (monitor) - monitor: add initContainers 70d140c (nsqd) - nsqd: using self compiled nsq binary 1073d4f (nsqd) - nsqd: use GOPATH replace /go e498480 (nsqd) - build: add buildx support cf9b7d5 (nsqd) - docker: dealing with the change of docker in kubenetes 1.20 c335856 (nsqd) - charts: set the default chart version efba713 (redis) - build: add buildx support c7a3b53 (redis) - docker: dealing with the change of docker in kubenetes 1.20 4cdad7b (redis) - charts: set the default chart version 652b443 (registry) - registry: multi-platform support 4060176 (registry) - registry: use docker build 7102a03 (registry) - docker: dealing with the change of docker in kubenetes 1.20 6c8600d (registry) - charts: set the default chart version 33a51c9 (registry) - registry: add initContainers bef70dc (registry-proxy) - build: add buildx support d2319c1 (registry-proxy) - docker: dealing with the change of docker in kubenetes 1.20 02fafed (registry-proxy) - charts: set the default chart version Fixes 5499c9a (controller) - gunicorn: gunicorn not running 06e9e88 (controller) - controller: error loading shared library 01b5bd0 (controller) - controller: upgrade celery config 6e32d55 (controller) - controller: fix update resources bug 0e0d53f (controller) - chart: set the domain depends certManagerEnabled 2ac4ca8 (controller) - passport: error loading shared library libexpat.so.1 a0dd517 (fluentd) - fluentd: drone build 6eca2a3 (logger) - logger: golang lint 63b0aa0 (registry) - drone: charts url error Docs 472cfcc (controller) - controller organize README.md document d9d6e29 (redis) - redis: delete links that do not exist Test case 1468f57 (controller) - controller: add command unittest Maintenance 9999bfd (builder) - builder:replace the special words cda8b58 (builder) - builder: remove docker keyword from charts dc575dd (builder) - builder: use imagebuilder replace dockerbuilder d3bb183 (builder) - docker: use the full name of registry 5fe34d1 (builder) - travis: add DEV_REGISTRY 7e36453 (builder) - CICD: use drone 52b8d9d (builder) - drone: add image_registries volumes 65963f4 (builder) - k8s: add privileged to dind d345fcf (builder) - LICENSE: revert modifications to Apache license 7975c99 (builder) - drone: always pull image 59633dd (builder) - builder: modify launch imagebuild pod 8d14e67 (builder) - builder: use Procfile in anywhere 5357fa8 (builder) - go: bump go mod 8d26ac0 (builder) - k8s: k8s deprecated api migration 0af620d (builder) - chars: change org to imageTag ae84303 (builder) - builder: run imagebuider replace pod with job 3b2c496 (builder) - builder: change docs website 5679a4c (builder) - builder: upgrade to golang1.17 a214503 (controller) - controller:replace whitelist with allowlist 375ddcc (controller) - ps:drycc ps:list show autoscale num c32e409 (controller) - ldap: canot register when ldap is enabled c46580a (controller) - controller:modify redis config fa9e87b (controller) - chart:modify controller charts 6f9fd08 (controller) - nsq: remove nsq 994b2dc (controller) - docker-buildx: add check-docker a720c3a (controller) - controller: remove docker keyword from charts e9a5c84 (controller) - docker: use the full name of registry a26614a (controller) - controller: add rabbitmq env 3df229d (controller) - controller: modify database config \u0026\u0026 remove redis port config \u0026\u0026 add env prefix with DRYCC 257e94b (controller) - controller: CELERY_BROKER use rabbitmq and modify celery-deployment cronjob f4d6ec3 (controller) - chart: pretty chart format 63e6195 (controller) - influxdb: modify influxdb code 0f6d408 (controller) - CICD: use drone 87bad28 (controller) - python: upgrade to python3.9 e8f7560 (controller) - volumes: modify mount summary 6cf6c6b (controller) - drone: add image_registries volumes a9397e8 (controller) - oauth: modify token Authentication c7f8c8b (controller) - deps: bump django from 2.2.14 to 2.2.18 in /rootfs a1a08aa (controller) - deps: bump djangorestframework from 3.11.0 to 3.11.2 in /rootfs efd78b4 (controller) - deps: bump django from 2.2.18 to 2.2.20 in /rootfs 649b044 (controller) - deps: bump django from 2.2.20 to 2.2.22 in /rootfs 41b742b (controller) - deps: bump django from 2.2.22 to 2.2.24 in /rootfs 22ffe5d (controller) - LICENSE: revert modifications to Apache license c98b468 (controller) - drone: always pull image 20e6edb (controller) - chart: modify the problem of using buildpack db16879 (controller) - controller: pretty pods list print ba6f456 (controller) - test: pretty pods list print 5fce4b7 (controller) - k8s: k8s deprecated api migration e9e0bcb (controller) - oauth: using passport authentication 0311172 (controller) - chars: change org to imageTag 150eff1 (controller) - charts: update cert-manager api version de8545a (controller) - controller: update requirements 1442207 (controller) - controller: using django native JSONFiled ab4e836 (controller) - oauth: modify passport api 5c54e06 (controller) - controller: eliminate pip warnings 870328d (controller) - controller: remove entrypoint 5e5e6ae (controller) - controller: upgrade celery config 607778f (controller) - controller: add initContainer 23dc016 (controller) - chart: set the domain depends certManagerEnabled f3cf20b (controller) - controller: remove default bash env 73f2636 (controller) - controller: modify alpinelinux repositories 498e9f2 (controller) - chart: change certManagerEnabled to boolean type 27f5308 (controller) - passport: exclude cryptography 370b75d (controller) - controller: use sh env 07585b4 (database) - postgres:replace the special words 20172dc (database) - database: remove docker keyword from charts abb9b88 (database) - docker: use the full name of registry e72f58f (database) - chart: modify the off-cluster database a91f64f (database) - travis: add DEV_REGISTRY 614fb76 (database) - tests: use add-host replace link a3428f3 (database) - CICD: use drone 239fef1 (database) - drone: add image_registries volumes 42858e1 (database) - LICENSE: revert modifications to Apache license d0fe850 (database) - drone: always pull image 34a36ad (database) - charts: Nn secret is generated during off-cluster 064ccf4 (database) - database: create database 9228992 (database) - chars: change org to imageTag 9f7810c (database) - database: upgrade to wal-g v1.1 05783f4 (fluentd) - fluentd:replace the special words 0739809 (fluentd) - influxdb:replace monitor-influx with influx f02487c (fluentd) - fluentd: remove docker keyword from charts 2c96cc0 (fluentd) - docker: use the full name of registry b20c429 (fluentd) - charts: remove port config 6dd0197 (fluentd) - travis: add DEV_REGISTRY c5bec51 (fluentd) - CICD: use drone f8524b7 (fluentd) - drone: add image_registries volumes a50878a (fluentd) - LICENSE: revert modifications to Apache license 14fe20e (fluentd) - drone: always pull image 4a2f660 (fluentd) - k8s: k8s deprecated api migration de2dd91 (fluentd) - chars: change org to imageTag a9f1944 (fluentd) - fluentd: upgrade to fluentd1.14 7cb4e95 (influxdb) - influxdb: change username to user 0fdc21b (influxdb) - influxdb: remove docker keyword from charts b2acddb (influxdb) - influxdb: change default path ba88919 (influxdb) - influxdb: add check_env function 9117401 (influxdb) - influxdb: modify init_influxdb has_bucket 092a3e6 (influxdb) - chart: pod not readiness 51de380 (influxdb) - travis: add DEV_REGISTRY 66d7667 (influxdb) - docker: replace influxdb base image 3aa3094 (influxdb) - CICD: use drone 14b9c24 (influxdb) - drone: add image_registries volumes 02b4cd1 (logger) - logger:replace the special words 114b5d5 (logger) - reids: delete the logger prefix of redis 639278a (logger) - redis: remove logger from redis conf 90195e2 (logger) - go: remove GOOS and GOARCH 31e2e27 (logger) - logger: remove docker keyword from charts 8fbd9fa (logger) - docker: use the full name of registry b39df2d (logger) - charts: remove redis\\nsqd port config 35d6d07 (logger) - travis: add DEV_REGISTRY 69aabf5 (logger) - tests: remove docker link e916644 (logger) - CICD: use drone d6872b7 (logger) - drone: add image_registries volumes 37801da (logger) - LICENSE: revert modifications to Apache license cfb4b38 (logger) - drone: always pull image 8bda3bf (logger) - go: bump go mod e13ebfc (logger) - chars: change org to imageTag 38e6d8d (minio) - minio:replace the special words d6925dd (minio) - minio: remove docker keyword from charts d56bc39 (minio) - docker: use the full name of registry e4696cc (minio) - travis: add DEV_REGISTRY 70c5c79 (minio) - minio: use latest version 773cf6c (minio) - Makefile: remove DEV_REGISTRY ?= 5ce5bc6 (minio) - CICD: use drone 5da8be3 (minio) - drone: add image_registries volumes c1f0611 (minio) - LICENSE: revert modifications to Apache license b73f792 (minio) - drone: always pull image 79d1c93 (minio) - go: bump go mod c448899 (minio) - chars: change org to imageTag 15ee49e (minio) - minio: migrate deprecated warning 9968a1a (minio) - minio: upgrade to golang1.7 14fedd2 (monitor) - monitor:replace the special works 52c431a (monitor) - reids: delete the logger prefix of redis 2c95b47 (monitor) - redis: remove logger from redis conf da9bc56 (monitor) - monitor:remove influxdb 53f47b9 (monitor) - grafana: use grafana docker image 5bdb188 (monitor) - grafana: use grafana docker image c0586dd (monitor) - monitor: remove docker keyword from charts 87d02b6 (monitor) - charts: add nodes and persistentvolumes rule 1b5598f (monitor) - monitor: modify grafana dashboard with FLUX and pretty config.toml bcbc0d5 (monitor) - docker: use the full name of registry 9418c9e (monitor) - monitor: fix upload dashboard error and modify INFLUXDB input 589f29a (monitor) - travis: add DEV_REGISTRY f776f8a (monitor) - CICD: use drone 6ca3060 (monitor) - drone: add image_registries volumes 6a9ffb2 (monitor) - LICENSE: revert modifications to Apache license 45e41ed (monitor) - drone: always pull image 654d407 (monitor) - k8s: k8s deprecated api migration 41e9b9c (monitor) - chars: change org to imageTag 99c10d3 (monitor) - charts: update cert-manager api version 9bf83c4 (monitor) - oauth: user oauth passport a128f6d (monitor) - chart: change certManagerEnabled to boolean type 8f897fe (monitor) - chart: set the domain depends certManagerEnabled ba6d793 (nsqd) - README:update travis build status 49879c4 (nsqd) - nsqd: minimum git clone code c5e2680 (nsqd) - nsqd: remove docker keyword from charts 21dd17b (nsqd) - docker: use the full name of registry 7d86b3c (nsqd) - charts: remove port config c073d95 (nsqd) - travis: add DEV_REGISTRY 55c297c (nsqd) - CICD: use drone 165c2ae (nsqd) - drone: add image_registries volumes 9c6a1f8 (nsqd) - LICENSE: revert modifications to Apache license 9283098 (nsqd) - drone: always pull image 46acf8a (nsqd) - k8s: k8s deprecated api migration 43caf80 (nsqd) - chars: change org to imageTag 6897471 (nsqd) - nsqd: use official image 297bc05 (redis) - redis:replace the special words f5f8b5e (redis) - reids: delete the logger prefix of redis af7b657 (redis) - redis: change logger-redis to redis 8dca154 (redis) - redis: remove logger from redis conf eaeda2d (redis) - redis: remove docker keyword from charts 53c6358 (redis) - docker: use the full name of registry ae37416 (redis) - charts: remove port config e985656 (redis) - travis: add DEV_REGISTRY 423336a (redis) - CICD: use drone be64ab4 (redis) - drone: add image_registries volumes 3bec735 (redis) - LICENSE: revert modifications to Apache license 4f934f6 (redis) - drone: always pull image 359b878 (redis) - chars: change org to imageTag 83b8ac2 (registry) - workflow:replace the special words 869b280 (registry) - registry: remove docker keyword from charts 999c1e9 (registry) - docker: use the full name of registry 5652da9 (registry) - travis: add DEV_REGISTRY cc8c6c2 (registry) - CICD: use drone c7bdbd0 (registry) - CICD: pretty .drone.yaml format 5c55a38 (registry) - test: use add-host replace link f8866f3 (registry) - drone: add image_registries volumes 6c8292f (registry) - LICENSE: revert modifications to Apache license 1d50f2c (registry) - drone: always pull image efbca6d (registry) - chars: change org to imageTag 2eafc59 (registry-proxy) - registry-proxy: update nginx 071bd86 (registry-proxy) - charts: upgrade k8s newer API versions c72db96 (registry-proxy) - registry-proxy: change travis icon url 63ffb92 (registry-proxy) - registry-proxy:replace the special works 1d904a6 (registry-proxy) - registry-proxy: remove docker keyword from charts c8200b1 (registry-proxy) - docker: use the full name of registry d3fa939 (registry-proxy) - travis: add DEV_REGISTRY 5a8b353 (registry-proxy) - CICD: use drone 703d05a (registry-proxy) - drone: add image_registries volumes aa71db1 (registry-proxy) - LICENSE: revert modifications to Apache license 710c126 (registry-proxy) - drone: always pull image 2dcc5e6 (registry-proxy) - chars: change org to imageTag ","categories":"","description":"New Drycc Workflow Release v1.5.0","excerpt":"New Drycc Workflow Release v1.5.0","ref":"/blog/2022/10/06/drycc-workflow-v1.5.0/","tags":"","title":"Drycc Workflow v1.5.0"},{"body":"These release notes for Drycc Workflow v1.3.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.4.0, please refer to the following change summary.\nWorkflow ## v1.3.0 -\u003e v1.4.0 Releases builder v1.1.0 -\u003e v1.2.0 slugbuilder v1.1.1 -\u003e v1.2.0 dockerbuilder v1.1.1 -\u003e v1.1.2 controller v1.2.1 -\u003e v1.3.0 slugrunner v1.1.1 -\u003e v1.1.2 database v1.0.1 -\u003e v1.0.2 fluentd v1.0.1 -\u003e v1.1.0 redis v1.0.0 -\u003e v1.1.0 logger v1.0.0 -\u003e v1.1.0 minio v1.0.1 -\u003e v1.1.0 monitor v1.0.1 -\u003e v1.1.0 nsqd v1.0.0 -\u003e v1.1.0 registry v1.0.2 -\u003e v1.0.3 registry-proxy v1.0.0 -\u003e v1.0.1 Features fc7d93f (builder) - builder: use go-dev 0c2159e (builder) - builder: fmt code and add create_bucket script 1b88340 (controller) - controller: remove deprecated api a92fdeb (controller) - routable: ingress support routable 1e3eab3 (controller) - maintenance: add maintenance support for ingress 56b9dd0 (controller) - crt: support containerd-ctr 5fc3b46 (controller) - controller: add ephemeral-storage restriction d677e52 (controller) - controller: add a volume command 5f1323a (controller) - controller:drycc run cmd add –mount para 74c36a5 (controller) - tasks: add distributed async task 139c3ca (controller) - tasks: change nsq reader to async f237d74 (controller) - controller:add drycc resource cmd 41b46d0 (controller) - controller:add drycc resource cmd improvement c26f7d8 (controller) - controller: add LimitRanges support 45b5d1b (controller) - users: add users status api 4e16f9b (controller) - ps:add ps:stop/start command c659fa9 (controller) - k8s: add k8s cluster domain 31a625d (controller) - ps:add ps:stop/start command 00a779a (fluentd) - fluentd: support containerd log format f3f1bd4 (fluentd) - nsqd: add stateless nsqd cluster support db7147c (fluentd) - mirrors: delete aliyun mirrors 689c12e (logger) - nsqd: add stateless nsqd cluster support 78ccc5d (logger) - redis: add redis client cluster support 9843f2c (logger) - k8s: add k8s cluster domain 6ba122e (minio) - minio: add pvc support 6973550 (monitor) - monitor: add ingress for monitor cd73305 (monitor) - charts: add volumeName support 4769fe9 (monitor) - nsqd: add stateless nsqd cluster support 87806df (monitor) - k8s: add k8s cluster domain 4db40c4 (nsqd) - nsqd: add stateless nsqd cluster support b6f3d4f (nsqd) - nsqd: add stateless nsqd cluster support 74b85bb (redis) - redis: change redis to statefulset ff98b50 (slugbuilder) - slugbuilder: delete build hook b201c2f (slugbuilder) - buildpacks: use drycc buildpacks Fixes 0ec042d (builder) - test: fix test case error 4fb113b (builder) - build: base image replace by alpine 443df48 (builder) - minio: fix not bucket error 3dab5b0 (builder) - minio: create bucket error 734fca6 (controller) - autoscale: Fix for autoscale on k8s-1.9+ without breaking manual scaling a7dcd10 (controller) - controller: test pass 93f0f2e (controller) - controller: fix migrations error 4724375 (controller) - controller: fix test error 7bacf29 (controller) - charts: fix clusterrole 90957f7 (controller) - pod: sort events error 440b13e (controller) - controller: review table structure 0a470a6 (controller) - controller: bump tornado 5.1.1 e39218b (controller) - pynsq: no current event loop in thread 1d8630e (controller) - tests: fix test_task.py run error 1ff1202 (controller) - controller: fix test case d8c0da3 (controller) - settings: fix env name 6d8fd36 (database) - 003_restore_from_backup.sh: ignore script exit 1 e0394a9 (database) - minio: fix not bucket error f35f252 (database) - mc: fix create_bucket error 74d6886 (database) - postgres: recovery mode not run e50d0c1 (dockerbuilder) - caddy: fix caddy not start f3bec7a (fluentd) - influxdb: fix influxdb host and port bc19f27 (fluentd) - charts: skipped value for daemon_environment: Not a table 338d623 (logger) - logger: logger not run in alpine 7788302 (minio) - minio: bump minio version 619eed0 (minio) - fix: use go mod replace dep 3b42122 (monitor) - monitor: fix host error 67998ef (monitor) - influxdb: replace drycc-monitor-influxapi to drycc-monitor-influx-api 2cc361c (registry) - registry: fix test case 548297a (registry) - minio: fix not bucket error 5412ddb (registry) - minio: create bucket error d0d629e (slugbuilder) - slugbuilder:fix normalize_storage path d76ecbe (slugbuilder) - slugbuilder: use v3 api c505e18 (slugbuilder) - shellcheck: SC2039 Style c893a17 (builder) - builder: fmt code bba5795 (controller) - controller: format code d36082b (controller) - controller: fix pep8 66026f2 (controller) - resource: standardize the naming of resource 03d7e2c (controller) - servicecatalog: change servicecatalog to svcat 49dbb6d (controller) - controller: flake8 upgrade cbfc108 (monitor) - monitor: format charts and dashboard ee85954 (slugbuilder) - slugbuilder: use shellcheck 3afed2e (slugbuilder) - docker: simplify dockerfile 36b7f68 (slugrunner) - docker: simplify dockerfile Maintenance 61bb0ef (builder) - aws: upgrade aws sdk version 0f2e074 (builder) - chore: use go mode replace dep e9a2219 (builder) - builder: delete glide up bb8c518 (builder) - registry: del quay.io fa6d02f (builder) - builder: upgrade go.sum 9d61e8d (builder) - build: upgrade go.mod d763a98 (builder) - charts: upgrade k8s newer API versions d1bc1aa (builder) - pkg: upgrade to new drycc/pkg 02b1e98 (builder) - builder: update go mod 8e17d65 (builder) - builder: change alpine repositories f32b723 (builder) - mirrors: delete aliyun mirrors e33dc61 (builder) - minio: use bin mc replace docker images 3ab4f1c (builder) - builder: update controller-sdk-go b2adfac (builder) - heroku: remove heroku-16 support f429ac8 (builder) - builder: set GIT_LOCK_TIMEOUT to 30 minutes 7197c83 (builder) - go.mod:upgrade require pkg controller-sdk-go 5f3e22d (controller) - deps: bump django from 1.11.21 to 1.11.22 in /rootfs 1db645a (controller) - deps: bump django from 1.11.22 to 1.11.23 in /rootfs fbe8067 (controller) - deps: bump django from 1.11.23 to 1.11.29 in /rootfs 537d667 (controller) - registry: del quay.io a23c65b (controller) - deps: update all deps to the latest version 546337e (controller) - charts: upgrade k8s newer API versions 06023f8 (controller) - workflow-manager: del workflow-manager bba5736 (controller) - controller: change cluster-issuer location 6c43661 (controller) - Certificatechange cluster-issuer location 39a4728 (controller) - controller:change cluster-issuer location del controller-cluster-issuer.yaml 9e96d3f (controller) - Certificate:upgrade version cert-manager.io/v1alpha2 8e68049 (controller) - docker: use INDEX_URL replace index.docker.io 8fda205 (controller) - cert_manager: change cert_manager_enabled to global 6fefb6d (controller) - charts: change platform_domain to global 064b2ad (controller) - maintenance: remove maintenance support b8797c9 (controller) - workflow: remove namespace 1b20d76 (controller) - quota: add kube quota config d780075 (controller) - pod: add pod default resources support 3d72c08 (controller) - rename: rename ingress name 0aa6ab9 (controller) - mirrors: delete aliyun mirrors 7533a65 (controller) - heroku: remove heroku-16 support e5a885d (controller) - controller:check mount volume path 9014e74 (controller) - test: optimization Dockerfile.test 0b6ebb2 (controller) - tasks: change apply_async parameters 835f009 (controller) - wsgi: add tornado 6 support 67a4ad7 (controller) - utils: use threads replace asyncio a28949b (controller) - ldap: add AUTH_LDAP_USER_FLAGS_BY_GROUP a903209 (controller) - charts: add custom controller environment variables support e0e783e (controller) - ldap: change filter style d760825 (controller) - scheduler: remove debug log a25928e (controller) - wsgi: remove a wsgi.py file 7b2696e (controller) - log: disable nsq.client info log 8d5c07b (controller) - charts: add default environment 025f4a2 (controller) - controller: change quota name ebda60e (controller) - controller: review pvc code 8832ba9 (controller) - controller: change status\\binding model type and mount path check container_types 7148d04 (controller) - controller: add overcommit cpu and ram support 4d2087c (controller) - limits: modify limits unit verification af36970 (controller) - api: check cpu/memory range for api 329355b (controller) - volumes: modify the volume size 9dfee09 (controller) - LimitRanges: modify the default limits 5205bca (controller) - controller: improve the details of certificate 7ebecdf (database) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z 6415e2c (database) - postgres: upgrade to pg13 12e6806 (database) - charts: upgrade k8s newer API versions d294509 (database) - minio: use canary minio test 1bad02e (database) - mirrors: delete aliyun mirrors d51420b (database) - minio: use bin mc replace docker images 4133d05 (dockerbuilder) - dockerbuilder: update caddy and kaniko 6b4dd18 (dockerbuilder) - minio: use bin mc replace docker images 6df9b7c (fluentd) - deps-dev: update rake requirement from ~\u003e 10.0 to ~\u003e 12.3 c2490f8 (fluentd) - fluentd: upgrade fluentd be4a56a (fluentd) - fluentd: add Gemfile.lock 2237f75 (fluentd) - charts: upgrade k8s newer API versions c574065 (fluentd) - charts: upgrade k8s newer API versions 52b8084 (fluentd) - router: delete obsolete router code 3b3cceb (fluentd) - fluentd: remove manifests dir 25c6702 (fluentd) - nsqd: change var name bd571be (fluentd) - nsqd: change DRYCC_NSQD_ADDRESSES to DRYCC_NSQD_ADDRS 72aa4e6 (fluentd) - influxdb: change influxdb service name bd61903 (logger) - logger: use go mod replace dep 69c63a1 (logger) - logger: update go.mod 3aa9cd7 (logger) - registry: del quay.io f058496 (logger) - nsqd: change var name 6d9787c (logger) - nsqd: change DRYCC_NSQD_ADDRESSES to DRYCC_NSQD_ADDRS 85ed307 (logger) - logger: standard naming d88e7b6 (minio) - minio: update minio api to v7 43715d2 (minio) - minio: upgrade minio 0e1239b (minio) - minio: use docker.io replace quay.io f7f047b (minio) - registry: del quay.io afa7128 (minio) - build: upgrade go.mod aff2db5 (minio) - charts: upgrade k8s newer API versions 4547f14 (minio) - pkg: upgrade to new drycc/pkg 2769b85 (minio) - minio: use bin mc replace docker images 35dde8d (monitor) - monitor: update grafana influxdb telegraf 9e3a949 (monitor) - charts: upgrade k8s newer API versions 6af0432 (monitor) - workflow-manager: remove workflow-manager 0611c07 (monitor) - router: delete obsolete router code be04824 (monitor) - cert_manager: change cert_manager_enabled to global 3780165 (monitor) - charts: change platform_domain to global 50b04e1 (monitor) - influxdb: remove influxdb admin ui 6ab4d68 (monitor) - influxdb: remove unuse port f1510bd (monitor) - monitor: update grafana dashboard,telegraf inputs.kubernetes f36de2c (monitor) - pvc: upgrade to new format fc78a0a (monitor) - workflow: remove namespace e85890f (monitor) - monitor: monitoring nsqd and redis separately 694f6b1 (monitor) - mirrors: delete aliyun mirrors 4aea36a (monitor) - grafana: add ldap support for grafana 68fc30f (nsqd) - nsq: update nsq 16f32aa (nsqd) - charts: upgrade k8s newer API versions 04db389 (redis) - reids: update to redis 6 3f01bab (redis) - charts: upgrade k8s newer API versions 647e4be (registry) - registry: del quay.io 0bbce99 (registry) - charts: upgrade k8s newer API versions a982b50 (registry) - minio: use bin mc replace docker images e088da3 (registry-proxy) - ingress: renmae use_native_ingress to use_ingress 7e88337 (registry-proxy) - nginx: upgrade nginx to mainline 7204d72 (registry-proxy) - registry: optimizing variable naming 2eafc59 (registry-proxy) - registry-proxy: update nginx 071bd86 (registry-proxy) - charts: upgrade k8s newer API versions c72db96 (registry-proxy) - registry-proxy: change travis icon url ca9f962 (slugbuilder) - slugbuilder: del BUILDPACK_URL support 1b74dd5 (slugbuilder) - slugbuilder: add heroku-20 support 54d4ad2 (slugbuilder) - slugbuilder: del quay.io a78f37e (slugbuilder) - slugbuilder: add heroku-20 stack 94ac94a (slugbuilder) - minio: use bin mc replace docker images 53b4b8b (slugbuilder) - slugbuilder: modify stack priority 58e2bd2 (slugbuilder) - dockerfile: add WORKDIR /tmp b29cd04 (slugbuilder) - slugbuilder: add pre_build.sh 9d319f6 (slugbuilder) - slugbuilder: silent mc command output d1ec3c9 (slugbuilder) - heroku: remove heroku-16 support 5048534 (slugbuilder) - slugbuilder: use drycc stack-images a116537 (slugrunner) - slugrunner: add heroku-20 support a1196bf (slugrunner) - slugrunner: del quay.io 64c96d7 (slugrunner) - slugrunner: add heroku-20 stack cc3e226 (slugrunner) - minio: use bin mc replace docker images 9130bde (slugrunner) - shellcheck: shellcheck installer 4ea33e1 (slugrunner) - slugrunner: modify stack priority 5514e8b (slugrunner) - heroku: remove heroku-16 support be829fb (slugrunner) - slugrunner: use drycc stack-images e1e06be (slugrunner) - slugrunner: remove Dockerfile.heroku-16 ","categories":"","description":"New Drycc Workflow Release v1.4.0","excerpt":"New Drycc Workflow Release v1.4.0","ref":"/blog/2021/10/06/drycc-workflow-v1.4.0/","tags":"","title":"Drycc Workflow v1.4.0"},{"body":"These release notes for Drycc Workflow v1.3.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.2.0, please refer to the following change summary.\nWorkflow ## v1.2.0 -\u003e v1.3.0 Releases builder v1.0.2 -\u003e v1.1.0 slugbuilder v1.1.0 -\u003e v1.1.1 dockerbuilder v1.1.0 -\u003e v1.1.1 controller v1.2.0 -\u003e v1.2.1 slugrunner v1.1.0 -\u003e v1.1.1 database v1.0.0 -\u003e v1.0.1 fluentd v1.0.0 -\u003e v1.0.1 minio v1.0.0 -\u003e v1.0.1 monitor v1.0.0 -\u003e v1.0.1 registry v1.0.1 -\u003e v1.0.2 workflow-manager v1.0.0 -\u003e v1.0.1 Features 9c7cceb (builder) - builder: add app config to env Fixes 7fe44fa (controller) - docker: docker timeout must be an int, float or None b196550 (controller) - controller: revert release.check_image_access for now cc3ec13 (workflow-manager) - glide: bump goautoneg Maintenance ef932c4 (builder) - controller-sdk-go: upgrade controller-sdk-go 4654cf6 (controller) - django-rest-framework: upgrade to 3.9.3 14121f1 (controller) - deps: bump djangorestframework from 3.9.3 to 3.9.4 in /rootfs 385acdc (controller) - deps: bump django from 1.11.20 to 1.11.21 in /rootfs fa312bb (database) - postgres: set max_connections = 1024 7ebecdf (database) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z b8878f6 (dockerbuilder) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z b097451 (fluentd) - fluent: upgrade fluent to v1.4 4341f9a (minio) - mc: upgrade mc and minio c1ee2a4 (monitor) - monitor: remove copyrights.tar.gz 9854260 (registry) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z acc5627 (slugbuilder) - slugbuilder: internal support for multi buildpack d58907e (slugbuilder) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z b39a0c2 (slugrunner) - mc: upgrade mc to RELEASE.2019-05-23T01-33-27Z ","categories":"","description":"New Drycc Workflow Release v1.3.0","excerpt":"New Drycc Workflow Release v1.3.0","ref":"/blog/2020/10/06/drycc-workflow-v1.3.0/","tags":"","title":"Drycc Workflow v1.3.0"},{"body":"These release notes for Drycc Workflow v1.2.0 provide an overview of the release and document the known issues with Drycc Workflow and its flavours. For details of the changes applied since v1.1.0, please refer to the following change summary.\nWorkflow ## v1.1.0 -\u003e v1.2.0 Releases builder v1.0.1 -\u003e v1.0.2 slugbuilder v1.0.0 -\u003e v1.1.0 dockerbuilder v1.0.0 -\u003e v1.1.0 controller v1.1.0 -\u003e v1.2.0 slugrunner v1.0.0 -\u003e v1.1.0 registry v1.0.0 -\u003e v1.0.1 registry-proxy v1.0.1 -\u003e v1.0.2 Features e5584e3 (controller) - controller: add STACK support ad34dc1 (dockerbuilder) - kaniko: use kaniko replace docker-py b81430e (dockerbuilder) - dockerbuilder: change image to image.json format 60dde96 (slugbuilder) - slugbuilder: add STACK support fe8b6e5 (slugrunner) - slugrunner: add STACK support Maintenance 942f050 (builder) - registry: remove env DRYCC_REGISTRY_PROXY_PORT ff7a16f (builder) - registry: remove ecr and gcr registry ad13683 (builder) - builder: change DRYCC_BUILD_TYPE to DRYCC_STACK 6def637 (builder) - registry: rename DRYCC_REGISTRY_SERVICE to DRYCC_REGISTRY_PROXY 5044e22 (builder) - registry: remove registry_secret_prefix 2ea39cc (builder) - controller-go-sdk: upgrade controller-go-sdk 6aee0d7 (builder) - registry: optimizing variable naming f9c62d9 (controller) - domain: added reserved domain check f5a135b (controller) - migrations: clean old migrations 4369b2c (controller) - registry: rename DRYCC_REGISTRY_SERVICE to DRYCC_REGISTRY_PROXY 1057ca5 (controller) - registry: remove registry_secret_prefix d114b3e (controller) - docker: update docker client edbe963 (dockerbuilder) - dockerfile: change base image to alpine fb35baf (dockerbuilder) - registry: rename DRYCC_REGISTRY_SERVICE to DRYCC_REGISTRY_PROXY 946dbf6 (dockerbuilder) - docker: remove insecure support 628d853 (dockerbuilder) - proxy: add registry proxy ff27cbd (registry) - env: remove unused env 7204d72 (registry-proxy) - registry: optimizing variable naming ","categories":"","description":"New Drycc Workflow Release v1.2.0","excerpt":"New Drycc Workflow Release v1.2.0","ref":"/blog/2019/10/06/drycc-workflow-v1.2.0/","tags":"","title":"Drycc Workflow v1.2.0"},{"body":"Drycc Workflow is an open source Container as a Service (CaaS) that adds a developer-friendly layer to any Kubernetes cluster, making it easy to deploy and manage applications.\nWe welcome your input! If you have feedback, please submit an issue. If you’d like to participate in development, please read the “Working on Documentation” section below and submit a pull request.\n","categories":"","description":"Drycc Workflow is A Open, Unified, Lightweight, Simpler Containers as a Service (CaaS).","excerpt":"Drycc Workflow is A Open, Unified, Lightweight, Simpler Containers as …","ref":"/blog/2018/10/06/welcome-to-drycc/","tags":"","title":"Welcome to Drycc"},{"body":" About Drycc Drycc, the only Container as a Service (CaaS) you need.\nNative to Kubernetes, Drycc is the Container as a Service(CaaS) suite available on every public cloud, every Kubernetes distribution, the private cloud and the edge.\nMission\nEmpower engineers and enterprises to innovate with speed, agility, and scale.\nVision\nBecome the best and most respected infrastructure software company in the world.\nCore values\nNative to Kubernetes, Drycc is the Container as a Service(CaaS) suite available on every public cloud, every Kubernetes distribution, the private cloud and the edge.\nWe value each other We recognize we come from a variety of backgrounds and have a variety of beliefs and values. We embrace each other as people, respect our differences, and are committed to working together to achieve our shared objectives.\nWork for Customer Success We listen to our customers to understand their needs and think from their perspective. We identify current and potential challenges and optimize business value for our customers. Our goal is to be a trusted, reliable, and long-term partner providing leading technology to our users.\nWe embrace failure We try things, break things, take risks, and believe failure is key to innovation. We bounce back from failure and learn quickly.\nWe are committed to open source We strive to make information and the decision process as transparent as possible. We endeavor to be humble, curious, and always open to learning and improving ourselves. We are open to different opinions, diverse perspectives and challenges, but after a decision is made, we fully commit to it. We believe in open source and are committed to participating in and contributing to the open source community in meaningful ways.\nWe are committed to helping our customers build cool stuff that transforms their business in less time – we call it Time to Awesome.\n","categories":"","description":"","excerpt":" About Drycc Drycc, the only Container as a Service (CaaS) you need. …","ref":"/about/","tags":"","title":"About"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/blog/","tags":"","title":"Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/community/","tags":"","title":"Community"},{"body":" A Open, Unified, Lightweight, Simpler Containers as a Service (CaaS). Learn More Quickstart Simpler cloud, happier devs, better results — in the drycc!\nNative to Kubernetes, Drycc is the Container as a Service(CaaS) suite available on every public cloud, every Kubernetes distribution, the private cloud and the edge.\n(An easy-to-use, scalable CaaS platform available on Metal, AWS, Azure, and Google Cloud, and more)\nNew monitor metrics! We provide a few out of the box dashboards for monitoring Drycc Workflow.\nRead more\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more\nContact us on tawk! If you have any questions concerning our products, our support team will be happy to help you.\nRead more\nFeatures\nOpen Source Open source from day one, leverage the power of global innovation with the leading database open source community.\nRead more\nMulti Platform Both X86 and ARM64 are supported with binaries and multiarch images available for both, drycc works great from something in any server.\nMeet twelve-factor Drycc Workflow is a lightweight CaaS platform that deploys and scales Twelve-Factor apps as containers across a K8s cluster.\nRead more\nIt’s easy to deploy, operate and scale drycc — anywhere.\n","categories":"","description":"","excerpt":" A Open, Unified, Lightweight, Simpler Containers as a Service (CaaS). …","ref":"/","tags":"","title":"Drycc"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]